using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NetCorePal.Extensions.CodeAnalysis;

[Generator]
public class IntegrationEventToHandlerMetadataGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax,
                transform: (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(c => c != null);

        var compilationAndClasses = context.CompilationProvider.Combine(classDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndClasses, (spc, source) =>
        {
            var (compilation, classes) = source;
            var relations = new List<(string IntegrationEventType, string[] HandlerTypes)>();
            var eventToHandlers = new Dictionary<string, HashSet<string>>();

            foreach (var classDecl in classes)
            {
                var semanticModel = compilation.GetSemanticModel(classDecl.SyntaxTree);
                var symbol = semanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;
                if (symbol == null) continue;
                var handlerInterface = symbol.AllInterfaces.FirstOrDefault(i =>
                    i.IsGenericType && i.Name == "IIntegrationEventHandler");
                if (handlerInterface == null) continue;
                var eventType = handlerInterface.TypeArguments[0].ToDisplayString();
                var handlerType = symbol.ToDisplayString();

                if (!eventToHandlers.TryGetValue(eventType, out var handlers))
                {
                    handlers = new HashSet<string>();
                    eventToHandlers[eventType] = handlers;
                }
                handlers.Add(handlerType);
            }

            foreach (var kvp in eventToHandlers)
            {
                relations.Add((kvp.Key, kvp.Value.ToArray()));
            }

            if (relations.Count > 0)
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>\nusing System;\nusing NetCorePal.Extensions.CodeAnalysis.Attributes;");
                foreach (var rel in relations)
                {
                    var handlers = string.Join(", ", rel.HandlerTypes.Select(h => $"\"{h}\""));
                    sb.AppendLine($"[assembly: IntegrationEventToHandlerMetadataAttribute(\"{rel.IntegrationEventType}\", {handlers})]\n");
                }
                spc.AddSource("IntegrationEventToHandlerMetadata.g.cs", sb.ToString());
            }
        });
    }
}
