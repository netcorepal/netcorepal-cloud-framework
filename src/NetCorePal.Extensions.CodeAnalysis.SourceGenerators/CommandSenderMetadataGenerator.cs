using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NetCorePal.Extensions.CodeAnalysis.SourceGenerators;

[Generator]
public class CommandSenderMetadataGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var methodDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is MethodDeclarationSyntax,
                transform: (ctx, _) => ctx.Node as MethodDeclarationSyntax)
            .Where(m => m != null);

        var compilationAndMethods = context.CompilationProvider.Combine(methodDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndMethods, (spc, source) =>
        {
            var (compilation, methodNodes) = source;
            var senderMetas = new List<(string SenderType, string MethodName, List<string> CommandTypes)>();

            foreach (var method in methodNodes)
            {
                if (method is null) continue;
                var semanticModel = compilation.GetSemanticModel(method.SyntaxTree);
                if (semanticModel == null) continue;
                var methodSymbol = semanticModel.GetDeclaredSymbol(method) as IMethodSymbol;
                if (methodSymbol == null) continue;
                var containingType = methodSymbol.ContainingType;
                if (containingType == null || containingType.DeclaredAccessibility != Accessibility.Public) continue;

                // 查找方法体内所有调用，判断是否为命令发送（如 Send/Publish/Execute/Dispatch）
                var commandTypes = new HashSet<string>();
                if (method.Body != null)
                {
                    foreach (var invocation in method.Body.DescendantNodes().OfType<InvocationExpressionSyntax>())
                    {
                        var invokedSymbol = semanticModel.GetSymbolInfo(invocation).Symbol as IMethodSymbol;
                        if (invokedSymbol == null) continue;
                        var name = invokedSymbol.Name.ToLower();
                        if (name.Contains("send") || name.Contains("publish") || name.Contains("execute") || name.Contains("dispatch"))
                        {
                            // 尝试获取命令类型参数
                            if (invocation.ArgumentList.Arguments.Count > 0)
                            {
                                var arg = invocation.ArgumentList.Arguments[0];
                                var argType = semanticModel.GetTypeInfo(arg.Expression).Type;
                                if (argType is INamedTypeSymbol namedType && GeneratorExtensions.IsCommand(namedType))
                                {
                                    commandTypes.Add(namedType.ToDisplayString());
                                }
                            }
                        }
                    }
                }
                if (commandTypes.Count > 0)
                {
                    senderMetas.Add((containingType.ToDisplayString(), methodSymbol.Name, commandTypes.ToList()));
                }
            }

            if (senderMetas.Count > 0)
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>\nusing System;\nusing NetCorePal.Extensions.CodeAnalysis.Attributes;");
                foreach (var (senderType, methodName, commandTypes) in senderMetas)
                {
                    var commandsLiteral = commandTypes.Count > 0
                        ? string.Join(", ", commandTypes.Select(c => $"\"{c}\""))
                        : string.Empty;
                    sb.AppendLine($"[assembly: CommandSenderMetadataAttribute(\"{senderType}\", \"{methodName}\"{(commandsLiteral.Length > 0 ? ", " + commandsLiteral : string.Empty)})]\n");
                }
                spc.AddSource("CommandSenderMetadata.g.cs", sb.ToString());
            }
        });
    }
}
