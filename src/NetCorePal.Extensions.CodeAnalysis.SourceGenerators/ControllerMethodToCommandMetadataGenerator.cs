using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

[Generator]
public class ControllerMethodToCommandMetadataGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax,
                transform: (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(c => c != null);

        var compilationAndClasses = context.CompilationProvider.Combine(classDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndClasses, (spc, source) =>
        {
            var (compilation, classes) = source;
            var relations = new List<(string ControllerType, string MethodName, string[] CommandTypes)>();

            foreach (var classDecl in classes)
            {
                var semanticModel = compilation.GetSemanticModel(classDecl.SyntaxTree);
                var symbol = semanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;
                if (symbol == null) continue;
                if (!(symbol.Name.EndsWith("Controller") || symbol.Name.EndsWith("Endpoint"))) continue;
                var controllerType = symbol.ToDisplayString();

                foreach (var method in classDecl.Members.OfType<MethodDeclarationSyntax>())
                {
                    if (!method.Modifiers.Any(m => m.IsKind(SyntaxKind.PublicKeyword))) continue;
                    var methodName = method.Identifier.Text;
                    var commandTypes = new HashSet<string>();
                    var invocations = method.DescendantNodes().OfType<InvocationExpressionSyntax>();
                    foreach (var invocation in invocations)
                    {
                        var invokedSymbol = semanticModel.GetSymbolInfo(invocation).Symbol as IMethodSymbol;
                        if (invokedSymbol == null) continue;
                        if (invokedSymbol.Name == "Send" || invokedSymbol.Name == "SendAsync")
                        {
                            var argType = semanticModel.GetTypeInfo(invocation.ArgumentList.Arguments.First().Expression).Type;
                            if (argType != null)
                            {
                                commandTypes.Add(argType.ToDisplayString());
                            }
                        }
                    }
                    if (commandTypes.Count > 0)
                    {
                        relations.Add((controllerType, methodName, commandTypes.ToArray()));
                    }
                }
            }

            if (relations.Count > 0)
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>\nusing System;\nusing NetCorePal.Extensions.CodeAnalysis.Attributes;");
                foreach (var rel in relations)
                {
                    var commands = string.Join(", ", rel.CommandTypes.Select(c => $"\"{c}\""));
                    sb.AppendLine($"[assembly: ControllerMethodToCommandMetadataAttribute(\"{rel.ControllerType}\", \"{rel.MethodName}\", {commands})]\n");
                }
                spc.AddSource("ControllerMethodToCommandMetadata.g.cs", sb.ToString());
            }
        });
    }
} 