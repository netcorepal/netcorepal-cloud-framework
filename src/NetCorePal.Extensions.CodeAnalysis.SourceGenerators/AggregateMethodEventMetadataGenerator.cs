using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

[Generator]
public class AggregateMethodEventMetadataGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax,
                transform: (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(c => c != null);

        var compilationAndClasses = context.CompilationProvider.Combine(classDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndClasses, (spc, source) =>
        {
            var (compilation, classes) = source;
            var aggregates = new List<(string AggregateType, string MethodName, string[] EventTypes)>();

            foreach (var classDecl in classes)
            {
                var semanticModel = compilation.GetSemanticModel(classDecl.SyntaxTree);
                var symbol = semanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;
                if (symbol == null) continue;
                if (!symbol.AllInterfaces.Any(i => i.Name == "IAggregateRoot")) continue;
                var aggregateType = symbol.ToDisplayString();
                foreach (var method in classDecl.Members.OfType<MethodDeclarationSyntax>())
                {
                    if (!method.Modifiers.Any(m => m.IsKind(SyntaxKind.PublicKeyword))) continue;
                    var methodName = method.Identifier.Text;
                    var ns = symbol.ContainingNamespace.ToDisplayString();
                    // 这里假设每个方法只发出一个事件，后续如需支持多个事件可扩展
                    var eventTypes = new List<string> { $"{ns}.Events.{methodName}DomainEvent" };
                    aggregates.Add((aggregateType, methodName, eventTypes.ToArray()));
                }
            }

            if (aggregates.Count > 0)
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>\nusing System;\nusing NetCorePal.Extensions.CodeAnalysis.Attributes;");
                foreach (var agg in aggregates)
                {
                    var events = string.Join(", ", agg.EventTypes.Select(e => $"\"{e}\""));
                    sb.AppendLine($"[assembly: AggregateMethodEventMetadataAttribute(\"{agg.AggregateType}\", \"{agg.MethodName}\", {events})]\n");
                }
                spc.AddSource("AggregateMethodEventMetadata.g.cs", sb.ToString());
            }
        });
    }
} 