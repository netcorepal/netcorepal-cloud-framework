using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NetCorePal.Extensions.CodeAnalysis.SourceGenerators;

[Generator]
public class IntegrationEventConverterMetadataGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var typeDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax || node is RecordDeclarationSyntax,
                transform: (ctx, _) => ctx.Node)
            .Where(n => n is ClassDeclarationSyntax || n is RecordDeclarationSyntax);

        var compilationAndTypes = context.CompilationProvider.Combine(typeDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndTypes, (spc, source) =>
        {
            var (compilation, typeNodes) = ((Compilation, System.Collections.Immutable.ImmutableArray<SyntaxNode>))source;
            var metas = new List<(string DomainEventType, string IntegrationEventType)>();

            foreach (var typeDecl in typeNodes)
            {
                var semanticModel = compilation.GetSemanticModel(typeDecl.SyntaxTree);
                var symbol = semanticModel.GetDeclaredSymbol(typeDecl) as INamedTypeSymbol;
                if (symbol == null) continue;
                // 查找实现 IIntegrationEventConverter<TDomainEvent, TIntegrationEvent> 的类型
                var converterInterface = symbol.AllInterfaces.FirstOrDefault(i => i.Name == "IIntegrationEventConverter" && i.TypeArguments.Length == 2);
                if (converterInterface != null)
                {
                    var domainEventType = converterInterface.TypeArguments[0].ToDisplayString();
                    var integrationEventType = converterInterface.TypeArguments[1].ToDisplayString();
                    metas.Add((domainEventType, integrationEventType));
                }
            }

            if (metas.Count > 0)
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>\nusing System;\nusing NetCorePal.Extensions.CodeAnalysis.Attributes;");
                foreach (var (domainEventType, integrationEventType) in metas)
                {
                    sb.AppendLine($"[assembly: IntegrationEventConverterMetadataAttribute(\"{domainEventType}\", \"{integrationEventType}\")]\n");
                }
                spc.AddSource("IntegrationEventConverterMetadata.g.cs", sb.ToString());
            }
        });
    }
}
