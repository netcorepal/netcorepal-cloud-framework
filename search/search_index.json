{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"netcorepal-cloud-framework","text":"<p>\u4e00\u4e2a\u57fa\u4e8e<code>ASP.NET Core</code>\u5b9e\u73b0\u7684<code>\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1</code>\u843d\u5730<code>\u6218\u672f</code>\u6846\u67b6\u3002</p> <p>A <code>tactical</code> framework for <code>Domain-Driven Design</code> based on <code>ASP.NET Core</code>.</p> <p>\u6838\u5fc3\u7279\u6027\uff1a + \u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u5b9e\u8df5\u652f\u6301 + CQRS + Event Driven + \u5206\u5e03\u5f0f\u4e8b\u52a1\uff08\u4e8b\u4ef6\u5904\u7406\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff09 + \u591a\u79df\u6237 + \u591a\u73af\u5883\uff08\u7070\u5ea6\u53d1\u5e03\uff09</p>"},{"location":"#_1","title":"\u5982\u4f55\u4f7f\u7528","text":""},{"location":"#_2","title":"\u4f7f\u7528\u6a21\u7248\u5de5\u5177","text":"<p>\u4f7f\u7528 <code>NetCorePal.Template</code> \u6a21\u677f\u5de5\u5177\u521b\u5efa\u9879\u76ee:</p> <pre><code># \u5b89\u88c5\u6a21\u677f\u5de5\u5177\ndotnet new -i NetCorePal.Template\n# \u521b\u5efa\u9879\u76ee\ndotnet new netcorepal-web -n My.Project.Name\n</code></pre> <p>\u6a21\u677f\u5de5\u5177\u6e90\u7801\uff1ahttps://github.com/netcorepal/netcorepal-cloud-template</p>"},{"location":"#_3","title":"\u5feb\u901f\u5165\u95e8\u6587\u6863","text":"<ul> <li>\u521b\u5efa\u9879\u76ee</li> <li>\u9879\u76ee\u7ed3\u6784</li> <li>\u5f00\u53d1\u6d41\u7a0b</li> </ul>"},{"location":"#_4","title":"\u5b8c\u6574\u6587\u6863","text":"<p>https://netcorepal.github.io/netcorepal-cloud-framework</p>"},{"location":"#_5","title":"\u613f\u666f","text":"<p>\u968f\u7740 .NET \u6280\u672f\u751f\u6001\u7684\u53d1\u5c55\uff0c\u5176\u5728\u4e91\u539f\u751f\u65f6\u4ee3\u7684\u5fae\u670d\u52a1\u67b6\u6784\u5df2\u7ecf\u53d1\u5c55\u5f97\u975e\u5e38\u6210\u719f\uff0c\u800c\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u7684\u843d\u5730\u4e5f\u5f97\u5230\u4e86\u975e\u5e38\u597d\u7684\u652f\u6301\u3002\u540c\u65f6\u968f\u7740\u5404\u884c\u5404\u4e1a\u7684\u4fe1\u606f\u5316\u3001\u6570\u5b57\u5316\u53d1\u5c55\u8bc9\u6c42\u8d8a\u53d1\u5f3a\u70c8\uff0c\u66f4\u591a\u7684\u4f01\u4e1a\u548c\u56e2\u961f\u4e5f\u5bf9\u5982\u4f55\u6709\u6548\u5730\u7ec4\u7ec7\u7814\u53d1\u56e2\u961f\u4ee5\u53ca\u5b9e\u73b0\u81ea\u5df1\u7684\u4e1a\u52a1\u67b6\u6784\u8fd9\u4e2a\u8bfe\u9898\u5f00\u59cb\u6295\u5165\u5173\u6ce8\u3002</p> <p>\u672c\u9879\u76ee\u7684\u6838\u5fc3\u76ee\u7684\u662f\u5e2e\u52a9\u4f01\u4e1a\u5feb\u901f\u6784\u5efa\u4e00\u5957\u57fa\u4e8e\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u7684\u6280\u672f\u5b9e\u73b0\u6846\u67b6\uff0c\u540c\u65f6\u5728\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u65b9\u6cd5\u8bba\u65b9\u9762\u8fdb\u884c\u6c89\u6dc0\u548c\u63a2\u8ba8\uff0c\u4ece\u800c\u8ba9\u66f4\u591a\u7684\u4f01\u4e1a\u548c\u56e2\u961f\u5f97\u5230\u5e2e\u52a9\u3002</p>"},{"location":"#roadmap","title":"Roadmap","text":"<p>\u89c4\u5212\u63d0\u4f9b\u7684\u80fd\u529b</p> <ul> <li> \u652f\u6301\u7075\u6d3b\u914d\u7f6e\u4e0e\u90e8\u7f72\u7684\u7f51\u5173</li> <li> \u57fa\u4e8e <code>ASP.NET Core</code>\u548c\u5f00\u6e90\u7ec4\u4ef6\u7684\u5feb\u901f\u5f00\u53d1\u6846\u67b6</li> <li> \u63d0\u4f9b\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u5b9e\u73b0\u7684\u4ee3\u7801\u6a21\u677f\u5de5\u7a0b\u811a\u624b\u67b6</li> <li> \u5b9e\u73b0\u5177\u5907\u4e1a\u52a1\u6269\u5c55\u6027\u7684\u6574\u4f53\u7070\u5ea6\u89e3\u51b3\u65b9\u6848</li> <li> \u5b9e\u73b0\u5177\u5907\u4e1a\u52a1\u6269\u5c55\u6027\u7684\u79df\u6237\u80fd\u529b</li> <li> \u57fa\u4e8e\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u7684\u5fae\u670d\u52a1\u67b6\u6784\u5b9e\u8df5</li> <li> \u6a21\u5757\u5316\u7684\u8bbe\u8ba1\uff0c\u53ef\u6309\u9700\u4f7f\u7528\u3001\u6309\u9700\u66ff\u6362</li> <li> \u63d0\u4f9b\u8be6\u5b9e\u7684\u6587\u6863</li> <li> \u63d0\u4f9b\u5e26\u6709\u53ef\u89c6\u5316\u64cd\u4f5c\u754c\u9762\u7684\u5fae\u670d\u52a1\u57fa\u7840\u8bbe\u65bd</li> <li> \u57fa\u4e8e .NET Aspire</li> </ul>"},{"location":"#_6","title":"\u7ec4\u4ef6\u8bf4\u660e","text":"<ul> <li> Context Passing</li> <li> AspNetCore (HTTP Request)</li> <li> HttpClient</li> <li> RabbitMQ (Based on DotNetCore.CAP)</li> <li> Domain</li> <li> Entity</li> <li> StronglyTypedId (With Source Generator)</li> <li> AggregateRoot</li> <li> DomainEvent</li> <li> Repository (Based On EntityFrameworkCore)</li> <li> Transaction</li> <li> UnitOfWork</li> <li> Distributed Transaction<ul> <li> Outbox(Based on DotNetCore.CAP)</li> </ul> </li> <li> IdGeneration</li> <li> Snowflake<ul> <li> Snowflake with Etcd</li> <li> Snowflake with Redis</li> <li> Snowflake with Consul</li> </ul> </li> <li> Primitives</li> <li> Exception Handling</li> <li> Clock</li> <li> Service Discovery</li> <li> Microsoft Service Discovery (Aspire)</li> <li> Service Discovery Kubernetes</li> <li> Multi Tenant</li> <li> Multi Environment</li> <li> Gray Environment</li> </ul>"},{"location":"#_7","title":"\u5f15\u7528\u9879\u76ee","text":"<ul> <li>AspNetCore</li> <li>EntityFrameworkCore</li> <li>MediatR</li> <li>DotNetCore.CAP</li> <li>KubernetesClient</li> <li>DistributedLock.Redis</li> </ul>"},{"location":"#_8","title":"\u5173\u4e8e\u534f\u4f5c","text":"<p>\u6211\u4eec\u5177\u6709\u5f00\u653e\u7684\u5fc3\u6001\uff0c\u6b22\u8fce\u4efb\u4f55\u4eba\u63d0\u51fa\u610f\u89c1\u548c\u5efa\u8bae\uff0c\u4e5f\u6b22\u8fce\u4efb\u4f55\u4eba\u8d21\u732e\u4ee3\u7801\u3002</p>"},{"location":"#_9","title":"\u5f00\u53d1\u8c03\u8bd5","text":"<ol> <li>\u5b89\u88c5<code>.NET 9.0 SDK</code>\u6216\u66f4\u9ad8\u7248\u672c\u3002</li> </ol> <p>SDK\u4e0b\u8f7d\u5730\u5740\uff1a https://dot.net/download</p> <ol> <li>\u62e5\u6709<code>Docker</code>\u73af\u5883\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u3002</li> </ol> <p><code>Docker Desktop</code>\u4e0b\u8f7d\u5730\u5740\uff1a https://www.docker.com/products/docker-desktop/</p> <ol> <li> <p>\u6784\u5efa\u9879\u76ee</p> <pre><code>dotnet build\n</code></pre> </li> <li> <p>\u8fd0\u884c\u6d4b\u8bd5</p> <pre><code>dotnet test\n</code></pre> </li> <li> <p>\u5176\u5b83\u53ef\u9009\u4f9d\u8d56</p> </li> </ol> <p>\u5b89\u88c5<code>skywalking</code></p> <pre><code>```shell\n# \u5b89\u88c5oap\ndocker run --name oap -p 11800:11800 -p 12800:12800 --restart always -d apache/skywalking-oap-server:9.0.0\n\n# \u5b89\u88c5oap-ui\nexport version=9.0.0\ndocker run --name oap-ui -p 8080:8080 -d --link oap -e SW_OAP_ADDRESS=http://oap:12800  apache/skywalking-ui:$version\n```\n</code></pre>"},{"location":"#_10","title":"\u9884\u89c8\u7248\u6e90","text":"<pre><code>https://www.myget.org/F/netcorepal/api/v3/index.json\n</code></pre>"},{"location":"#_11","title":"\u5173\u6ce8\u91cd\u70b9","text":"<ul> <li>\u5165\u95e8\u53cb\u597d</li> <li>\u5b8c\u5584\u7684\u6587\u6863</li> <li>\u914d\u5957\u6559\u7a0b</li> <li>\u5efa\u6a21\u53cb\u597d</li> <li>\u5bf9\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u5efa\u6a21\u7684\u76f4\u63a5\u652f\u6301</li> <li>\u6269\u5c55\u53cb\u597d</li> <li>\u6a21\u5757\u5316\u8bbe\u8ba1</li> <li>\u652f\u6301\u6a21\u5757\u96c6\u6210\u6216\u66ff\u6362</li> <li>\u9f13\u52b1\u57fa\u4e8e\u6e90\u7801\u5b9a\u5236\u4fee\u6539</li> <li>\u90e8\u7f72\u53cb\u597d</li> <li>\u652f\u6301Docker</li> <li>\u652f\u6301Helm</li> <li>\u6d4b\u8bd5\u53cb\u597d</li> <li>\u5f3a\u8c03\u5bf9\u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u7684\u652f\u6301</li> <li>AI \u53cb\u597d</li> <li>\u6301\u7eed\u63a2\u7d22\u5bf9\u5927\u8bed\u8a00\u6a21\u578bAI\u81ea\u52a8\u5316\u4ee3\u7801\u751f\u6210\u7684\u652f\u6301</li> </ul>"},{"location":"#_12","title":"\u4e00\u4e9b\u539f\u5219","text":"<p>\u6211\u4eec\u4e0d\u91cd\u590d\u9020\u8f6e\u5b50\uff0c\u66f4\u591a\u5730\u662f\u6709\u673a\u5730\u5c06\u4f18\u79c0\u7684\u57fa\u7840\u8bbe\u65bd\u7ec4\u7ec7\u8d77\u6765\uff0c\u901a\u8fc7\u5efa\u7acb\u826f\u597d\u7684\u67b6\u6784\u7ea6\u5b9a\u6765\u8fbe\u5230\u76ee\u7684\u3002</p> <p>\u6211\u4eec\u6301\u7eed\u5173\u6ce8\u534f\u4f5c\u6548\u7387\uff0c\u672c\u9879\u76ee\u7684\u67b6\u6784\u8bbe\u8ba1\uff0c\u4f1a\u6301\u7eed\u5173\u6ce8\u67b6\u6784\u5bf9\u56e2\u961f\u534f\u4f5c\u7684\u5f71\u54cd\uff0c\u5e76\u6301\u7eed\u6539\u8fdb\u3002</p> <p>\u6211\u4eec\u6301\u7eed\u5173\u6ce8\u5065\u58ee\u6027\uff0c\u6301\u7eed\u5173\u6ce8\u9879\u76ee\u4ee3\u7801\u7684\u8d28\u91cf\u3002</p>"},{"location":"en/","title":"netcorepal-cloud-framework","text":"<p>A <code>tactical</code> framework for <code>Domain-Driven Design</code> based on <code>ASP.NET Core</code>.</p> <p>Core features: + Domain-Driven Design practice support + CQRS + Event Driven + Distributed transactions (eventual consistency of event handling) + Multi-tenant + Multi-environment (canary release)</p>"},{"location":"en/#how-to-use","title":"How to use","text":""},{"location":"en/#using-the-template-tool","title":"Using the template tool","text":"<p>Create a project using the <code>NetCorePal.Template</code> template tool:</p> <pre><code># Install the template tool\ndotnet new -i NetCorePal.Template\n# Create a project\ndotnet new netcorepal-web -n My.Project.Name\n</code></pre> <p>Template tool source code: https://github.com/netcorepal/netcorepal-cloud-template</p>"},{"location":"en/#quick-start-documentation","title":"Quick start documentation","text":"<ul> <li>Create a project</li> <li>Project structure</li> <li>Development process</li> </ul>"},{"location":"en/#complete-documentation","title":"Complete documentation","text":"<p>https://netcorepal.github.io/netcorepal-cloud-framework/en</p>"},{"location":"en/#vision","title":"Vision","text":"<p>With the development of the .NET technology ecosystem, its microservice architecture in the cloud-native era has become very mature, and the implementation of Domain-Driven Design has also received very good support. At the same time, with the increasing demand for informatization and digitalization in various industries, more enterprises and teams are beginning to pay attention to how to effectively organize R&amp;D teams and realize their business architecture.</p> <p>The core purpose of this project is to help enterprises quickly build a technical implementation framework based on Domain-Driven Design, while accumulating and discussing the methodology of Domain-Driven Design, so that more enterprises and teams can benefit.</p>"},{"location":"en/#roadmap","title":"Roadmap","text":"<p>Planned capabilities</p> <ul> <li> Support for flexible configuration and deployment of gateways</li> <li> Rapid development framework based on <code>ASP.NET Core</code> and open-source components</li> <li> Provide code template project scaffolding for Domain-Driven Design implementation</li> <li> Implement a business-extensible overall canary release solution</li> <li> Implement business-extensible tenant capabilities</li> <li> Microservice architecture practice based on Domain-Driven Design</li> <li> Modular design, can be used and replaced as needed</li> <li> Provide detailed documentation</li> <li> Provide microservice infrastructure with a visual operation interface</li> <li> Based on .NET Aspire</li> </ul>"},{"location":"en/#component-description","title":"Component description","text":"<ul> <li> Context Passing</li> <li> AspNetCore (HTTP Request)</li> <li> HttpClient</li> <li> RabbitMQ (Based on DotNetCore.CAP)</li> <li> Domain</li> <li> Entity</li> <li> StronglyTypedId (With Source Generator)</li> <li> AggregateRoot</li> <li> DomainEvent</li> <li> Repository (Based On EntityFrameworkCore)</li> <li> Transaction</li> <li> UnitOfWork</li> <li> Distributed Transaction<ul> <li> Outbox (Based on DotNetCore.CAP)</li> </ul> </li> <li> IdGeneration</li> <li> Snowflake<ul> <li> Snowflake with Etcd</li> <li> Snowflake with Redis</li> <li> Snowflake with Consul</li> </ul> </li> <li> Primitives</li> <li> Exception Handling</li> <li> Clock</li> <li> Service Discovery</li> <li> Microsoft Service Discovery (Aspire)</li> <li> Service Discovery Kubernetes</li> <li> Multi Tenant</li> <li> Multi Environment</li> <li> Gray Environment</li> </ul>"},{"location":"en/#referenced-projects","title":"Referenced projects","text":"<ul> <li>AspNetCore</li> <li>EntityFrameworkCore</li> <li>MediatR</li> <li>DotNetCore.CAP</li> <li>KubernetesClient</li> <li>DistributedLock.Redis</li> </ul>"},{"location":"en/#about-collaboration","title":"About collaboration","text":"<p>We have an open mindset and welcome anyone to provide opinions and suggestions, and also welcome anyone to contribute code.</p>"},{"location":"en/#development-and-debugging","title":"Development and debugging","text":"<ol> <li>Install <code>.NET 9.0 SDK</code> or higher.</li> </ol> <p>SDK download address: https://dot.net/download</p> <ol> <li>Have a <code>Docker</code> environment for automated unit testing and integration testing.</li> </ol> <p><code>Docker Desktop</code> download address: https://www.docker.com/products/docker-desktop/</p> <ol> <li> <p>Build the project</p> <pre><code>dotnet build\n</code></pre> </li> <li> <p>Run tests</p> <pre><code>dotnet test\n</code></pre> </li> <li> <p>Other optional dependencies</p> </li> </ol> <p>Install <code>skywalking</code></p> <pre><code>```shell\n# Install oap\ndocker run --name oap -p 11800:11800 -p 12800:12800 --restart always -d apache/skywalking-oap-server:9.0.0\n\n# Install oap-ui\nexport version=9.0.0\ndocker run --name oap-ui -p 8080:8080 -d --link oap -e SW_OAP_ADDRESS=http://oap:12800  apache/skywalking-ui:$version\n```\n</code></pre>"},{"location":"en/#preview-source","title":"Preview source","text":"<pre><code>https://www.myget.org/F/netcorepal/api/v3/index.json\n</code></pre>"},{"location":"en/#focus-points","title":"Focus points","text":"<ul> <li>Beginner-friendly</li> <li>Comprehensive documentation</li> <li>Supporting tutorials</li> <li>Modeling-friendly</li> <li>Direct support for Domain-Driven Design modeling</li> <li>Extension-friendly</li> <li>Modular design</li> <li>Support for module integration or replacement</li> <li>Encourage customization and modification based on source code</li> <li>Deployment-friendly</li> <li>Support Docker</li> <li>Support Helm</li> <li>Testing-friendly</li> <li>Emphasize support for unit testing and integration testing</li> <li>AI-friendly</li> <li>Continuously explore support for AI automated code generation with large language models</li> </ul>"},{"location":"en/#some-principles","title":"Some principles","text":"<p>We do not reinvent the wheel, but rather organically organize excellent infrastructure to achieve our goals through good architectural conventions.</p> <p>We continuously focus on collaboration efficiency. The architectural design of this project will continuously focus on the impact of the architecture on team collaboration and continuously improve.</p> <p>We continuously focus on robustness and the quality of project code.</p>"},{"location":"en/about-ai/","title":"About AI Tools","text":"<p>Based on the code organization adopted in this project, each type such as <code>domain model</code>, <code>command handler</code>, <code>event handler</code>, etc., has clear responsibilities and capabilities. This is very friendly for the auxiliary use of AI tools. AI tools can accurately infer intentions and provide code completion suggestions based on the file model and context of the code you write. As your project code increases, the intelligence of AI tools will become higher.</p> <p>Therefore, it is highly recommended to use AI tools to assist in writing code, as this can greatly improve coding efficiency.</p>"},{"location":"en/about-ai/#some-tips","title":"Some Tips","text":"<p>The following tips can help AI tools better assist you in writing code:</p> <ul> <li>Use type names with business meanings</li> <li>Use method names with clear functional meanings</li> <li>Appropriate comments</li> </ul>"},{"location":"en/about-ai/#recommended-ai-tools","title":"Recommended AI Tools","text":"<p>It is recommended to use GitHub Copilot as a code assistant tool. It supports multiple editors, such as <code>Visual Studio Code</code>, <code>Visual Studio</code>, <code>JetBrains Rider</code>, etc.</p>"},{"location":"en/aspnetcore/exception-handling/","title":"Exception Handling","text":""},{"location":"en/aspnetcore/exception-handling/#knownexception","title":"KnownException","text":"<p>We have defined an exception class <code>KnownException</code> in the package <code>NetCorePal.Extensions.Primitives</code> to represent known exceptions, allowing the system to respond to exceptions in a more user-friendly manner.</p> <p><code>KnownException</code> implements the <code>IKnownException</code> interface, which can carry more information such as <code>Message</code>, <code>ErrorCode</code>, <code>ErrorData</code>, etc. The interface is defined as follows:</p> <pre><code>public interface IKnownException\n{\n    string Message { get; }\n\n    int ErrorCode { get; }\n\n    IEnumerable&lt;object&gt; ErrorData { get; }\n}\n</code></pre>"},{"location":"en/aspnetcore/exception-handling/#exception-handling-middleware-knownexceptionhandlemiddleware","title":"Exception Handling Middleware KnownExceptionHandleMiddleware","text":"<p>We have defined an exception handling middleware <code>KnownExceptionHandleMiddleware</code> in the package <code>NetCorePal.Extensions.AspNetCore</code> to handle exceptions.</p> <p><code>KnownExceptionHandleMiddleware</code> will catch known exceptions and convert the exception information into a <code>ResponseData</code> object, then return it to the client, ensuring that normal responses and exception responses have the same data structure, making it easier for the frontend to handle.</p> <p>If the exception is not a known exception, a default error message will be returned to mask sensitive information and avoid exposing internal system exceptions.</p> <p>Usage example in the <code>Program.cs</code> file:</p> <pre><code>var builder = WebApplication.CreateBuilder(args);\n\n// Add Other Services\n\nvar app = builder.Build();\napp.UseKnownExceptionHandler();\n</code></pre>"},{"location":"en/aspnetcore/exception-handling/#knownexceptionhandlemiddlewareoptions","title":"KnownExceptionHandleMiddlewareOptions","text":"<p>The configuration options for <code>KnownExceptionHandleMiddleware</code> are as follows:</p> <ul> <li><code>KnownExceptionStatusCode</code>: The response status code for known exceptions, default is <code>HttpStatusCode.OK</code> (200);</li> <li><code>UnknownExceptionStatusCode</code>: The response status code for unknown exceptions, default is <code>HttpStatusCode.InternalServerError</code> (500);</li> <li><code>UnknownExceptionMessage</code>: The response message for unknown exceptions, default is <code>\"Unknown Error\"</code>;</li> <li><code>UnknownExceptionCode</code>: The response error code for unknown exceptions, default is <code>99999</code>;</li> </ul> <p>The specific code definition is as follows:</p> <pre><code>public class KnownExceptionHandleMiddlewareOptions\n{\n    public HttpStatusCode KnownExceptionStatusCode { get; set; } = HttpStatusCode.OK;\n    public HttpStatusCode UnknownExceptionStatusCode { get; set; } = HttpStatusCode.InternalServerError;\n    public string UnknownExceptionMessage { get; set; } = \"Unknown Error\";\n    public int UnknownExceptionCode { get; set; } = 99999;\n}\n</code></pre>"},{"location":"en/aspnetcore/exception-handling/#dynamic-exception-handling-configuration","title":"Dynamic Exception Handling Configuration","text":"<p><code>KnownExceptionHandleMiddleware</code> supports dynamic configuration through registering a factory method:</p> <pre><code>Func&lt;HttpContext, KnownExceptionHandleMiddlewareOptions&gt;\n</code></pre> <p>Here is an example where <code>option1</code> is used when the request path starts with <code>/api/internal</code>, otherwise <code>option2</code> is used:</p> <pre><code>var app = builder.Build();\n\nvar option1 = new KnownExceptionHandleMiddlewareOptions {\n    KnownExceptionStatusCode = HttpStatusCode.InternalServerError,\n    UnknownExceptionStatusCode = HttpStatusCode.InternalServerError,\n    UnknownExceptionMessage = \"Unknown Error\",\n    UnknownExceptionCode = 99999\n};\nvar option2 = new KnownExceptionHandleMiddlewareOptions {\n    KnownExceptionStatusCode = HttpStatusCode.OK,\n    UnknownExceptionStatusCode = HttpStatusCode.BadRequest,\n    UnknownExceptionMessage = \"Unknown Error\",\n    UnknownExceptionCode = 10000\n};\n\napp.UseKnownExceptionHandler(httpContext =&gt; {\n    if(httpContext.Request.Path.StartsWithSegments(\"/api/internal\")) {\n        return option1;\n    }\n    else {\n        return option2;\n    }\n});\n</code></pre>"},{"location":"en/aspnetcore/json/","title":"JSON Serialization","text":""},{"location":"en/aspnetcore/json/#introduction","title":"Introduction","text":"<p>The framework has built-in strongly typed IDs such as <code>StronglyTypedId</code>, <code>RowVersion</code>, <code>UpdateTime</code>, etc., to assist modeling. To better support the serialization of these types in JSON, the framework provides <code>JsonConverter</code> to support the serialization of these types.</p> <p>It supports both <code>Newtonsoft.Json</code> and <code>System.Text.Json</code> JSON serialization libraries.</p>"},{"location":"en/aspnetcore/json/#how-to-use","title":"How to Use","text":""},{"location":"en/aspnetcore/json/#systemtextjson","title":"System.Text.Json","text":"<p>Add the following code in <code>Program.cs</code>:</p> <pre><code>builder.Services.AddMvc()\n  .AddNetCorePalSystemTextJson();\n</code></pre>"},{"location":"en/aspnetcore/json/#newtonsoftjson","title":"Newtonsoft.Json","text":"<p>Add the following code in <code>Program.cs</code>:</p> <pre><code>builder.Services.AddMvc()\n  .AddNetCorePalNewtonsoftJson();\n</code></pre> <p>Note: Support for <code>Newtonsoft.Json</code> requires referencing the <code>NetCorePal.Extensions.NewtonsoftJson</code> package.</p>"},{"location":"en/aspnetcore/json/#other-scenarios","title":"Other Scenarios","text":"<p>If you need to use it in other scenarios, you can directly use the <code>AddNetCorePalJsonConverters</code> extension method to add <code>EntityIdJsonConverterFactory</code>, <code>RowVersionJsonConverter</code>, <code>UpdateTimeJsonConverter</code>, and other converters.</p>"},{"location":"en/aspnetcore/json/#systemtextjson_1","title":"System.Text.Json","text":"<pre><code>using System.Text.Json;\n\nvar options = new JsonSerializerOptions();\noptions.AddNetCorePalJsonConverters();\n</code></pre>"},{"location":"en/aspnetcore/json/#newtonsoftjson_1","title":"Newtonsoft.Json","text":"<pre><code>using Newtonsoft.Json;\n\nvar settings = new JsonSerializerSettings();\nsettings.AddNetCorePalJsonConverters();\n</code></pre>"},{"location":"en/aspnetcore/jwt/","title":"Jwt Authentication","text":""},{"location":"en/aspnetcore/jwt/#introduction","title":"Introduction","text":"<p>To facilitate user usage, we provide the functionality to manage Jwt keys, which can automatically generate keys and inject them into <code>JwtBearerOptions</code>. We offer various key storage methods such as <code>InMemoryJwtSettingStore</code>, <code>FileJwtSettingStore</code>, <code>RedisJwtSettingStore</code>, and <code>DbContextJwtSettingStore</code>, allowing users to choose the appropriate method based on their needs.</p>"},{"location":"en/aspnetcore/jwt/#how-to-use","title":"How to Use","text":"<p>Add package references:</p> <pre><code># InMemory storage, File storage\ndotnet add package NetCorePal.Extensions.Jwt   \n\n# Redis storage\ndotnet add package NetCorePal.Extensions.Jwt.StackExchangeRedis\n\n# EntityFrameworkCore storage\ndotnet add package NetCorePal.Extensions.Jwt.EntityFrameworkCore\n</code></pre> <p>Add the following configuration in your startup code (a minimal JWT setup):</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\n\n// Configure JWT authentication (validation parameters will be updated dynamically by the background service)\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\n// Register NetCorePal Jwt and choose a key store (example: in-memory)\nbuilder.Services.AddNetCorePalJwt()\n    .AddInMemoryStore();\n</code></pre> <p>If you need file storage for keys:</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\n\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\nbuilder.Services.AddNetCorePalJwt()\n    .AddFileStore(\"jwtsetting-filename.json\"); // Use file storage for keys\n</code></pre> <p>Use Redis for key storage:</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing StackExchange.Redis;\n\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\n// Add Redis connection\nbuilder.Services.AddSingleton&lt;IConnectionMultiplexer&gt;(\n    _ =&gt; ConnectionMultiplexer.Connect(builder.Configuration.GetConnectionString(\"Redis\")!));\n\nbuilder.Services.AddNetCorePalJwt()\n    .AddRedisStore(); // Use Redis for key storage\n</code></pre> <p>To use EntityFrameworkCore for key storage, add the <code>JwtSetting</code> entity to your <code>MyDbContext</code>:</p> <pre><code>public class MyDbContext : DbContext, IJwtSettingDbContext\n{\n    public MyDbContext(DbContextOptions&lt;MyDbContext&gt; options) : base(options)\n    {\n    }\n\n    public DbSet&lt;JwtSetting&gt; JwtSettings =&gt; Set&lt;JwtSetting&gt;();\n}\n</code></pre> <p>Configure authentication and storage:</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\n\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\nbuilder.Services.AddDbContext&lt;MyDbContext&gt;(options =&gt;\n{\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\"));\n});\n\nbuilder.Services.AddNetCorePalJwt()\n    .AddEntityFrameworkCoreStore&lt;MyDbContext&gt;(); // Use EntityFrameworkCore for key storage\n</code></pre>"},{"location":"en/aspnetcore/jwt/#key-rotation","title":"Key Rotation","text":"<p>Key rotation (<code>JwtKeyRotationService</code>) is registered automatically when you call <code>AddNetCorePalJwt()</code> and is executed periodically by the background service (<code>JwtHostedService</code>).</p> <p>To enable and customize rotation, configure <code>JwtOptions</code> via <code>AddNetCorePalJwt</code>:</p> <pre><code>builder.Services.AddNetCorePalJwt(options =&gt;\n{\n    options.AutomaticRotationEnabled = true;                  // Enable automatic rotation\n    options.KeyLifetime = TimeSpan.FromDays(30);              // Key validity (applies only when AutomaticRotationEnabled = true)\n    options.RotationCheckInterval = TimeSpan.FromHours(1);    // Rotation check interval\n    options.ExpiredKeyRetentionPeriod = TimeSpan.FromDays(30);// Keep expired keys to validate existing tokens\n    options.MaxActiveKeys = 2;                                // Maximum number of active keys to keep\n})\n.AddInMemoryStore();\n</code></pre> <p>Note: When <code>AutomaticRotationEnabled</code> is false, newly generated keys are assigned a very long lifetime (100 years) and <code>KeyLifetime</code> is ignored.</p> <p>Note: For single-instance scenarios, <code>AddNetCorePalJwt()</code> defaults to an in-memory lock for synchronization. For multi-instance/distributed deployments, configure a distributed lock (e.g., Redis) to avoid concurrent rotation conflicts:</p> <pre><code>// Requires NetCorePal.Extensions.DistributedLocks.Redis package\n// and a registered IConnectionMultiplexer\nbuilder.Services.AddRedisLocks(); // or AddRedisLocks(connectionMultiplexer)\n</code></pre>"},{"location":"en/aspnetcore/jwt/#data-protection","title":"Data Protection","text":"<p>Use ASP.NET Core DataProtection to protect stored JWT keys:</p> <pre><code>builder.Services.AddNetCorePalJwt()\n    .UseDataProtection() // Enable encrypted key storage (call BEFORE selecting a store)\n    .AddFileStore(\"jwtsetting-filename.json\");\n</code></pre> <p>Important: Call <code>UseDataProtection</code> before selecting a store (e.g., <code>AddInMemoryStore</code>, <code>AddFileStore</code>, <code>AddRedisStore</code>, <code>AddEntityFrameworkCoreStore</code>). The DataProtection wrapper decorates the next <code>IJwtSettingStore</code> registration; if called after a store is already registered, encryption will not be applied to that store.</p> <p>DataProtection automatically encrypts stored private key data, ensuring security of keys in files, databases, or Redis.</p>"},{"location":"en/aspnetcore/jwt/#generate-jwttoken","title":"Generate JwtToken","text":"<p>In an endpoint, you can use the <code>IJwtProvider</code> interface to generate a JwtToken:</p> <pre><code>public class JwtLoginEndpoint : Endpoint&lt;JwtLoginRequest, ResponseData&lt;string&gt;&gt;\n{\n    public override void Configure()\n    {\n        Post(\"/jwtlogin\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(JwtLoginRequest req, CancellationToken ct)\n    {\n        var provider = Resolve&lt;IJwtProvider&gt;();\n        var claims = new[]\n        {\n            new Claim(\"uid\", \"111\"),\n            new Claim(\"type\", \"client\"),\n            new Claim(\"email\", \"abc@efg.com\"),\n        };\n        var jwt = await provider.GenerateJwtToken(new JwtData(\"issuer-x\", \"audience-y\",\n            claims,\n            DateTime.Now,\n            DateTime.Now.AddMinutes(1)));\n        await SendAsync(jwt.AsResponseData(), cancellation: ct);\n    }\n}\n\npublic record JwtLoginRequest(string Name);\n</code></pre>"},{"location":"en/aspnetcore/response-data/","title":"WebAPI Data Response","text":"<p>To allow the client to better handle response data, we need to encapsulate the data and use a consistent data format so that the client can handle it uniformly based on the data format.</p>"},{"location":"en/aspnetcore/response-data/#responsedata-responsedata-classes","title":"ResponseData, ResponseData Classes <p>We define two classes in the package <code>NetCorePal.Extensions.AspNetCore</code> to encapsulate response data, namely <code>ResponseData</code> and <code>ResponseData&lt;T&gt;</code>.</p> <p>The <code>ResponseData</code> class is used to encapsulate responses without data, and the <code>ResponseData&lt;T&gt;</code> class is used to encapsulate responses with data.</p> <p>The type definitions are as follows:</p> <pre><code>public class ResponseData\n{\n    public ResponseData(bool success = true, string message = \"\", int code = 0, IEnumerable&lt;object&gt;? errorData = null)\n    {\n        Success = success;\n        Message = message;\n        Code = code;\n        ErrorData = errorData ?? KnownException.EmptyErrorData;\n    }\n\n    public bool Success { get; protected set; }\n    public string Message { get; protected set; }\n    public int Code { get; protected set; }\n\n    public IEnumerable&lt;object&gt; ErrorData { get; protected set; }\n}\n\npublic class ResponseData&lt;T&gt; : ResponseData\n{\n    public ResponseData(T data, bool success = true, string message = \"\", int code = 0, IEnumerable&lt;object&gt;? errorData = null) : base(success: success, message: message, code: code, errorData: errorData)\n    {\n        this.Data = data;\n    }\n    public T Data { get; protected set; }\n}\n</code></pre>","text":""},{"location":"en/aspnetcore/response-data/#asresponsedata-extension-method","title":"AsResponseData Extension Method <p>We also define an extension method <code>AsResponseData</code> to convert data into <code>ResponseData</code> or <code>ResponseData&lt;T&gt;</code> objects.</p> <pre><code>using NetCorePal.Extensions.AspNetCore;\n\nvar data = new MyData();\nvar responseData = data.AsResponseData();\n</code></pre>","text":""},{"location":"en/aspnetcore/response-data/#usage-example","title":"Usage Example <p>In the endpoint, we can use <code>ResponseData</code> and <code>ResponseData&lt;T&gt;</code> to encapsulate response data.</p> <pre><code>public class GetWeatherEndpoint : EndpointWithoutRequest&lt;ResponseData&lt;IEnumerable&lt;WeatherForecast&gt;&gt;&gt;\n{\n    public override void Configure()\n    {\n        Get(\"/weather\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        var rng = new Random();\n        var result = await Task.FromResult(Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast\n        {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = rng.Next(-20, 55),\n            Summary = Summaries[rng.Next(Summaries.Length)]\n        }));\n\n        await SendAsync(result.AsResponseData(), cancellation: ct);\n    }\n}\n</code></pre>","text":""},{"location":"en/aspnetcore/time-zone/","title":"Time Zone Handling","text":"<p>To ensure the system runs correctly in different time zones, time zone handling needs to be considered. Here are some principles to ensure the correctness of time zone handling.</p> <ul> <li>Use <code>DateTimeOffset</code> instead of <code>DateTime</code> to avoid issues with inconsistent application time zone environments;</li> <li>Use <code>DateTimeOffset.UtcNow</code> instead of <code>DateTime.Now</code>;</li> <li>Store UTC time in the database. For MySQL databases, <code>DateTimeOffset</code> will be automatically converted to UTC time for storage;</li> <li>Do not rely on the database to generate time. All time generation should be handled by the application to avoid issues with inconsistent database server time zones;</li> </ul>"},{"location":"en/code-analysis/code-analysis-tools/","title":"Code Analysis Tools","text":"<p>NetCorePal.Extensions.CodeAnalysis.Tools is a command-line tool based on the NetCorePal code analysis framework, used to generate architecture visualization HTML files from .NET assemblies.</p>"},{"location":"en/code-analysis/code-analysis-tools/#important-notice","title":"\u26a0\ufe0f Important Notice","text":"<p>Prerequisites for the tool to work: The target project/assembly to be analyzed must reference the <code>NetCorePal.Extensions.CodeAnalysis</code> package. This package contains source generators that automatically generate metadata required for code analysis during compilation.</p> <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.CodeAnalysis\" Version=\"2.8.3\" /&gt;\n</code></pre> <p>Assemblies without this package reference will not be able to generate analysis results.</p>"},{"location":"en/code-analysis/code-analysis-tools/#installation","title":"Installation","text":"<p>Install as a global dotnet tool:</p> <pre><code>dotnet tool install -g NetCorePal.Extensions.CodeAnalysis.Tools\n</code></pre> <p>Or install locally in a project:</p> <pre><code>dotnet tool install NetCorePal.Extensions.CodeAnalysis.Tools\n</code></pre>"},{"location":"en/code-analysis/code-analysis-tools/#usage","title":"Usage","text":""},{"location":"en/code-analysis/code-analysis-tools/#smart-discovery","title":"Smart Discovery","text":"<p>The tool supports automatic discovery of solutions, projects, or assemblies in the current directory:</p> <pre><code># Auto-discover and analyze all content in the current directory\nnetcorepal-codeanalysis generate\n\n# Specify solution file\nnetcorepal-codeanalysis generate --solution MySolution.sln\n\n# Specify project file  \nnetcorepal-codeanalysis generate --project MyProject.csproj\n\n# Specify assembly file\nnetcorepal-codeanalysis generate --assembly MyApp.dll\n</code></pre>"},{"location":"en/code-analysis/code-analysis-tools/#command-line-options","title":"Command Line Options","text":""},{"location":"en/code-analysis/code-analysis-tools/#generate-command","title":"<code>generate</code> Command","text":"<p>Input Source Options (by priority):</p> <ul> <li><code>--assembly, -a</code>: Specify assembly files (.dll). Can be specified multiple times</li> <li><code>--project, -p</code>: Specify project files (.csproj). Can be specified multiple times  </li> <li><code>--solution, -s</code>: Specify solution files (.sln). Can be specified multiple times</li> </ul> <p>Build Options:</p> <ul> <li><code>--configuration, -c</code>: Build configuration (Debug/Release). Default: Debug</li> </ul> <p>Output Options:</p> <ul> <li><code>--output, -o</code>: Output HTML file path. Default: code-analysis.html</li> <li><code>--title, -t</code>: HTML page title. Default: Architecture Visualization</li> <li><code>--verbose, -v</code>: Enable verbose output for debugging</li> </ul>"},{"location":"en/code-analysis/code-analysis-tools/#usage-examples","title":"Usage Examples","text":"<ol> <li>Auto-discovery analysis:</li> </ol> <pre><code># Enter project directory\ncd MyApp\n\n# Auto-discover solutions/projects/assemblies in current directory\nnetcorepal-codeanalysis generate\n\n# Auto-discover and specify output file\nnetcorepal-codeanalysis generate -o my-architecture.html\n</code></pre> <ol> <li>Analyze specific solution:</li> </ol> <pre><code>cd MyApp\nnetcorepal-codeanalysis generate \\\n    --solution MyApp.sln \\\n    --configuration Release \\\n    --output architecture.html \\\n    --title \"My Application Architecture\"\n</code></pre> <ol> <li>Analyze multiple projects:</li> </ol> <pre><code>cd MyApp\nnetcorepal-codeanalysis generate \\\n    -p MyApp/MyApp.csproj \\\n    -p MyApp.Domain/MyApp.Domain.csproj \\\n    -c Release \\\n    -o docs/architecture.html\n</code></pre> <ol> <li>Direct assembly analysis:</li> </ol> <pre><code>cd MyApp\nnetcorepal-codeanalysis generate \\\n    -a bin/Debug/net8.0/MyApp.dll \\\n    -a bin/Debug/net8.0/MyApp.Domain.dll \\\n    --verbose\n</code></pre>"},{"location":"en/code-analysis/code-analysis-tools/#auto-discovery-mechanism","title":"Auto-Discovery Mechanism","text":"<p>The tool automatically discovers project content with the following priority:</p> <ol> <li>Solution files: Search for <code>*.sln</code> files</li> <li>Project files: Search for <code>*.csproj</code> files  </li> <li>Assembly files: Search for <code>*.dll</code> files in <code>bin/</code> directories</li> </ol> <p>Discovery rules:</p> <ul> <li>Recursively search in current directory and subdirectories</li> <li>Solutions take priority over projects, projects over assemblies</li> <li>Automatically exclude test projects (containing \"Test\", \"Tests\")</li> <li>Automatically build projects and load generated assemblies</li> </ul>"},{"location":"en/code-analysis/code-analysis-tools/#system-requirements","title":"System Requirements","text":"<ul> <li>.NET 8.0 or higher</li> <li>Assemblies must contain code analysis results generated by <code>NetCorePal.Extensions.CodeAnalysis</code> source generators</li> </ul>"},{"location":"en/code-analysis/code-analysis-tools/#output-content","title":"Output Content","text":"<p>The tool generates interactive HTML files containing:</p> <ul> <li>Statistics Information: Quantity statistics and distribution of various component types</li> <li>Architecture Overview Diagram: Complete view of all types and their relationships in the system</li> <li>Processing Flow Chart Collection: Flow charts for each independent business chain (such as command processing chains)</li> <li>Aggregate Relation Diagram Collection: Relationship diagrams for each aggregate root</li> <li>Interactive Navigation: Left sidebar tree menu supporting chart type switching</li> <li>Mermaid Live Integration: \"View in Mermaid Live\" button in the upper right corner of each chart</li> </ul>"},{"location":"en/code-analysis/code-analysis-tools/#build-process-integration","title":"Build Process Integration","text":""},{"location":"en/code-analysis/code-analysis-tools/#msbuild-integration","title":"MSBuild Integration","text":"<p>Add to <code>.csproj</code> file:</p> <pre><code>&lt;Target Name=\"GenerateArchitectureVisualization\" AfterTargets=\"Build\" Condition=\"'$(Configuration)' == 'Debug'\"&gt;\n  &lt;Exec Command=\"netcorepal-codeanalysis generate -a $(OutputPath)$(AssemblyName).dll -o $(OutputPath)architecture.html\" \n        ContinueOnError=\"true\" /&gt;\n&lt;/Target&gt;\n</code></pre>"},{"location":"en/code-analysis/code-analysis-tools/#github-actions","title":"GitHub Actions","text":"<p>Add to workflow:</p> <pre><code>- name: Generate Architecture Visualization\n  run: |\n    dotnet tool install -g NetCorePal.Extensions.CodeAnalysis.Tools\n    cd MyApp\n    netcorepal-codeanalysis generate \\\n      --output docs/architecture.html \\\n      --title \"MyApp Architecture\"\n</code></pre>"},{"location":"en/code-analysis/code-analysis-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/code-analysis/code-analysis-tools/#common-issues","title":"Common Issues","text":"<ol> <li>Assembly not found: Ensure assembly files exist and are accessible</li> <li>No analysis results: Ensure assemblies are built with <code>NetCorePal.Extensions.CodeAnalysis</code> package reference</li> <li>Permission errors: Check write permissions for output directory</li> <li>Build failures: Ensure projects can build normally, check dependencies</li> </ol>"},{"location":"en/code-analysis/code-analysis-tools/#verbose-output","title":"Verbose Output","text":"<p>Use the <code>--verbose</code> flag to get detailed information about the analysis process:</p> <pre><code>netcorepal-codeanalysis generate --verbose\n</code></pre> <p>This will display:</p> <ul> <li>Discovered files and projects</li> <li>Build process information</li> <li>Loaded assemblies</li> <li>Analysis statistics</li> <li>File generation details</li> <li>Error details when issues occur</li> </ul>"},{"location":"en/code-analysis/code-analysis-tools/#related-packages","title":"Related Packages","text":"<ul> <li><code>NetCorePal.Extensions.CodeAnalysis</code>: Core analysis framework</li> <li>Source Generators: Used for automatic analysis</li> </ul>"},{"location":"en/code-analysis/code-flow-analysis/","title":"Code Flow Analysis","text":""},{"location":"en/code-analysis/code-flow-analysis/#overview","title":"Overview","text":"<p><code>NetCorePal.Extensions.CodeAnalysis</code> automatically analyzes your code structure via source generators, helping you understand the relationships and data flow between components in DDD architecture, and supports multiple visualization methods.</p>"},{"location":"en/code-analysis/code-flow-analysis/#features","title":"Features","text":"<ul> <li>Automatically identifies command senders, aggregate roots, commands, events, handlers, and other types</li> <li>Automatically establishes relationships between methods, commands, aggregates, events, handlers, etc.</li> <li>Supports automatic generation of various Mermaid diagrams:</li> <li>Architecture Overview Diagram: Complete view of all types and their relationships in the system</li> <li>Processing Flow Chart Collection: Flow charts for each independent business chain</li> <li>Aggregate Relation Diagram Collection: Relationship diagrams for each aggregate root</li> <li>One-click generation of interactive HTML architecture visualization pages</li> </ul>"},{"location":"en/code-analysis/code-flow-analysis/#usage","title":"Usage","text":""},{"location":"en/code-analysis/code-flow-analysis/#1-install-the-package","title":"1. Install the Package","text":"<p>Add the following to the project you want to analyze:</p> <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.CodeAnalysis\" /&gt;\n</code></pre>"},{"location":"en/code-analysis/code-flow-analysis/#2-enable-source-generator","title":"2. Enable Source Generator","text":"<p>Simply reference the <code>NetCorePal.Extensions.CodeAnalysis</code> package; no manual configuration is required.</p> <p>The built-in SourceGenerator will automatically scan your project code at compile time, analyze controllers, commands, aggregate roots, events, handlers, and their relationships, and automatically generate a data file containing the analysis results.</p> <p>This file contains all the analysis result data structures for runtime aggregation and visualization.</p> <p>The entire process is fully automated, with no extra steps required, and supports multi-project and cross-assembly analysis.</p>"},{"location":"en/code-analysis/code-flow-analysis/#3-obtain-analysis-results","title":"3. Obtain Analysis Results","text":"<pre><code>using NetCorePal.Extensions.CodeAnalysis;\nvar result = CodeFlowAnalysisHelper.GetResultFromAssemblies(AppDomain.CurrentDomain.GetAssemblies());\n</code></pre> <p>// It is recommended to aggregate all assemblies in the current application domain in ASP.NET Core projects to ensure complete analysis results.</p>"},{"location":"en/code-analysis/code-flow-analysis/#mermaid-visualization-support","title":"Mermaid Visualization Support","text":"<p>The framework provides three built-in Mermaid Visualizers:</p> <ol> <li>ArchitectureOverviewMermaidVisualizer    Generates a complete architecture diagram of all types and their relationships in the system.</li> </ol> <pre><code>var mermaid = ArchitectureOverviewMermaidVisualizer.GenerateMermaid(result);\n</code></pre> <ol> <li>ProcessingFlowMermaidVisualizer (Processing Flow Diagram)    Generates a collection of flow diagrams for all independent business processing chains (one diagram per chain), showing the actual invocation relationships of commands, events, aggregates, etc. in business flows.</li> </ol> <pre><code>var chains = ProcessingFlowMermaidVisualizer.GenerateMermaid(result);\nforeach (var (name, diagram) in chains)\n{\n    Console.WriteLine($\"{name}:\\n{diagram}\");\n}\n</code></pre> <ol> <li>AggregateRelationMermaidVisualizer    Generates a collection of relationship diagrams for all aggregate roots (one diagram per aggregate root).</li> </ol> <pre><code>var aggregates = AggregateRelationMermaidVisualizer.GenerateAllAggregateMermaid(result);\nforeach (var (aggName, diagram) in aggregates)\n{\n    Console.WriteLine($\"{aggName}:\\n{diagram}\");\n}\n</code></pre>"},{"location":"en/code-analysis/code-flow-analysis/#interactive-html-visualization","title":"Interactive HTML Visualization","text":"<p>Use <code>VisualizationHtmlBuilder</code> to generate a complete interactive HTML architecture page with all diagrams and navigation in one click:</p> <pre><code>var html = VisualizationHtmlBuilder.GenerateVisualizationHtml(result, \"My Architecture Visualization\");\nFile.WriteAllText(\"architecture-visualization.html\", html);\n</code></pre> <ul> <li>Supports sidebar navigation, diagram switching, and one-click jump to Mermaid Live Editor</li> <li>Includes all chains, aggregates, architecture overview diagrams, etc.</li> </ul>"},{"location":"en/code-analysis/code-flow-analysis/#aspnet-core-middleware-integration","title":"ASP.NET Core Middleware Integration","text":"<p>Integrate the online architecture analysis diagram in development environment with just one line of code:</p> <pre><code>if (app.Environment.IsDevelopment())\n{\n    app.MapGet(\"/diagnostics/code-analysis\", () =&gt;\n        VisualizationHtmlBuilder.GenerateVisualizationHtml(\n            AnalysisResultAggregator.Aggregate(new[] { Assembly.GetExecutingAssembly() })\n        )\n    );\n}\n</code></pre>"},{"location":"en/code-analysis/code-flow-analysis/#online-preview-of-mermaid-diagrams","title":"Online Preview of Mermaid Diagrams","text":"<p>All Mermaid code can be pasted into Mermaid Live Editor for real-time preview and editing. The HTML page includes a one-click jump button.</p>"},{"location":"en/concurrency/command-lock/","title":"Command Lock","text":"<p>As the name suggests, command lock is used to solve the problem of concurrent execution of commands. In some scenarios, we need to ensure that a command can only be executed by one instance at the same time. At this time, we can use command lock. Essentially, command lock is a kind of distributed lock, and there are many ways to implement it. By default, we provide a command lock implemented based on Redis.</p>"},{"location":"en/concurrency/command-lock/#register-command-lock","title":"Register Command Lock","text":"<p>Register <code>CommandLocks</code> in <code>Program.cs</code>: <pre><code>builder.Services.AddMediatR(cfg =&gt;\n        cfg.RegisterServicesFromAssemblies(Assembly.GetExecutingAssembly())\n            .AddCommandLockBehavior()  // Register command lock behavior\n            .AddKnownExceptionValidationBehavior()\n            .AddUnitOfWorkBehaviors());\n\nbuilder.Services.AddCommandLocks(typeof(Program).Assembly); // Register all command lock types\n</code></pre></p> <p>Note: Command lock should be executed before the transaction starts, so it needs to be added before <code>AddKnownExceptionValidationBehavior</code>.</p>"},{"location":"en/concurrency/command-lock/#use-command-lock","title":"Use Command Lock","text":"<p>Define a command lock and implement the <code>ICommandLock&lt;TCommand&gt;</code> interface, where <code>TCommand</code> is the command type, for example:</p> <pre><code>public record PayOrderCommand(OrderId Id) : ICommand&lt;OrderId&gt;;\n\npublic class PayOrderCommandLock : ICommandLock&lt;PayOrderCommand&gt;\n{\n    public Task&lt;CommandLockSettings&gt; GetLockKeysAsync(PayOrderCommand command,\n        CancellationToken cancellationToken = default)\n    {\n        return Task.FromResult(command.Id.ToCommandLockSettings());\n    }\n}\n</code></pre> <p>Where <code>command.Id.ToCommandLockSettings()</code> converts <code>OrderId</code> to <code>CommandLockSettings</code>. <code>CommandLockSettings</code> is the configuration of the command lock, including the key of the lock and the expiration time that can be waited before acquiring the lock.</p> <p>In design, command lock and command have a one-to-one relationship. It is recommended to place the command lock, command, and command handler in the same class file for easy maintenance.</p>"},{"location":"en/concurrency/command-lock/#multi-key-command-lock","title":"Multi-key Command Lock","text":"<p>Command lock supports the multi-key mechanism, that is, a command can correspond to multiple keys, for example:</p> <pre><code>public class PayOrderCommandLock : ICommandLock&lt;PayOrderCommand&gt;\n{\n    public Task&lt;CommandLockSettings&gt; GetLockKeysAsync(PayOrderCommand command,\n        CancellationToken cancellationToken = default)\n    {\n        var ids = new List&lt;OrderId&gt; { new OrderId(1), new OrderId(2) };\n        return Task.FromResult(ids.ToCommandLockSettings());\n    }\n}\n</code></pre> <p>In this example, <code>PayOrderCommand</code> corresponds to two keys, <code>OrderId(1)</code> and <code>OrderId(2)</code>.</p> <p>When multiple keys need to be locked, CommandLockSettings will sort the multiple keys and then lock them one by one. If one of the keys fails to lock, the already locked keys will be released.</p>"},{"location":"en/concurrency/command-lock/#reentrant-mechanism","title":"Reentrant Mechanism","text":"<p>Command lock implements a reentrant mechanism, that is, in the same request context, the same key can be repeatedly acquired without causing a deadlock. For example, after the command in the above example is executed, the command lock with the same key will not deadlock in the subsequent event processing process.</p>"},{"location":"en/concurrency/redis-lock/","title":"Pessimistic Lock - Redis Lock","text":""},{"location":"en/concurrency/redis-lock/#what-is-redis-lock","title":"What is Redis Lock?","text":"<p><code>Redis Lock</code> is a mechanism used to solve concurrency issues, implemented based on Redis's <code>pessimistic lock</code>. In a concurrent environment, multiple users may change the same resource simultaneously. If not restricted, operations between different users may overwrite each other, leading to data inconsistency. <code>Redis Lock</code> is designed to solve this problem.</p>"},{"location":"en/concurrency/redis-lock/#implementation-principle-of-redis-lock","title":"Implementation Principle of Redis Lock","text":"<p>The implementation principle of <code>Redis Lock</code> is to set a unique key in Redis to represent the lock. When a thread acquires the lock, other threads cannot acquire the lock until the thread releases the lock. The specific steps are as follows: 1. Thread A tries to acquire the lock by setting a unique key in Redis. If successful, it acquires the lock. 2. After thread A completes the operation, it deletes the unique key to release the lock. 3. Thread B tries to acquire the lock. If the unique key does not exist in Redis, it acquires the lock; otherwise, it waits or retries.</p>"},{"location":"en/concurrency/redis-lock/#usage-scenarios-of-redis-lock","title":"Usage Scenarios of Redis Lock","text":"<p><code>Redis Lock</code> is mainly used to solve high concurrency issues. For example, in an order system, when multiple users place orders simultaneously, it may lead to overselling. At this time, <code>Redis Lock</code> can be used to ensure that the operation of deducting inventory is executed by only one thread at a time, ensuring data consistency.</p>"},{"location":"en/concurrency/redis-lock/#register-redis-lock","title":"Register Redis Lock","text":"<p>Register <code>IDistributedLock</code> in <code>Program.cs</code>: <pre><code>using NetCorePal.Extensions.DistributedLocks;\nusing NetCorePal.Extensions.DistributedLocks.Redis;\nusing StackExchange.Redis;\n\nvar redis = ConnectionMultiplexer.Connect(builder.Configuration.GetConnectionString(\"Redis\")!);\nbuilder.Services.AddSingleton&lt;IConnectionMultiplexer&gt;(p =&gt; redis);\nbuilder.Services.AddRedisLocks();\n</code></pre></p>"},{"location":"en/concurrency/redis-lock/#use-redis-lock","title":"Use Redis Lock","text":"<p>Inject <code>IDistributedLock</code> where the lock is needed: <pre><code>using NetCorePal.Extensions.DistributedLocks;\nnamespace DistributedLocksSample\n{\n    public class RedisLockSample\n    {\n        private readonly IDistributedLock _lock;\n        public RedisLockSample(IDistributedLock @lock)\n        {\n            _lock = @lock;\n        }\n\n        public async Task LockSample()\n        {\n            using (var l = await _lock.Acquire(\"lock-key\", TimeSpan.FromSeconds(10)))\n            {\n                // do something\n            }\n        }\n\n        public async Task TryLockSample()\n        {\n            var lockerHandler = await _lock.TryAcquire(\"lock-key\", TimeSpan.FromSeconds(10)))\n            if (lockerHandler != null)\n            {\n                using (lockerHandler)\n                {\n                    // do something\n                }\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"en/concurrency/row-version/","title":"RowVersion","text":""},{"location":"en/concurrency/row-version/#what-is-rowversion","title":"What is RowVersion?","text":"<p><code>RowVersion</code> is a mechanism used to solve concurrency issues, an implementation of optimistic locking based on relational database features. In a concurrent environment, multiple users may change the same row of data simultaneously. If not restricted, operations between different users may overwrite each other, leading to data inconsistency. <code>RowVersion</code> is designed to solve this problem.</p>"},{"location":"en/concurrency/row-version/#implementation-principle-of-rowversion","title":"Implementation Principle of RowVersion","text":"<p>The implementation principle of <code>RowVersion</code> is to add a version number field to each row of data. Each time an update operation is performed on this row of data, the version number is incremented by 1. At the beginning of the transaction, the transaction reads the current version number of the row. When executing <code>update</code>, it updates the <code>RowVersion</code> and adds a condition like <code>row_version=@oldversion</code> in the <code>where</code> clause. Before committing the transaction, it checks whether the number of affected rows is as expected. If it is, the transaction is committed; otherwise, the transaction is rolled back.</p>"},{"location":"en/concurrency/row-version/#usage-scenarios-of-rowversion","title":"Usage Scenarios of RowVersion","text":"<p><code>RowVersion</code> is mainly used to solve concurrency issues. For example, in an order system, when multiple users operate on the same order simultaneously, it may lead to inconsistent order status. By using row version numbers, such problems can be avoided.</p>"},{"location":"en/concurrency/row-version/#define-row-version-number","title":"Define Row Version Number","text":"<p>In the domain model, define a <code>public</code> readable property of type <code>NetCorePal.Extensions.Domain.RowVersion</code> to implement the row version number function. The framework will automatically handle the logic of updating the row version number and concurrency checks.</p> <p>Here is an example:</p> <pre><code>// Define row version number\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n// Define strongly typed ID for the model\npublic partial record OrderId : IInt64StronglyTypedId;\n\n// Domain model\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    protected Order() { }\n    public string OrderNo { get; private set; } = string.Empty;\n    public bool Paid { get; private set; }\n    // Define row version number\n    public RowVersion Version { get; private set; } = new RowVersion();\n\n    public void SetPaid()\n    {\n        Paid = true;\n    }\n}\n</code></pre>"},{"location":"en/concurrency/row-version/#scenarios-where-rowversion-is-not-suitable","title":"Scenarios Where RowVersion is Not Suitable","text":"<p><code>RowVersion</code> is suitable for scenarios with low concurrency. If the concurrency is high, it may lead to a large number of row version number conflicts, affecting user experience. In such cases, consider using <code>pessimistic locking</code> to solve concurrency issues.</p>"},{"location":"en/context/context/","title":"Context Transmission System","text":""},{"location":"en/context/context/#what-is-the-context-transmission-system","title":"What is the Context Transmission System","text":"<p>The context transmission system is a system used to transmit context, allowing the context to be transmitted throughout the lifecycle of a request, so that we can access the context anywhere within the lifecycle of a request.</p>"},{"location":"en/context/context/#how-to-inject-context","title":"How to Inject Context","text":"<p>In <code>Program.cs</code>, we can inject the context with the following code:</p> <ol> <li> <p>Inject context</p> <pre><code>builder.Services.AddContext()  // Add context\n    .AddEnvContext()    // Add environment support\n    .AddTenantContext() // Add tenant support\n    .AddCapContextProcessor(); // Add support for context transmission in CAP to ensure that the integrated event processor can correctly identify the context\n</code></pre> </li> <li> <p>Add context middleware</p> <pre><code>var app = builder.Build();\n\napp.UseContext();\n</code></pre> </li> </ol>"},{"location":"en/context/context/#how-to-use-context","title":"How to Use Context","text":"<p>We can use the context anywhere, such as in an Endpoint:</p> <pre><code>public class HomeEndpoint : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"/home\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        // Get context\n        var contextAccessor = Resolve&lt;IContextAccessor&gt;();\n        var tenantContext = contextAccessor.GetContext&lt;TenantContext&gt;();\n\n        // Set context\n        var tenantContext2 = new TenantContext(\"112233\");\n        contextAccessor.SetContext(tenantContext2);\n\n        await SendOkAsync(ct);\n    }\n}\n</code></pre> <p>Note: You can set the context in one service and then get the context in another service. The context is transmitted within the lifecycle of a request and can be transmitted across services.</p>"},{"location":"en/context/context/#default-provided-context-types","title":"Default Provided Context Types","text":"<p>The package <code>NetCorePal.Context.Shared</code> provides some default context types, such as:</p> <ol> <li> <p>Tenant Context</p> <p>Type: <code>NetCorePal.Context.TenantContext</code>, used to transmit the tenant information of the current request to support the implementation of a multi-tenant system.</p> </li> <li> <p>Environment Context</p> <p>Type: <code>NetCorePal.Context.EnvContext</code>, used to transmit the grayscale environment information of the current request to support the implementation of grayscale release.</p> </li> </ol>"},{"location":"en/context/context/#supported-transmission-scenarios","title":"Supported Transmission Scenarios","text":"<p>By default, the context transmission system supports the following scenarios:</p> <ol> <li> <p>Support for transmitting context in HTTP requests</p> <p>Supports automatically transmitting context information when the HttpClient object initiates a request, and automatically parsing context information when aspnetcore receives a request.</p> </li> <li> <p>Support for transmitting context in CAP</p> <p>Supports automatically carrying context information when sending events in CAP, and automatically parsing context information when receiving events in CAP.</p> </li> </ol>"},{"location":"en/context/custom-context-type/","title":"Custom Context Type","text":"<p>When the built-in context types do not meet the requirements, you can refer to the implementation of EnvContext to implement your own context type.</p>"},{"location":"en/context/custom-context-type/#how-to-implement-a-custom-context-type","title":"How to Implement a Custom Context Type","text":"<ol> <li> <p>Define the context type</p> <pre><code>public class CustomContext\n{\n    // The context will be stored as a key-value pair, and this key is the ContextKey\n    public static string ContextKey { get; set; } = \"x-custom-context\"; \n\n    public CustomContext(string data)\n    {\n        Data = data;\n    }\n\n    public string Data { get; private set; }\n}\n</code></pre> </li> <li> <p>Implement the <code>IContextCarrierHandler</code> interface</p> <pre><code>public class CustomContextCarrierHandler : IContextCarrierHandler\n{\n    public Type ContextType =&gt; typeof(CustomContext);\n\n    public void Inject(IContextCarrier carrier, object? context)\n    {\n        if (context != null)\n        {\n            carrier.Set(CustomContext.ContextKey, ((CustomContext)context).Data);\n        }\n    }\n\n    public object? Initial()\n    {\n        return null;\n    }\n}\n</code></pre> </li> <li> <p>Implement the <code>IContextSourceHandler</code> interface</p> <pre><code>public class CustomContextSourceHandler : IContextSourceHandler\n{\n    public Type ContextType =&gt; typeof(CustomContext);\n\n    public object? Extract(IContextSource source)\n    {\n        var data = source.Get(CustomContext.ContextKey);\n        return string.IsNullOrEmpty(data) ? null : new CustomContext(data);\n    }\n}\n</code></pre> </li> <li> <p>Add context type registration</p> <pre><code>public static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddCustomContext(this IServiceCollection services)\n    {\n        services.AddContextCore();\n        services.TryAddSingleton&lt;IContextCarrierHandler, CustomContextCarrierHandler&gt;();\n        services.TryAddSingleton&lt;IContextSourceHandler, CustomContextSourceHandler&gt;();\n        return services;\n    }\n}\n</code></pre> </li> <li> <p>Register the context type in <code>Program.cs</code></p> <pre><code>builder.Services.AddContext()  \n    .AddEnvContext()    \n    .AddTenantContext() \n    .AddCustomContext()  // Add custom context\n    .AddCapContextProcessor(); \n</code></pre> </li> </ol>"},{"location":"en/data/id-generator/","title":"ID Generation","text":"<p>The framework currently provides two types of ID generators: <code>Guid</code> and <code>Int64</code>. You can configure the ID generator in <code>IEntityTypeConfiguration&lt;&gt;</code>. An example is shown below:</p>"},{"location":"en/data/id-generator/#using-the-iguidstronglytypedid-generator","title":"Using the IGuidStronglyTypedId Generator","text":"<p>Supports two types of ID generators: <code>Guid</code> and <code>GuidVersion7</code>. It is recommended to use <code>GuidVersion7</code>.</p> <pre><code>using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\nnamespace YourNamespace;\n\npublic class OrderEntityTypeConfiguration : IEntityTypeConfiguration&lt;Order&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Order&gt; builder)\n    {\n        // Use Guid as ID\n        builder.Property(x =&gt; x.Id).UseGuidValueGenerator();\n\n        // Use Guid Version7 as ID\n        builder.Property(x =&gt; x.Id).UseGuidVersion7ValueGenerator();\n    }\n}\n</code></pre>"},{"location":"en/data/id-generator/#using-snowflake-id-as-the-iint64stronglytypedid-generator-not-recommended","title":"Using Snowflake ID as the IInt64StronglyTypedId Generator (Not Recommended)","text":"<p>Add the package <code>NetCorePal.Extensions.Repository.EntityFrameworkCore.Snowflake</code>:</p> <pre><code>dotnet add package NetCorePal.Extensions.Repository.EntityFrameworkCore.Snowflake;\n</code></pre> <pre><code>using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\nnamespace YourNamespace;\n\npublic class OrderEntityTypeConfiguration : IEntityTypeConfiguration&lt;Order&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Order&gt; builder)\n    {\n        // Use Int64 as ID\n        builder.Property(x =&gt; x.Id).UseSnowFlakeValueGenerator();\n    }\n}\n</code></pre>"},{"location":"en/data/repository/","title":"Repository","text":"<p>The repository provides the ability to access entities from the database, using <code>EntityFrameworkCore</code> as the underlying implementation.</p>"},{"location":"en/data/repository/#creating-a-repository","title":"Creating a Repository","text":"<ol> <li> <p>Add the NuGet package <code>NetCorePal.Extensions.Repository.EntityFrameworkCore</code>:</p> <pre><code>dotnet add package NetCorePal.Extensions.Repository.EntityFrameworkCore\n</code></pre> </li> <li> <p>Define the repository</p> <pre><code>using NetCorePal.Extensions.Repository;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\n\nnamespace YourRepositoryNamespace;\n\n// Repository interface (optional), you can define only the repository class without the interface.\npublic interface IOrderRepository : IRepository&lt;Order, OrderId&gt;\n{\n}\n\n// Repository implementation\npublic class OrderRepository : RepositoryBase&lt;Order, OrderId, ApplicationDbContext&gt;, IOrderRepository\n{\n    public OrderRepository(ApplicationDbContext context) : base(context)\n    {\n    }\n}\n</code></pre> </li> <li> <p>Register the repository in Program.cs</p> <pre><code>using NetCorePal.Extensions.Repository.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace YourStartupNamespace;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n{\n    options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"));\n});\n\n// Register the repository\nbuilder.Services.AddRepositories(typeof(OrderRepository).Assembly);\n\n// Register UnitOfWork\nbuilder.Services.AddUnitOfWork&lt;ApplicationDbContext&gt;();\n</code></pre> <p>Note: Repository classes will be registered with a <code>Scoped</code> lifetime.</p> </li> </ol>"},{"location":"en/data/unit-of-work/","title":"Unit of Work Pattern","text":"<p>The Unit of Work pattern is a design pattern that combines multiple operations into a single unit to be executed within a transaction. This pattern helps manage transactions, ensuring that all operations either succeed or fail.</p> <p>You can refer to this article to learn more about the Unit of Work pattern: Unit of Work Pattern</p>"},{"location":"en/data/unit-of-work/#using-the-unit-of-work-pattern","title":"Using the Unit of Work Pattern","text":"<p>By default, the framework automatically manages the lifecycle of database transactions. For more details, refer to the Transactions section.</p> <p>If you need to manage transactions manually, the framework provides the <code>IUnitOfWork</code> and <code>ITransactionUnitOfWork</code> interfaces and their implementations.</p> <ol> <li> <p>Obtain an instance of the Unit of Work</p> <p><pre><code>// Through constructor injection\npublic class MyService\n{\n     private readonly IUnitOfWork _unitOfWork;\n\n     public MyService(IUnitOfWork unitOfWork)\n     {\n          _unitOfWork = unitOfWork;\n     }\n}\n\n// Through the service provider\nusing var scope = _serviceProvider.CreateScope();\nvar unitOfWork = scope.ServiceProvider.GetRequiredService&lt;IUnitOfWork&gt;();\nvar transactionUnitOfWork = scope.ServiceProvider.GetRequiredService&lt;ITransactionUnitOfWork&gt;();\n\n\n// Obtain IUnitOfWork through a repository instance\npublic class MyService\n{\n     private readonly IUnitOfWork _unitOfWork;\n     private readonly IOrderRepository _orderRepository;\n\n     public MyService(IOrderRepository orderRepository)\n     {\n          _orderRepository = orderRepository;\n          _unitOfWork = orderRepository.UnitOfWork;\n     }\n}\n</code></pre>    Note: The <code>IUnitOfWork</code> and <code>ITransactionUnitOfWork</code> interfaces have a <code>Scoped</code> lifetime and should be used within a <code>Scoped</code> scope.</p> </li> <li> <p>Use the Unit of Work to manage transactions</p> <p>If you need to manage transactions manually, you can use the <code>ITransactionUnitOfWork</code> interface. <pre><code>using var transaction = transactionUnitOfWork.BeginTransactionAsync();\ntry\n{\n    // Perform database operations\n    await _unitOfWork.SaveEntitiesAsync();\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n}\n</code></pre></p> </li> </ol>"},{"location":"en/domain/domain-entity/","title":"Domain Model","text":""},{"location":"en/domain/domain-entity/#introduction","title":"Introduction","text":"<p>A domain model is an abstraction and modeling representation of a specific domain or business in software development. It describes the entities, concepts, relationships, and behaviors within the domain and provides an interactive and executable representation. Domain models are typically implemented using object-oriented programming concepts such as classes, objects, properties, and methods.</p> <p>In Domain-Driven Design (DDD), the domain model is emphasized as a core component to guide the design and implementation of the system. DDD encourages development teams to work closely with domain experts to explore and understand the complexity of the domain and translate these understandings into maintainable and scalable software systems.</p> <p>The domain model in Domain-Driven Design is created by modeling the knowledge of domain experts. It is not only used for problem domain analysis and design but also for implementing business logic in software systems. The domain model is closely related to Domain-Driven Design because it is one of the core elements of DDD, helping developers understand and address complex business scenarios to build high-quality software systems.</p>"},{"location":"en/domain/domain-entity/#defining-a-domain-model","title":"Defining a Domain Model","text":"<p>To define a domain model, follow these steps:</p> <ol> <li> <p>Install the NuGet package <code>NetCorePal.Extensions.Domain.Abstractions</code></p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>Define the domain model, which requires:</p> <ul> <li>Defining a strongly-typed ID for the model (optional), the model type can be defined as needed;</li> <li>Inheriting from the <code>NetCorePal.Extensions.Domain.Entity&lt;T&gt;</code> class and specifying the model ID type;</li> <li>Implementing the <code>IAggregateRoot</code> interface (optional), only needed if the model is defined as an aggregate root, allowing the model to be used as a generic parameter for repositories;</li> <li>Defining a protected parameterless constructor for the model to support the EntityFrameworkCore framework in constructing domain model instances during queries;</li> </ul> <p>Here is an example:</p> <pre><code>// Define the domain model\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n// Define a strongly-typed ID for the model\npublic partial record UserId : IInt64StronglyTypedId;\n\n// Domain model\npublic class User : Entity&lt;UserId&gt;, IAggregateRoot\n{\n    protected User() { }\n    public string Name { get; private set; }\n    public string Email { get; set; }\n}\n</code></pre> </li> </ol>"},{"location":"en/domain/domain-entity/#domain-model-requirements","title":"Domain Model Requirements","text":"<ul> <li>The properties of the domain model must be read-only externally and writable internally (private set);</li> <li>Changes to the properties of the domain model must be made through instance methods of the model;</li> <li>The domain model must have a <code>protected</code> parameterless constructor to support the EntityFrameworkCore framework in constructing domain model instances during queries;</li> <li>The domain model must inherit from the <code>IEntity</code> or <code>Entity&lt;TKey&gt;</code> class;</li> <li>The methods of the domain model must be called by <code>CommandHandler</code>;</li> </ul>"},{"location":"en/domain/domain-entity/#domain-model-options","title":"Domain Model Options","text":"<ul> <li>The domain model can implement the <code>IAggregateRoot</code> interface to indicate that the model is an aggregate root;</li> <li>The properties and methods of the domain model are used to describe the entities, concepts, relationships, and behaviors within the domain;</li> <li>The constructor of the domain model is used to initialize the properties of the domain model;</li> <li>The events of the domain model are used to describe the state changes of the domain model;</li> <li>The rules of the domain model are used to validate the legality of the domain model;</li> </ul>"},{"location":"en/domain/domain-entity/#domain-model-donts","title":"Domain Model Don'ts","text":"<ul> <li>Do not reference external resources such as database connections, file systems, etc., in the domain model;</li> <li>Do not handle logic unrelated to business such as logging, exception handling, etc., in the domain model;</li> <li>Do not directly call external services such as Web API, message queues, etc., in the domain model;</li> <li>Do not handle data unrelated to business such as configuration information, environment variables, etc., in the domain model;</li> <li>Do not handle states unrelated to business such as session information, user information, etc., in the domain model;</li> <li>Do not handle behaviors unrelated to business such as tracking, monitoring, etc., in the domain model;</li> <li>Do not handle exceptions unrelated to business such as network exceptions, database exceptions, etc., in the domain model;</li> <li>Do not handle events unrelated to business such as scheduled tasks, message notifications, etc., in the domain model;</li> </ul>"},{"location":"en/domain/domain-event/","title":"Domain Event","text":"<p>Domain events are an important concept in domain models. They are a communication mechanism within the domain model, used to pass messages between domain models.</p> <p>Domain events only contain data describing the state of the domain model when the event occurs. They do not contain any business logic, business rules, or business processes.</p>"},{"location":"en/domain/domain-event/#define-domain-events","title":"Define Domain Events","text":"<ol> <li> <p>Install the nuget package <code>NetCorePal.Extensions.Domain.Abstractions</code></p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>To define a domain event, you need to:</p> <ul> <li>Inherit from the <code>NetCorePal.Extensions.Domain.IDomainEvent</code> interface;</li> <li>Define an empty constructor for the domain event to support serialization and deserialization;</li> <li>Define a public constructor for the domain event to initialize the properties of the domain event;</li> <li>Define public properties for the domain event to describe the state of the domain model when the event occurs;</li> </ul> <p>Here is an example:</p> <pre><code>// Define domain event\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record UserCreatedDomainEvent(User user) : IDomainEvent;\n</code></pre> </li> </ol>"},{"location":"en/domain/domain-event/#domain-events-must","title":"Domain Events Must","text":"<ul> <li>Domain events must be issued by the domain model;</li> <li>Domain events must be immutable;</li> </ul>"},{"location":"en/domain/domain-event/#domain-events-can","title":"Domain Events Can","text":"<ul> <li>Use the <code>record</code> keyword to define domain events;</li> </ul>"},{"location":"en/domain/domain-event/#domain-events-should-not","title":"Domain Events Should Not","text":"<ul> <li>Do not contain business logic</li> <li>Do not contain business rules</li> <li>Do not contain business processes</li> </ul>"},{"location":"en/domain/domain-value-object/","title":"Value Object","text":""},{"location":"en/domain/domain-value-object/#what-is-a-value-object","title":"What is a Value Object","text":""},{"location":"en/domain/soft-delete/","title":"Soft Delete Type","text":""},{"location":"en/domain/soft-delete/#deleted-type","title":"Deleted Type","text":""},{"location":"en/domain/soft-delete/#introduction","title":"Introduction","text":"<p><code>Deleted</code> is a <code>record</code> type that encapsulates a <code>bool</code> value internally, defaulting to false. It is used to mark whether data has been soft deleted. The framework will automatically filter queries based on this property.</p>"},{"location":"en/domain/soft-delete/#how-to-use","title":"How to Use","text":"<p>In the entity class, you can define a property of type <code>Deleted</code>. Note that the framework will not automatically maintain the value of this property; you need to customize the delete method to update this value. Here is an example:</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    protected Order() { }\n\n    /// &lt;summary&gt;\n    /// Delete flag\n    /// &lt;/summary&gt;\n    public Deleted IsDeleted { get; private set; } = new ();\n\n    public void SoftDelete()\n    {\n        IsDeleted = true;\n    }\n}\n</code></pre> <p>In the above code, the Order entity class contains an IsDeleted property, which is initially set to false, indicating that the data has not been deleted. The SoftDelete method is used to set the IsDeleted property to true, marking the data as soft deleted.</p>"},{"location":"en/domain/soft-delete/#implicit-conversion","title":"Implicit Conversion","text":"<p>Supports seamless conversion with the <code>bool</code> type:</p> <pre><code>Deleted deleted = true;  // Automatically converts to Deleted type\nbool isDeleted = deleted; // Automatically unpacks to bool value\n</code></pre>"},{"location":"en/domain/soft-delete/#control-database-field-properties","title":"Control Database Field Properties","text":"<p>Use the <code>[Column]</code> attribute to control the database field name:</p> <pre><code>[Column(Name = \"is_deleted\")]\npublic Deleted IsDeleted { get; private set; }\n</code></pre>"},{"location":"en/domain/soft-delete/#deletedtime-type","title":"DeletedTime Type","text":""},{"location":"en/domain/soft-delete/#introduction_1","title":"Introduction","text":"<p><code>DeletedTime</code> is a <code>record</code> type that encapsulates <code>DateTimeOffset</code> internally. It is used to record the time when the data was soft deleted. It needs to be used in conjunction with the <code>Deleted</code> type.</p>"},{"location":"en/domain/soft-delete/#how-to-use_1","title":"How to Use","text":"<p>Define a property of type <code>DeletedTime</code> in the entity. The framework will automatically set the timestamp when the value of the <code>Deleted</code> type property in the entity is updated to true:</p> <pre><code>public class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    protected Order() { }\n\n    /// &lt;summary&gt;\n    /// Delete flag\n    /// &lt;/summary&gt;\n    public Deleted IsDeleted { get; private set; } = new Deleted(false);\n\n    /// &lt;summary&gt;\n    /// Delete time\n    /// &lt;/summary&gt;\n    public DeletedTime DeletedAt { get; private set; }\n\n    public void SoftDelete()\n    {\n        IsDeleted = true;\n    }\n}\n</code></pre> <p>In the above code, the Order entity class contains two properties, IsDeleted and DeletedAt. When the SoftDelete method is called to set IsDeleted to true, the framework will automatically record the current time for the DeletedAt property.</p>"},{"location":"en/domain/soft-delete/#control-database-field-properties_1","title":"Control Database Field Properties","text":"<p>Use the <code>[Column]</code> attribute to control the database field name:</p> <pre><code>[Column(Name = \"deleted_at\")]\npublic DeletedTime DeletedAt { get; private set; }\n</code></pre>"},{"location":"en/domain/soft-delete/#best-practices","title":"Best Practices","text":"<p>To make it easier to use the soft delete feature in multiple entity classes, it is recommended to customize an interface that combines the Deleted and DeletedTime type properties. Here is an example:</p> <pre><code>public interface ISoftDelete\n{\n    public Deleted IsDeleted { get; private set; }\n    public DeletedTime DeletedAt { get; private set; }\n}\n</code></pre>"},{"location":"en/domain/strong-typed-id/","title":"Strongly Typed Entity ID","text":""},{"location":"en/domain/strong-typed-id/#introduction","title":"Introduction","text":"<p>In domain-driven design modeling, the entity ID is very important. It is the unique identifier of an entity, the primary key of the entity, and an important attribute of the entity. Usually, we use types such as <code>int</code>, <code>long</code>, <code>Guid</code>, and <code>string</code> to define entity IDs. However, using these types in the system can lead to the following problems:</p> <ol> <li>When defining an ID value, it is impossible to determine from the type whether it represents an entity ID or another type, which reduces code readability.</li> <li>When assigning a value to an ID field referenced by an entity, it is easy to mistakenly assign a non-expected value of another type to the ID field, leading to errors.</li> </ol> <p>To solve the above problems, we recommend using <code>strongly typed entity IDs</code>. Strongly typed entity IDs are encapsulations based on basic types. The currently supported basic types are:</p> <ul> <li>Int32</li> <li>Int64</li> <li>Guid</li> <li>String</li> </ul>"},{"location":"en/domain/strong-typed-id/#how-to-use","title":"How to Use","text":"<p>Strongly typed IDs need to be modified with the keywords <code>public</code>, <code>partial</code>, and <code>record</code>, and need to implement one of the interfaces <code>IInt32StronglyTypedId</code>, <code>IInt64StronglyTypedId</code>, <code>IGuidStronglyTypedId</code>, or <code>IStringStronglyTypedId</code>.</p> <ol> <li> <p>Add a reference to the <code>NetCorePal.Extensions.Domain.Abstractions</code> package.</p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>You can write code similar to the following to implement a strongly typed entity ID:</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic partial record Int64OrderId : IInt64StronglyTypedId;\n</code></pre> <p>The following code is automatically generated by <code>SourceGenerator</code>:</p> <pre><code>using NetCorePal.Extensions.Domain;\nusing System;\nusing System.ComponentModel;\nnamespace YourNamespace;\n\n[TypeConverter(typeof(EntityIdTypeConverter&lt;Int64OrderId, Int64&gt;))]\npublic partial record Int64OrderId(Int64 Id) : IInt64StronglyTypedId\n{\n    public static implicit operator Int64(Int64OrderId id) =&gt; id.Id;\n    public static implicit operator Int64OrderId(Int64 id) =&gt; new Int64OrderId(id);\n    public override string ToString()\n    {\n        return Id.ToString();\n    }\n}\n</code></pre> <p>More examples:</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n// Int32 strongly typed entity ID\npublic partial record Int32OrderId : IInt32StronglyTypedId;\n\n// Guid strongly typed entity ID\npublic partial record GuidOrderId : IGuidStronglyTypedId;\n\n// String strongly typed entity ID\npublic partial record StringOrderId : IStringStronglyTypedId;\n</code></pre> </li> </ol>"},{"location":"en/domain/strong-typed-id/#json-serialization-support","title":"Json Serialization Support","text":"<p>In scenarios such as inter-service calls and WebAPI, it usually involves serialization and deserialization between entity types and JSON strings. To ensure that strongly typed entity IDs work properly in these scenarios, we provide serialization support based on <code>System.Text.Json</code> and <code>Newtonsoft.Json</code>.</p> <ol> <li> <p>For <code>System.Text.Json</code>, you can use the following code to implement:</p> <pre><code>using NetCorePal.Extensions.Domain.Json;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddMvc().AddControllersAsServices().AddJsonOptions(options =&gt;\n{\n    options.JsonSerializerOptions.Converters.Add(new EntityIdJsonConverterFactory());\n});\n</code></pre> </li> <li> <p>For <code>Newtonsoft.Json</code>, you can use the following code to implement:</p> <p>Add the <code>NetCorePal.Extensions.AspNetCore</code> package</p> <pre><code>dotnet add package NetCorePal.Extensions.AspNetCore\n</code></pre> <p>Add the following code to the <code>Startup.cs</code> file:</p> <pre><code>builder.Services.AddControllers().AddNewtonsoftJson(options =&gt;\n{\n    options.SerializerSettings.Converters.Add(new NewtonsoftEntityIdJsonConverter());\n});\n</code></pre> <p>The following example shows the effect of serialization and deserialization:</p> <pre><code>JsonSerializerOptions options = new();\noptions.Converters.Add(new EntityIdJsonConverterFactory());\n\nvar id = JsonSerializer.Deserialize&lt;OrderId1&gt;(\"\\\"12\\\"\", options);\nAssert.NotNull(id);\nAssert.True(id.Id == 12);\nvar id2 = new OrderId2(2);\nvar json = JsonSerializer.Serialize(id2, options);\nAssert.Equal(\"\\\"2\\\"\", json);\n</code></pre> </li> </ol> <p>Note: Strongly typed entity IDs will be serialized as strings.</p>"},{"location":"en/domain/strong-typed-id/#id-generation","title":"ID Generation","text":"<p>For ID generation, see the ID Generation document.</p>"},{"location":"en/domain/update-time/","title":"UpdateTime Type","text":""},{"location":"en/domain/update-time/#introduction","title":"Introduction","text":"<p><code>UpdateTime</code> is a value type that encapsulates <code>DateTimeOffset</code> internally. It is used to represent a timestamp, usually indicating the last update time of a data record.</p>"},{"location":"en/domain/update-time/#how-to-use","title":"How to Use","text":"<p>Define a property of type <code>UpdateTime</code> in your entity, and the framework will automatically handle its value updates.</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    /// &lt;summary&gt;\n    /// \n    /// &lt;/summary&gt;\n    protected Order()\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// Update time\n    /// &lt;/summary&gt;\n    public UpdateTime UpdateAt { get; private set; } = new UpdateTime(DateTimeOffset.UtcNow);\n}\n</code></pre>"},{"location":"en/domain/update-time/#control-database-field-properties","title":"Control Database Field Properties","text":"<p>Use the <code>[Column]</code> attribute to control the database field name:</p> <pre><code>using NetCorePal.Extensions.Domain;\nusing System.ComponentModel.DataAnnotations.Schema;\nnamespace YourNamespace;\n\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    /// &lt;summary&gt;\n    /// \n    /// &lt;/summary&gt;\n    protected Order()\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// Update time\n    /// &lt;/summary&gt;\n    [Column(name:\"update_at\")]\n    public UpdateTime UpdateAt { get; private set; } = new UpdateTime(DateTimeOffset.UtcNow);\n}\n</code></pre>"},{"location":"en/env/multi-env/","title":"Multi-Environment Support","text":""},{"location":"en/env/multi-env/#what-is-multi-environment-support","title":"What is Multi-Environment Support","text":"<p>Multi-environment support refers to the ability to deploy multiple versions of services in the same cluster and use the context system to ensure that user requests are processed by the expected version.</p> <p>Typically, we expect multiple versions to run simultaneously, which requires deploying all application services for the new version in the cluster. With multi-environment support, we can deploy only the changed services in the cluster, and the system can route requests to the correct service for processing.</p> <p>The diagram below shows the architecture of multi-environment support. Different lines represent the processing paths of requests for different versions:</p> <p></p>"},{"location":"en/env/multi-env/#enable-multi-environment-support","title":"Enable Multi-Environment Support","text":"<ol> <li>Add dependency packages</li> </ol> <pre><code>dotnet add package NetCorePal.Extensions.MultiEnv\ndotnet add package NetCorePal.Extensions.MicrosoftServiceDiscovery  // If using Microsoft.Extensions.ServiceDiscovery for service discovery\n</code></pre> <ol> <li> <p>Add environment context</p> <pre><code>builder.Services.AddContext()  \n    .AddEnvContext()    // Add environment support\n    .AddTenantContext() \n    .AddCapContextProcessor(); \n</code></pre> </li> <li> <p>Add multi-environment support</p> </li> </ol> <p>You can use <code>NetCorePalServiceDiscovery</code> or <code>Microsoft.Extensions.ServiceDiscovery</code> for multi-environment service discovery support    <pre><code>builder.Services.AddMultiEnv(options =&gt;\n  {\n      options.ServiceName = \"MyServiceName\";\n      options.ServiceEnv = \"main\";\n  })\n  .UseNetCorePalServiceDiscovery(); // Use NetCorePalServiceDiscovery for multi-environment service discovery support\n  //.UseMicrosoftServiceDiscovery();  // Use Microsoft.Extensions.ServiceDiscovery for multi-environment service discovery support\n</code></pre></p> <ol> <li>Use <code>Microsoft.Extensions.ServiceDiscovery</code> for multi-environment support</li> </ol> <p>If your service discovery uses <code>Microsoft.Extensions.ServiceDiscovery</code>, replace <code>AddServiceDiscovery</code> with <code>AddMultiEnvMicrosoftServiceDiscovery</code></p> <pre><code>Modify the registration code\n```csharp\n// Register Microsoft.Extensions.ServiceDiscovery\nbuilder.Services.AddMultiEnvMicrosoftServiceDiscovery()  // Replace `AddServiceDiscovery` with `AddMultiEnvMicrosoftServiceDiscovery`\n    .AddConfigurationServiceEndpointProvider();\n\n// Register HttpClient and configure service discovery\nbuilder.Services.AddHttpClient&lt;CatalogClient&gt;()\n    .AddMultiEnvMicrosoftServiceDiscovery();   // Replace `AddServiceDiscovery` with `AddMultiEnvMicrosoftServiceDiscovery`\n```\n</code></pre> <p>Note: Currently, multi-environment support based on <code>Microsoft.Extensions.ServiceDiscovery</code> relies on a service list that can be explicitly obtained from service registration discovery. Services using <code>PassThroughServiceEndpointProvider</code> will not be recognized as valid services because it is impossible to determine whether the service is actually deployed in the cluster. This will result in the inability to perceive the existence of gray versions, and traffic will be directed to the default version.</p>"},{"location":"en/env/multi-env/#use-multi-environment","title":"Use Multi-Environment","text":"<p>The multi-environment system mainly transmits environment information through the environment context. Therefore, you can set the environment information at the system entry point, such as defining a logic in the Yarp gateway:</p> <pre><code> app.Use((context, next) =&gt;\n {\n     var contextAccessor = context.RequestServices.GetRequiredService&lt;IContextAccessor&gt;();\n     contextAccessor.SetContext(new EnvContext(\"v2\")); // You can determine the environment version based on the currently logged-in user\n     return next();\n });\n</code></pre> <p>With the above settings, all subsequent requests will be routed to the corresponding <code>v2</code> version of the service for processing. If the corresponding service does not have a <code>v2</code> version, it will be routed to the default version for processing.</p>"},{"location":"en/events/domain-event-handler/","title":"Domain Event Handling","text":"<p>A domain event handler is a processing logic that handles <code>domain events</code> for a specific purpose. A domain event handler should handle domain events for only one purpose. Different purposes for the same <code>domain event</code> should have different domain event handlers.</p>"},{"location":"en/events/domain-event-handler/#define-domain-event-handler","title":"Define Domain Event Handler","text":"<ol> <li> <p>Install the nuget package <code>NetCorePal.Extensions.Domain.Abstractions</code></p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>A domain event handler is a class that implements the <code>IDomainEventHandler&lt;TDomainEvent&gt;</code> interface, where <code>TDomainEvent</code> is the type of the domain event.</p> </li> </ol> <p>Here is an example of a domain event handler:</p> <pre><code>```csharp\npublic class OrderCreatedDomainEventHandler(IMediator mediator) : IDomainEventHandler&lt;OrderCreatedDomainEvent&gt;\n{\n    public Task Handle(OrderCreatedDomainEvent notification, CancellationToken cancellationToken)\n    {\n        return mediator.Send(new DeliverGoodsCommand(notification.Order.Id), cancellationToken);\n    }\n}\n```\n</code></pre>"},{"location":"en/events/domain-event-handler/#domain-event-handlers-must","title":"Domain Event Handlers Must","text":"<ul> <li>Domain event handlers must be idempotent, meaning that processing the same domain event multiple times should result in the same outcome;</li> <li>A single domain event handler can only issue one command and is not allowed to issue multiple commands within the same handler;</li> </ul> <p>Note: In our framework, domain event handlers are executed synchronously, and the commands they call are in the same transaction as the CommandHandler that triggers the domain event.</p>"},{"location":"en/events/domain-event-handler/#domain-event-handlers-can","title":"Domain Event Handlers Can","text":"<ul> <li>A single domain event can correspond to multiple domain event handlers;</li> <li>Domain event handlers can use the <code>MediatR</code> framework to send commands;</li> <li>Domain event handlers can retrieve data from multiple queries;</li> <li>Domain event handlers can call external services to complete some information organization and validation;</li> <li>Domain event handlers can publish integration events to transmit events to other systems;</li> </ul>"},{"location":"en/events/domain-event-handler/#domain-event-handlers-should-not","title":"Domain Event Handlers Should Not","text":"<ul> <li>Domain event handlers should not contain operations on domain models. Domain models should be operated and persisted by CommandHandlers.</li> </ul> <p>Note: Since our framework only manages transactions for <code>CommandHandlers</code>, operations in domain event handlers will not be saved to the database because the framework does not call <code>SaveChangesAsync</code> for them.</p>"},{"location":"en/events/integration-converter/","title":"Integration Event Converter","text":"<p>The integration event converter is a tool for converting domain events into integration events.</p> <p>With the integration event converter, you can decouple the sending of integration events from the business logic in other domain event handlers.</p>"},{"location":"en/events/integration-converter/#define-integration-event-converter","title":"Define Integration Event Converter","text":"<ol> <li>Install the nuget package <code>NetCorePal.Extensions.DistributedTransactions.Abstractions</code></li> </ol> <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.Abstractions\n</code></pre> <ol> <li> <p>Define the integration event converter, which requires:</p> </li> <li> <p>Inherit the <code>NetCorePal.Extensions.DistributedTransactions.IIntegrationEventConverter</code> interface;</p> </li> <li>Implement the Convert method of the IIntegrationEventConverter interface, which takes a domain event IDomainEvent as a parameter and returns an integration event IntegrationEvent.</li> </ol> <p>\u200b       Here is an example:</p> <pre><code>// Define integration event converter\nusing NetCorePal.Web.Application.IntegrationConvert;\nnamespace YourNamespace;\n\npublic class OrderCreatedIntegrationEventConverter \n    : IIntegrationEventConverter&lt;OrderCreatedDomainEvent, OrderCreatedIntegrationEvent&gt;\n{\n    public OrderCreatedIntegrationEvent Convert(OrderCreatedDomainEvent domainEvent)\n    {\n        return new OrderCreatedIntegrationEvent(domainEvent.Order.Id);\n    }\n}\n</code></pre> <ol> <li>The framework comes with a code generator to automatically generate integration event handlers.</li> </ol> <p>Here is an example of an integration event handler generated by the code generator:</p> <p>```csharp //  using NetCorePal.Web.Application.IntegrationConverters; using NetCorePal.Extensions.DistributedTransactions; using NetCorePal.Extensions.Domain; using NetCorePal.Web; namespace YourNamespace; {     ///      /// OrderCreatedIntegrationEventConverterDomainEventHandlers     ///      public class OrderCreatedIntegrationEventConverterDomainEventHandler(IIntegrationEventPublisher integrationEventPublisher, OrderCreatedIntegrationEventConverter converter) : IDomainEventHandler     {         ///          /// OrderCreatedIntegrationEventConverterDomainEventHandler         ///          /// notification         /// cancellationToken         public async Task Handle(OrderCreatedDomainEvent notification, CancellationToken cancellationToken){             // Convert and publish integration event             var integrationEvent = converter.Convert(notification);             await integrationEventPublisher.PublishAsync(integrationEvent, cancellationToken);         } <pre><code>}\n</code></pre> <p>}</p>"},{"location":"en/events/integration-event-handler/","title":"Integration Events","text":"<p>Since <code>domain events</code> are only used in local transactions, we need a mechanism to transmit events in a distributed system so that the handling of events does not block the execution of the <code>command</code> that initiated the event. This is the role of <code>integration events</code>.</p>"},{"location":"en/events/integration-event-handler/#register-integration-event-services","title":"Register Integration Event Services","text":"<p>The framework currently implements the <code>CAP</code> component to support integration events. We need to register the <code>CAP</code> component in the <code>Startup</code> class:</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(x =&gt;\n    {\n        x.UseEntityFramework&lt;AppDbContext&gt;();\n        x.UseRabbitMQ(\"localhost\");\n    });\n}\n\n// Configure CAP for integration events\nbuilder.Services.AddIntegrationEvents(typeof(Program))\n        .UseCap(b =&gt;\n        {\n            b.RegisterServicesFromAssemblies(typeof(Program));\n            b.AddContextIntegrationFilters();\n            b.UseMySql();\n        });\n</code></pre>"},{"location":"en/events/integration-event-handler/#emitting-integration-events","title":"Emitting Integration Events","text":"<p>Integration events are converted from <code>domain events</code> and are generally named with the suffix <code>IntegrationEvent</code> to distinguish them from <code>domain events</code>, such as <code>OrderCreatedIntegrationEvent</code>.</p> <p>To emit an integration event, we need to define an <code>IIntegrationEventConverter</code>, which the framework will automatically use to convert domain events into integration events and emit them.</p> <pre><code>public class OrderCreatedIntegrationEventConverter : \n    IIntegrationEventConverter&lt;OrderCreatedDomainEvent, OrderCreatedIntegrationEvent&gt;\n{\n    public OrderCreatedIntegrationEvent Convert(OrderCreatedDomainEvent domainEvent)\n    {\n        return new OrderCreatedIntegrationEvent(domainEvent.Order.Id);\n    }\n}\n</code></pre>"},{"location":"en/events/integration-event-handler/#integration-event-handling","title":"Integration Event Handling","text":"<p>An integration event handler is a class that implements the <code>IIntegrationEventHandler&lt;TIntegrationEvent&gt;</code> interface, where <code>TIntegrationEvent</code> is the type of the integration event.</p> <p>Typically, we can do the following in an integration event handler:</p> <ul> <li>Emit commands</li> <li>Call external services</li> </ul> <p>Here is an example of an integration event handler:</p> <pre><code>public class OrderCreatedIntegrationEventHandler(IMediator mediator) : IIntegrationEventHandler&lt;OrderCreatedIntegrationEvent&gt;\n{\n    public async Task Handle(OrderCreatedIntegrationEvent eventData, CancellationToken cancellationToken)\n    {\n        // Handle the integration event\n        var cmd = new OrderPaidCommand(eventData.OrderId);\n        await mediator.Send(cmd, cancellationToken);\n    }\n}\n</code></pre>"},{"location":"en/events/integration-event-handler/#retry-on-failure","title":"Retry on Failure","text":"<p>We use the <code>CAP</code> component to implement integration events. The <code>CAP</code> component provides a retry mechanism for failures. When the handling of an integration event fails, <code>CAP</code> will automatically retry the handling. By default, it will retry <code>10</code> times.</p>"},{"location":"en/events/integration-event-handler/#limitations","title":"Limitations","text":"<p>Integration events must use simple objects because integration events need to support JSON format serialization and deserialization and be transmitted in a distributed system.</p>"},{"location":"en/getting-started/development-process/","title":"Quick Development Process","text":"<p>This section introduces the main development process using this framework to help you get started quickly.</p>"},{"location":"en/getting-started/development-process/#1-create-domain-model","title":"1. Create Domain Model","text":"<p>Create domain models in the domain layer, defining the properties, methods, events, and rules of the domain models.</p> <pre><code>// Define domain model\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n// Define strongly-typed ID for the model\npublic partial record UserId : IInt64StronglyTypedId;\n\n// Domain model\npublic class User : Entity&lt;UserId&gt;, IAggregateRoot\n{\n    protected User() { }\n\n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n        this.AddDomainEvent(new UserCreatedDomainEvent(this));\n    }\n    public string Name { get; private set; }\n    public string Email { get; private set; }\n\n    public void ChangeEmail(string email)\n    {\n        Email = email;\n        this.AddDomainEvent(new UserEmailChangedDomainEvent(this));\n    }\n}\n</code></pre> <p>Define domain events</p> <pre><code>// Define domain events\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record UserCreatedDomainEvent(User user) : IDomainEvent;\n</code></pre>"},{"location":"en/getting-started/development-process/#2-create-repository","title":"2. Create Repository","text":"<p>Define the repository interface for the domain model</p> <pre><code>// Define repository interface\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic interface IUserRepository : IRepository&lt;User, UserId&gt;\n{\n    Task&lt;User&gt; GetByEmailAsync(string email); // Optional custom query method\n}\n</code></pre> <p>Implement the repository interface</p> <pre><code>// Implement repository interface\nusing NetCorePal.Extensions.Repository;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\nnamespace YourNamespace;\n\npublic class UserRepository : RepositoryBase&lt;User, UserId, ApplicationDbContext&gt;, IUserRepository\n{\n    public UserRepository(ApplicationDbContext dbContext) : base(dbContext)\n    {\n    }\n\n    public async Task&lt;User&gt; GetByEmailAsync(string email)\n    {\n        return await DbContext.Set&lt;User&gt;().FirstOrDefaultAsync(x =&gt; x.Email == email);\n    }\n}\n</code></pre>"},{"location":"en/getting-started/development-process/#3-define-model-and-database-mapping","title":"3. Define Model and Database Mapping","text":"<pre><code>// Define model and database mapping\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing NetCorePal.Extensions.Domain;\n\nnamespace YourNamespace;\n\npublic class UserEntityTypeConfiguration : IEntityTypeConfiguration&lt;User&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;User&gt; builder)\n    {\n        builder.HasKey(x =&gt; x.Id);\n        builder.Property(x =&gt; x.Name).IsRequired().HasMaxLength(50);\n        builder.Property(x =&gt; x.Email).IsRequired().HasMaxLength(50);\n    }\n}\n</code></pre>"},{"location":"en/getting-started/development-process/#4-commands-and-command-handlers","title":"4. Commands and Command Handlers","text":"<p>Define commands for the domain model</p> <pre><code>// Define commands for the domain model\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record CreateUserCommand(string Name, string Email) : ICommand&lt;UserId&gt;;\n</code></pre> <p>Define command handlers for the domain model</p> <pre><code>// Define command handlers for the domain model\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class CreateUserCommandHandler(IUserRepository userRepository) : ICommandHandler&lt;CreateUserCommand, UserId&gt;\n{\n    public async Task&lt;UserId&gt; HandleAsync(CreateUserCommand command)\n    {\n        var user = new User(command.Name, command.Email);\n        await userRepository.AddAsync(user);\n        return user.Id;\n    }\n}\n</code></pre>"},{"location":"en/getting-started/development-process/#5-define-web-api-interface","title":"5. Define Web API Interface","text":"<p>Use the IMediator interface in the endpoint to handle commands for the domain model</p> <p>Define RequestDto</p> <pre><code>// Define RequestDto\nnamespace YourNamespace;\n\npublic record CreateUserRequestDto(string Name, string Email);\n</code></pre> <p>Define ResponseDto</p> <pre><code>// Define ResponseDto\nnamespace YourNamespace;\n\npublic record CreateUserResponseDto(UserId UserId);\n</code></pre> <p>Define FastEndpoint</p> <pre><code>// Define Endpoint\nusing FastEndpoints;\nusing NetCorePal.Extensions.Domain;\nusing NetCorePal.Extensions.Dto;\nnamespace YourNamespace;\n\npublic class CreateUserEndpoint(IMediator mediator) : Endpoint&lt;CreateUserRequestDto, ResponseData&lt;CreateUserResponseDto&gt;&gt;\n{\n    public override void Configure()\n    {\n        Post(\"/api/users\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CreateUserRequestDto req, CancellationToken ct)\n    {\n        var command = new CreateUserCommand(req.Name, req.Email);\n        var userId = await mediator.SendAsync(command, ct);\n        var response = new CreateUserResponseDto(userId).AsResponseData();\n        await SendAsync(response, cancellation: ct);\n    }\n}\n</code></pre>"},{"location":"en/getting-started/development-process/#6-write-integration-tests","title":"6. Write Integration Tests","text":"<p>Write integration tests to test the command handlers of the domain model, using <code>MyWebApplicationFactory</code> to create the test environment</p> <pre><code>// Write integration tests\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing Xunit;\nusing YourNamespace;\nnamespace YourNamespace.Tests;\n\npublic class CreateUserEndpointTests : IClassFixture&lt;MyWebApplicationFactory&gt;\n{\n    private readonly HttpClient _client;\n\n    public CreateUserEndpointTests(MyWebApplicationFactory factory)\n    {\n        _client = factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task CreateUserTest()\n    {\n        var response = await _client.PostAsJsonAsync(\"/api/users\", new CreateUserRequestDto(\"test\", \"abc@efg.com\"));\n        response.EnsureSuccessStatusCode();\n        var result = await response.Content.ReadFromJsonAsync&lt;ResponseData&lt;CreateUserResponseDto&gt;&gt;();\n        Assert.NotNull(result);\n        Assert.True(result.Success);\n        Assert.NotNull(result.Data);\n    }   \n}\n</code></pre>"},{"location":"en/getting-started/development-process/#7-domain-event-handlers","title":"7. Domain Event Handlers","text":"<p>Define domain event handlers</p> <pre><code>// Define domain event handlers\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class UserCreatedDomainEventHandler : IDomainEventHandler&lt;UserCreatedDomainEvent&gt;\n{\n    public async Task HandleAsync(UserCreatedDomainEvent domainEvent)\n    {\n        // Handle domain event, send points to the points domain\n    }\n}\n</code></pre>"},{"location":"en/getting-started/development-process/#8-define-integration-events","title":"8. Define Integration Events","text":"<p>Define integration events</p> <pre><code>// Define integration events\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record UserCreatedIntegrationEvent(UserId userId) : IIntegrationEvent;\n</code></pre>"},{"location":"en/getting-started/development-process/#9-publish-integration-events","title":"9. Publish Integration Events","text":"<p>Use the integration event converter to convert domain events to integration events, the framework will automatically publish integration events:</p> <pre><code>public class UserCreatedIntegrationEventConverter : IIntegrationEventConverter&lt;UserCreatedDomainEvent,UserCreatedIntegrationEvent&gt;{\n    public UserCreatedIntegrationEvent Convert(UserCreatedDomainEvent domainEvent)\n    {\n        return new UserCreatedIntegrationEvent(domainEvent.User.Id);\n    }\n}\n</code></pre> <p>Note: IIntegrationEventPublisher is no longer recommended, the framework will automatically publish integration events</p> <p>Use IIntegrationEventPublisher to publish integration events</p> <pre><code>// Publish integration events\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class UserCreatedDomainEventHandler(IIntegrationEventPublisher integrationEventPublisher) : IDomainEventHandler&lt;UserCreatedDomainEvent&gt;\n{\n    public async Task HandleAsync(UserCreatedDomainEvent domainEvent)\n    {\n        // Handle domain event\n    }\n}\n</code></pre>"},{"location":"en/getting-started/development-process/#10-integration-event-handlers","title":"10. Integration Event Handlers","text":"<p>Define integration event handlers</p> <pre><code>// Define integration event handlers\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class UserCreatedIntegrationEventHandler : IIntegrationEventHandler&lt;UserCreatedIntegrationEvent&gt;\n{\n    public async Task HandleAsync(UserCreatedIntegrationEvent integrationEvent)\n    {\n        // Handle integration event\n        var cmd = new AddUserScoreCommand(integrationEvent.UserId);\n        await _mediator.SendAsync(cmd);\n    }\n}\n</code></pre>"},{"location":"en/getting-started/getting-started/","title":"Getting Started","text":""},{"location":"en/getting-started/getting-started/#environment-setup","title":"Environment Setup","text":""},{"location":"en/getting-started/getting-started/#install-development-tools","title":"Install Development Tools","text":"<p>Choose one of the following development tools:</p> <ul> <li>Visual Studio Code</li> <li>Visual Studio</li> <li>JetBrains Rider</li> </ul>"},{"location":"en/getting-started/getting-started/#install-net-sdk","title":"Install .NET SDK","text":"<ul> <li>.NET 9 SDK</li> </ul>"},{"location":"en/getting-started/getting-started/#install-docker-environment","title":"Install Docker Environment","text":"<p>Have a Docker environment for automated unit testing and integration testing.</p> <p>Docker Desktop download link: (https://www.docker.com/products/docker-desktop/)</p>"},{"location":"en/getting-started/getting-started/#debug-environment-setup","title":"Debug Environment Setup","text":"<p>This step is not mandatory. By default, automated tests will automatically start the debug environment and shut it down after the tests are completed.</p> <p>The debug environment installed here is for running and debugging locally.</p> <pre><code># redis\ndocker run -p 6379:6379 -d redis:7.0\n# rabbitmq\ndocker run -p 5672:5672 -p 15672:15672  -d rabbitmq:3.9-management\n# mysql\ndocker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0\n</code></pre> <p>The management interface address of RabbitMQ is: http://localhost:15672/, with both username and password being guest.</p>"},{"location":"en/getting-started/getting-started/#install-project-template-tool","title":"Install Project Template Tool","text":"<p>Stable version NetCorePal.Template - NuGet</p> <pre><code>dotnet new install NetCorePal.Template\n</code></pre> <p>or</p> <p>Preview version NetCorePal.Template - MyGet</p> <pre><code>dotnet new install NetCorePal.Template::&lt;package-version&gt; --add-source \"https://www.myget.org/F/netcorepal/api/v3/index.json\"\n</code></pre>"},{"location":"en/getting-started/getting-started/#create-project","title":"Create Project","text":"<pre><code>dotnet new netcorepal-web -n MyWebApp\n</code></pre>"},{"location":"en/getting-started/getting-started/#run-project","title":"Run Project","text":"<pre><code>cd MyWebApp/src/MyWebApp.Web\n# Todo: Add script to build infrastructure\ndotnet run\n</code></pre>"},{"location":"en/getting-started/getting-started/#run-tests","title":"Run Tests","text":"<pre><code>dotnet test\n</code></pre>"},{"location":"en/getting-started/program-file/","title":"Configure Services","text":"<p>This section introduces how to configure services in the <code>Program.cs</code> file.</p> <pre><code>// Configure services\nusing Microsoft.Extensions.DependencyInjection;\nusing NetCorePal.Extensions.DependencyInjection;\nusing YourNamespace;\n\nvar builder = WebApplication.CreateBuilder(args);\n</code></pre>"},{"location":"en/getting-started/project-structure/","title":"Project Structure","text":""},{"location":"en/getting-started/project-structure/#overall-structure","title":"Overall Structure","text":"<pre><code>YourProject\n     \u251c\u2500\u2500src\n     \u2502  \u251c\u2500\u2500YourProject.Web  // Web project\n     \u2502  \u251c\u2500\u2500YourProject.Domain // Domain model\n     \u2502  \u2514\u2500\u2500YourProject.Infrastructure // Infrastructure\n     \u2514\u2500\u2500tests\n        \u251c\u2500\u2500YourProject.Web.Tests  // Web tests\n        \u251c\u2500\u2500YourProject.Domain.Tests // Domain model tests\n        \u2514\u2500\u2500YourProject.Infrastructure.Tests // Infrastructure tests\n</code></pre>"},{"location":"en/getting-started/project-structure/#domain-model-layer-project-structure","title":"Domain Model Layer Project Structure","text":"<pre><code>YourProject.Domain\n     \u251c\u2500\u2500 AggregatesModel // Domain model directory, containing aggregate roots, entities, value objects, etc.\n     \u2514\u2500\u2500 DomainEvents // Domain events directory\n</code></pre>"},{"location":"en/getting-started/project-structure/#infrastructure-layer-project-structure","title":"Infrastructure Layer Project Structure","text":"<pre><code>YourProject.Infrastructure\n     \u251c\u2500\u2500 EntityConfigurations  // Domain model database mapping configurations directory\n     \u251c\u2500\u2500 Repositories  // Repositories directory\n     \u2514\u2500\u2500 ApplicationDbContext.cs  // Database context\n</code></pre>"},{"location":"en/getting-started/project-structure/#web-layer-project-structure","title":"Web Layer Project Structure","text":"<pre><code>YourProject.Web\n     \u251c\u2500\u2500 wwwroot // Static resources directory\n     \u251c\u2500\u2500 Application  // Application services directory\n     \u2502   \u251c\u2500\u2500 Commands  // Commands, command handlers, command validators directory\n     \u2502   \u251c\u2500\u2500 DomainEventHandlers  // Domain event handlers directory\n     \u2502   \u251c\u2500\u2500 IntegrationEventConverters // Integration event converters directory\n     \u2502   \u251c\u2500\u2500 IntegrationEventHandlers  // Integration event handlers directory\n     \u2502   \u2514\u2500\u2500 Queries  // Query services directory\n     \u251c\u2500\u2500 Clients  // Remote service clients directory, for accessing other microservices or third-party services\n     \u251c\u2500\u2500 Endpoints  // Endpoints directory\n     \u251c\u2500\u2500 Extensions  // Extension methods directory, containing various extension method definitions\n     \u251c\u2500\u2500 Filters  // Filters directory\n     \u2514\u2500\u2500 Program.cs  // Startup entry class\n</code></pre>"},{"location":"en/rules-of-ddd/rules-of-ddd/","title":"Rules of Domain Driven Design","text":""},{"location":"en/rules-of-ddd/rules-of-ddd/#rules-of-domain-driven-design_1","title":"Rules of Domain Driven Design","text":""},{"location":"en/rules-of-ddd/rules-of-ddd/#no-cross-domain-allowed","title":"No cross-domain allowed:","text":"<ul> <li>The change of entity fields must be operated by the entity's own methods.</li> <li>There should be no direct or indirect reference relationship between aggregate roots.</li> <li>Each query should not associate multiple aggregates.</li> </ul>"},{"location":"en/rules-of-ddd/rules-of-ddd/#avoid-reuse","title":"Avoid reuse:","text":"<ul> <li>Create an API for each frontend scenario.</li> <li>Create separate input and output entities (RequestDto, ResponseDto) for each API.</li> <li>Create separate commands for each operation.</li> </ul>"},{"location":"en/rules-of-ddd/rules-of-ddd/#rules-of-domain-driven-design_2","title":"Rules of Domain Driven Design","text":""},{"location":"en/rules-of-ddd/rules-of-ddd/#no-cross-domain-allowed_1","title":"No cross-domain allowed:","text":"<ul> <li>The change of entity fields must be operated by the entity's own methods.</li> <li>There should be no direct or indirect reference relationship between aggregate roots.</li> <li>Each query should not associate multiple aggregates.</li> </ul>"},{"location":"en/rules-of-ddd/rules-of-ddd/#avoid-reuse_1","title":"Avoid reuse:","text":"<ul> <li>Create an API for each frontend scenario.</li> <li>Create separate input and output entities (RequestDto, ResponseDto) for each API.</li> <li>Create separate commands for each operation.</li> </ul>"},{"location":"en/service-discovery/service-discovery/","title":"Service Discovery","text":"<p>When you need to initiate inter-service calls, you can choose to use the service discovery feature. The framework provides service discovery based on k8s by default and also supports the <code>Microsoft.Extensions.ServiceDiscovery</code> component provided by Microsoft.</p>"},{"location":"en/service-discovery/service-discovery/#using-netcorepalservicediscovery","title":"Using NetCorePalServiceDiscovery","text":"<ol> <li> <p>Add dependency packages</p> <pre><code>dotnet add package NetCorePal.Extensions.ServiceDiscovery.Abstractions\ndotnet add package NetCorePal.Extensions.ServiceDiscovery.K8s   // If needed, add this package to support service discovery in k8s environments\n</code></pre> </li> <li> <p>Configure service discovery in <code>Program.cs</code></p> <pre><code>// Register NetCorePalServiceDiscovery\nbuilder.Services.AddNetCorePalServiceDiscoveryClient()\n    .AddK8sServiceDiscovery(); // If needed, add k8s service discovery support\n</code></pre> </li> <li> <p>Register <code>HttpClient</code></p> </li> </ol> <p><code>csharp     // Register HttpClient and configure service discovery     builder.Services.AddHttpClient&lt;CatalogClient&gt;()         .AddNetCorePalServiceDiscovery(\"catalog\");</code></p>"},{"location":"en/service-discovery/service-discovery/#using-microsoftextensionsservicediscovery","title":"Using Microsoft.Extensions.ServiceDiscovery","text":"<ol> <li> <p>Add dependency packages</p> <pre><code>dotnet add package Microsoft.Extensions.ServiceDiscovery\n</code></pre> </li> <li> <p>Configure service discovery in <code>Program.cs</code></p> <pre><code>// Register Microsoft.Extensions.ServiceDiscovery\nbuilder.Services.AddServiceDiscovery()\n    .AddConfigurationServiceEndpointProvider();\n</code></pre> </li> <li> <p>Register <code>HttpClient</code></p> </li> </ol> <p><code>csharp     // Register HttpClient and configure service discovery     builder.Services.AddHttpClient&lt;CatalogClient&gt;()         .AddServiceDiscovery();</code></p> <p>For more information about <code>Microsoft.Extensions.ServiceDiscovery</code>, see the official documentation: Microsoft.Extensions.ServiceDiscovery</p>"},{"location":"en/service-discovery/service-discovery/#recommended-usage","title":"Recommended Usage","text":"<p>It is recommended to use the <code>Refit</code> component to simplify the use of <code>HttpClient</code>, and combine it with the <code>Polly</code> component to achieve retry, circuit breaker, and other functionalities.</p> <ol> <li> <p>Add dependency packages</p> <pre><code>dotnet add package Refit.HttpClientFactory\ndotnet add package Microsoft.Extensions.Http.Resilience\n</code></pre> </li> <li> <p>Define the remote service interface</p> </li> </ol> <pre><code>public interface ICatalogApi\n{\n   [Get(\"/api/v1/catalog\")]\n   Task&lt;IEnumerable&lt;CatalogItem&gt;&gt; GetCatalogItemsAsync();\n}\n</code></pre> <ol> <li> <p>Register <code>HttpClient</code></p> <pre><code>RefitSettings refitSettings = new RefitSettings();\nvar jsonOptions = new JsonSerializerOptions();\njsonOptions.AddNetCorePalJsonConverters();   // Configure NetCorePalJsonConverters\nvar serializer = new SystemTextJsonContentSerializer(jsonOptions); \n\nbuilder.Services.AddRefitClient&lt;ICatalogApi&gt;(_ =&gt; refitSettings)  // Add RefitClient\n    .ConfigureHttpClient(p =&gt; p.BaseAddress = new Uri(\"https://catalog:5000\"))\n    .AddPalServiceDiscovery  or use Microsoft.Extensions.ServiceDiscovery\n    //.AddNetCorePalServiceDiscovery(\"catalog\")   // Use NetCorePalServiceDiscovery \n    .AddStandardResilienceHandler(); // Add standard resilience policy\n</code></pre> </li> </ol>"},{"location":"en/sharding/data-sharding/","title":"Data Sharding Solution","text":"<p>To enable the system to scale to larger data capacities, we have integrated sharding-core as the data sharding solution.</p> <p><code>sharding-core</code> is an open-source sharding framework based on <code>EntityFrameworkCore</code>. It supports multiple database types and sharding strategies. As a client-side solution, it has low requirements for database infrastructure, making it suitable for most scenarios. It supports various sharding strategies, including range sharding, hash sharding, and composite sharding. It also supports dynamic sharding and dynamic routing, allowing flexible adjustments based on business needs.</p> <p>The workflow of <code>sharding-core</code> is shown in the following diagram:</p> <p></p>"},{"location":"en/sharding/data-sharding/#supported-scenarios","title":"Supported Scenarios","text":"<ul> <li>Read-Write Separation</li> <li>Table Sharding</li> <li>Database Sharding</li> <li>Tenant Mode</li> </ul> <p><code>Read-Write Separation</code>, <code>Table Sharding</code>, and <code>Database Sharding</code> can be combined as needed.</p>"},{"location":"en/sharding/data-sharding/#official-documentation","title":"Official Documentation","text":"<p>For more information about <code>sharding-core</code>, refer to the official documentation: https://xuejmnet.github.io/sharding-core-doc/</p>"},{"location":"en/sharding/data-sharding/#notes","title":"Notes","text":""},{"location":"en/sharding/data-sharding/#lazy-loading-compatibility","title":"Lazy Loading Compatibility","text":"<p>You need to add <code>o.UseEntityFrameworkCoreProxies = true;</code>.</p> <p>See: https://github.com/dotnetcore/sharding-core/issues/259</p>"},{"location":"en/sharding/read-write-separation/","title":"Read-Write Separation","text":"<p>As the number of system users increases, the query pressure on the system grows. Using a read-write separation solution can effectively alleviate database query pressure.</p>"},{"location":"en/sharding/read-write-separation/#prerequisites","title":"Prerequisites","text":"<p><code>sharding-core</code> does not implement data synchronization to read-only databases. To adopt a read-write separation solution, you need to establish a database data synchronization mechanism, such as <code>MySQL</code>'s <code>binlog</code> synchronization or <code>MSSQL</code>'s <code>Always On</code> feature.</p>"},{"location":"en/sharding/read-write-separation/#configuring-read-write-separation","title":"Configuring Read-Write Separation","text":"<p>To use <code>sharding-core</code>, you need to modify the registration method of <code>DbContext</code>.</p> <ol> <li> <p>Add the <code>NetCorePal.Extensions.ShardingCore</code> package:</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   Or use PackageReference:   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>Add the <code>IShardingCore</code> interface to your <code>DbContext</code> type:</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    // Your Code\n}\n</code></pre> </li> <li> <p>Create <code>ApplicationDbContextCreator</code>:</p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>Remove the <code>AddDbContext</code> registration method:     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>Use <code>AddShardingDbContext</code> for registration. The following configuration sets up two read-only databases for the data source named <code>ds0</code>:</p> <pre><code>builder.Services.AddShardingDbContext&lt;ApplicationDbContext&gt;()\n        .UseConfig(op =&gt;\n        {\n            op.ThrowIfQueryRouteNotMatch = true;\n            op.UseShardingQuery((conStr, builder) =&gt;\n            {\n                builder.UseMySql(conStr,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.UseShardingTransaction((con, builder) =&gt;\n            {\n                builder.UseMySql(con,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.AddDefaultDataSource(\"ds0\", builder.Configuration.GetConnectionString(\"Mysql\")); // Configure write database\n            op.AddReadWriteSeparation(sp =&gt; new Dictionary&lt;string, IEnumerable&lt;string&gt;&gt;    // Configure read-only databases\n                {\n                    {\n                        \"ds0\",\n                        [builder.Configuration.GetConnectionString(\"Mysql-Read1\"), builder.Configuration.GetConnectionString(\"Mysql-Read2\")]\n                    }\n                },\n                readStrategyEnum: ReadStrategyEnum.Loop,\n                defaultEnableBehavior: ReadWriteDefaultEnableBehavior.DefaultDisable,\n                defaultPriority: 10,\n                readConnStringGetStrategy: ReadConnStringGetStrategyEnum.LatestFirstTime\n            );\n        })\n        .ReplaceService&lt;IDbContextCreator, ApplicationDbContextCreator&gt;()\n        .AddShardingCore();\n</code></pre> </li> </ol>"},{"location":"en/sharding/read-write-separation/#reference-documentation","title":"Reference Documentation","text":"<p>For more configurations and usage, refer to:</p> <p>https://xuejmnet.github.io/sharding-core-doc/read-write/configure</p>"},{"location":"en/sharding/sharding-database/","title":"Database Sharding","text":"<p>When the performance of a single database cannot meet the requirements, we can consider distributing the data across multiple databases.</p>"},{"location":"en/sharding/sharding-database/#about-transactions","title":"About Transactions","text":"<p>Database sharding introduces cross-database transaction issues. Especially for local messages of integration events, it is necessary to ensure that the publication records of integration events are saved in the same data source as the business data within the same command execution scope.</p> <p>Key considerations include:</p> <ol> <li>When operating on data from the same shard within the same command, the publication records of integration events can be saved in the same data source as the business data.</li> <li>When a single request context involves different shards, <code>sharding-core</code> will open separate transactions for each corresponding data source.</li> </ol> <p>For more details on database sharding transactions, refer to: https://xuejmnet.github.io/sharding-core-doc/adv/transaction/</p>"},{"location":"en/sharding/sharding-database/#configuring-database-sharding","title":"Configuring Database Sharding","text":"<ol> <li> <p>Add the <code>NetCorePal.Extensions.ShardingCore</code> package:</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   Or use PackageReference:   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>Add the <code>IShardingCore</code> interface to your <code>DbContext</code> type:</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    // Your Code\n}\n</code></pre> </li> <li> <p>Create <code>ApplicationDbContextCreator</code>:</p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>Remove the <code>AddDbContext</code> registration method:     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>Add the <code>NetCorePal.Extensions.DistributedTransactions.CAP.MySql</code> package to support CAP message publishing across shards:     <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.MySql\n</code></pre>     Add the <code>IMySqlCapDataStorage</code> interface to <code>ApplicationDbContext</code>:     <pre><code>public partial class ApplicationDbContext : AppDbContextBase, \n    IShardingCore, IMySqlCapDataStorage\n{\n     // Your code\n}\n</code></pre></p> <p>Modify <code>AddCap</code> configuration to use <code>UseNetCorePalStorage</code>: <pre><code>services.AddCap(op =&gt;\n{\n    op.UseNetCorePalStorage&lt;ShardingDatabaseDbContext&gt;();\n    op.UseRabbitMQ(p =&gt;\n    {\n     p.HostName = _rabbitMqContainer.Hostname;\n     p.UserName = \"guest\";\n     p.Password = \"guest\";\n     p.Port = _rabbitMqContainer.GetMappedPublicPort(5672);\n     p.VirtualHost = \"/\";\n  });\n});\n</code></pre></p> <p>MS SqlServer and PostgreSql can also use corresponding packages for support: <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.SqlServer\ndotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.PostgreSql\n</code></pre></p> </li> <li> <p>Configure <code>MediatR</code> to add <code>AddShardingBehavior</code> before <code>AddUnitOfWorkBehaviors</code>:</p> <pre><code>services.AddMediatR(cfg =&gt;\n                 cfg.RegisterServicesFromAssembly(typeof(ShardingDatabaseDbContextTests).Assembly)\n                     .AddShardingBehavior()    // Add before `AddUnitOfWorkBehaviors`\n                     .AddUnitOfWorkBehaviors());\n</code></pre> </li> <li> <p>Add shard routing configuration for entities. Database sharding requires implementing the <code>NetCorePalVirtualDataSourceRoute</code> base class:</p> <pre><code>public class OrderVirtualDataSourceRoute(IOptions&lt;NetCorePalShardingCoreOptions&gt; options)\n : NetCorePalVirtualDataSourceRoute&lt;Order,\n     string&gt;(options)\n{\n    public override void Configure(EntityMetadataDataSourceBuilder&lt;Order&gt; builder)\n    {\n        builder.ShardingProperty(o =&gt; o.Area); // Return sharding field\n    }\n\n    protected override string GetDataSourceName(object? shardingKey)\n    {\n        return shardingKey == null ? string.Empty : shardingKey.ToString()!; // Implement custom sharding logic\n    }\n}\n</code></pre> </li> <li> <p>Configure <code>ShardingCore</code>:</p> <pre><code>services.AddShardingDbContext&lt;ShardingDatabaseDbContext&gt;()\n                 .UseNetCorePal(op =&gt;\n                 {\n                     op.AllDataSourceNames = [\"Db0\", \"Db1\"];\n                     op.DefaultDataSourceName = \"Db0\";\n                 })\n                 .UseRouteConfig(op =&gt;\n                 {\n                     op.AddCapShardingDataSourceRoute();  // Add default PublishedMessage sharding route\n                     op.AddShardingDataSourceRoute&lt;OrderVirtualDataSourceRoute&gt;();  // Add entity sharding route\n                 }).UseConfig(op =&gt;\n                 {\n                     op.ThrowIfQueryRouteNotMatch = true;\n                     op.UseShardingQuery((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.UseShardingTransaction((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.AddDefaultDataSource(\"Db0\", _mySqlContainer0.GetConnectionString());\n                     op.AddExtraDataSource(_ =&gt; new Dictionary&lt;string, string&gt;\n                     {\n                         { \"Db1\", _mySqlContainer1.GetConnectionString() }\n                     });\n                 })\n                 .ReplaceService&lt;IDbContextCreator, ShardingDatabaseDbContextCreator&gt;()\n                 .AddShardingCore();\n</code></pre> </li> </ol>"},{"location":"en/sharding/sharding-database/#advanced","title":"Advanced","text":"<p>For more advanced database sharding configurations, refer to the official documentation: https://xuejmnet.github.io/sharding-core-doc/sharding-data-source/init/</p>"},{"location":"en/sharding/sharding-table/","title":"Table Sharding","text":"<p>When the data volume of a business table becomes too large and affects query performance, table sharding can be used to split the data. <code>sharding-core</code> supports sharding by <code>time</code>, <code>modulus</code>, and more.</p>"},{"location":"en/sharding/sharding-table/#configuring-table-sharding","title":"Configuring Table Sharding","text":"<ol> <li> <p>Add the <code>NetCorePal.Extensions.ShardingCore</code> package:</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   Or use PackageReference:   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>Add the <code>IShardingCore</code> interface to your <code>DbContext</code> type:</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    // Your Code\n}\n</code></pre> </li> <li> <p>Create <code>ApplicationDbContextCreator</code>:</p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>Remove the <code>AddDbContext</code> registration method:     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>Add table sharding configuration:</p> <pre><code>public class OrderVirtualTableRoute : AbstractSimpleShardingMonthKeyDateTimeVirtualTableRoute&lt;Order&gt;\n{\n    public override DateTime GetBeginTime()\n    {\n        return DateTime.Now.AddMonths(-3);\n    }\n\n    public override void Configure(EntityMetadataTableBuilder&lt;Order&gt; builder)\n    {\n        builder.ShardingProperty(o =&gt; o.CreationTime);\n    }\n\n    public override bool AutoCreateTableByTime()\n    {\n        return true;\n    }\n}\n</code></pre> </li> <li> <p>Use <code>AddShardingDbContext</code> to register <code>ApplicationDbContext</code>:</p> <pre><code>builder.Services.AddShardingDbContext&lt;ApplicationDbContext&gt;()\n        .UseRouteConfig(op =&gt;\n        {\n           op.AddShardingTableRoute&lt;OrderVirtualTableRoute&gt;(); // Register table sharding configuration\n        })\n        .UseConfig(op =&gt;\n        {\n            op.ThrowIfQueryRouteNotMatch = true;\n            op.UseShardingQuery((conStr, builder) =&gt;\n            {\n                builder.UseMySql(conStr,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.UseShardingTransaction((con, builder) =&gt;\n            {\n                builder.UseMySql(con,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.AddDefaultDataSource(\"ds0\", builder.Configuration.GetConnectionString(\"Mysql\")); // Configure write database\n        })\n        .ReplaceService&lt;IDbContextCreator, ApplicationDbContextCreator&gt;()\n        .AddShardingCore();\n</code></pre> </li> </ol>"},{"location":"en/sharding/sharding-table/#advanced","title":"Advanced","text":"<p>For more advanced table sharding configurations, refer to the official documentation: https://xuejmnet.github.io/sharding-core-doc/sharding-table/init/</p>"},{"location":"en/sharding/sharding-tenant/","title":"Tenant-Based Database Sharding","text":"<p>Tenant-based database sharding is a more specific database sharding strategy. In this scenario, most business operations are confined to the tenant's scope, allowing transactions to be committed within the same transaction.</p>"},{"location":"en/sharding/sharding-tenant/#configuring-database-sharding","title":"Configuring Database Sharding","text":"<ol> <li> <p>Add the <code>NetCorePal.Extensions.ShardingCore</code> package:</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   Or use PackageReference:   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>Add the <code>IShardingCore</code> interface to your <code>DbContext</code> type:</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    // Your Code\n}\n</code></pre> </li> <li> <p>Create <code>ApplicationDbContextCreator</code>:</p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>Remove the <code>AddDbContext</code> registration method:     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>Add the <code>NetCorePal.Extensions.DistributedTransactions.CAP.MySql</code> package to support CAP's message publishing for sharded databases:     <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.MySql\n</code></pre>     Add the <code>IMySqlCapDataStorage</code> interface to <code>ApplicationDbContext</code>:     <pre><code>public partial class ApplicationDbContext : AppDbContextBase, \n  IShardingCore, IMySqlCapDataStorage\n{\n   // Your Code\n}\n</code></pre></p> <p>Modify the <code>AddCap</code> code to configure <code>UseNetCorePalStorage</code>: <pre><code>services.AddCap(op =&gt;\n{\n   op.UseNetCorePalStorage&lt;ShardingDatabaseDbContext&gt;(); // Configure UseNetCorePalStorage to support sharding\n   op.UseRabbitMQ(p =&gt;\n   {\n      p.HostName = _rabbitMqContainer.Hostname;\n      p.UserName = \"guest\";\n      p.Password = \"guest\";\n      p.Port = _rabbitMqContainer.GetMappedPublicPort(5672);\n      p.VirtualHost = \"/\";\n   });\n});\n</code></pre></p> <p>MS SqlServer and PostgreSql can also use corresponding packages for support: <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.SqlServer\ndotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.PostgreSql\n</code></pre></p> </li> <li> <p>Configure <code>MediatR</code> to add <code>AddTenantShardingBehavior</code>. Note that it must be added before <code>AddUnitOfWorkBehaviors</code>:</p> <pre><code>services.AddMediatR(cfg =&gt;\n                 cfg.RegisterServicesFromAssembly(typeof(ShardingDatabaseDbContextTests).Assembly)\n                     .AddTenantShardingBehavior()    // Add before `AddUnitOfWorkBehaviors`\n                     .AddUnitOfWorkBehaviors());\n</code></pre> </li> <li> <p>Add sharding route configuration for sharded entities. Sharding requires implementing the base class <code>NetCorePalTenantVirtualDataSourceRoute</code>:</p> <pre><code>public class OrderTenantVirtualDataSourceRoute(\n     IOptions&lt;NetCorePalShardingCoreOptions&gt; options,\n     ITenantDataSourceProvider provider) : \n     NetCorePalTenantVirtualDataSourceRoute&lt;Order, string&gt;(options, provider)\n{\n     public override void Configure(EntityMetadataDataSourceBuilder&lt;Order&gt; builder)\n     {\n          builder.ShardingProperty(p =&gt; p.TenantId); // Return TenantId\n     }\n}\n</code></pre> </li> <li> <p>Configure ShardingCore:</p> <pre><code>services.AddShardingDbContext&lt;ShardingDatabaseDbContext&gt;()\n                 .UseNetCorePal(op =&gt;  // Configure sharding names consistent with UseConfig\n                 {\n                     op.AllDataSourceNames = [\"Db0\", \"Db1\"];\n                     op.DefaultDataSourceName = \"Db0\";\n                 })\n                 .UseRouteConfig(op =&gt;\n                 {\n                     op.AddCapShardingDataSourceRoute();  // Add default PublishedMessage sharding route\n                     op.AddShardingDataSourceRoute&lt;OrderTenantVirtualDataSourceRoute&gt;();  // Add entity sharding route\n                 }).UseConfig(op =&gt;\n                 {\n                     op.ThrowIfQueryRouteNotMatch = true;\n                     op.UseShardingQuery((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.UseShardingTransaction((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.AddDefaultDataSource(\"Db0\", _mySqlContainer0.GetConnectionString());\n                     op.AddExtraDataSource(_ =&gt; new Dictionary&lt;string, string&gt;\n                     {\n                         { \"Db1\", _mySqlContainer1.GetConnectionString() }\n                     });\n                 })\n                 .ReplaceService&lt;IDbContextCreator, ShardingDatabaseDbContextCreator&gt;()\n                 .AddShardingCore();\n</code></pre> </li> <li> <p>Configure tenant context support by adding the <code>NetCorePal.Context.Shared</code> package:</p> <p><pre><code> dotnet add package NetCorePal.Context.Shared\n</code></pre> Register tenant context and CAP context processors: <pre><code>services.AddTenantContext().AddCapContextProcessor();\n</code></pre></p> </li> <li> <p>Configure CAP context support:</p> <pre><code>services.AddIntegrationEvents(typeof(ShardingTenantDbContext))\n                 .UseCap&lt;ShardingTenantDbContext&gt;(capbuilder =&gt;\n                 {\n                     capbuilder.AddContextIntegrationFilters(); // Add tenant context filters\n                     capbuilder.RegisterServicesFromAssemblies(typeof(ShardingTenantDbContext));\n                 });\n</code></pre> </li> <li> <p>Implement <code>ITenantDataSourceProvider</code> and register it:</p> <pre><code>public class MyTenantDataSourceProvider : ITenantDataSourceProvider\n{\n   public string GetDataSourceName(string tenantId)\n   {\n       return \"Db\" + (long.Parse(tenantId) % 10);  // Implement tenantId to data source name mapping logic\n   }\n}\n</code></pre> <p>Register the tenant data source provider:   <pre><code>services.AddSingleton&lt;ITenantDataSourceProvider, MyTenantDataSourceProvider&gt;();\n</code></pre></p> </li> </ol>"},{"location":"en/sharding/sharding-tenant/#using-tenant-context","title":"Using Tenant Context","text":"<p>After configuration, when operating tenant data, initialize the tenant context before issuing a <code>Command</code> using <code>IContextAccessor</code>:</p> <pre><code>// Get tenantId from user request\nvar tenantId = currentUser.TenantId;\nvar contextAccessor = scope.ServiceProvider.GetRequiredService&lt;IContextAccessor&gt;();\ncontextAccessor.SetContext(new TenantContext(tenantId));\n</code></pre> <p>It is generally recommended to set the tenant context in middleware:</p> <pre><code>public class TenantMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public TenantMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context, IContextAccessor contextAccessor)\n    {\n        var tenantId = context.Request.Headers[\"TenantId\"].ToString();\n        if (!string.IsNullOrEmpty(tenantId))\n        {\n            contextAccessor.SetContext(new TenantContext(tenantId));\n        }\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"en/sharding/sharding-tenant/#advanced","title":"Advanced","text":"<p>For more database sharding configurations, refer to the official documentation: https://xuejmnet.github.io/sharding-core-doc/sharding-data-source/init/</p>"},{"location":"en/transactions/transactions/","title":"Transactions","text":""},{"location":"en/transactions/transactions/#domain-events-and-transactions","title":"Domain Events and Transactions","text":"<p><code>Domain events</code> and <code>commands</code> run in the same database transaction, achieving <code>strong consistency</code>. If a <code>domain event handler</code> throws an exception, the transaction will roll back, and the operations of both the <code>command</code> and the <code>domain event</code> will roll back.</p>"},{"location":"en/transactions/transactions/#integration-events-and-transactions","title":"Integration Events and Transactions","text":"<p>The handling of <code>integration events</code> currently achieves <code>eventual consistency</code> based on the <code>Outbox pattern</code> of the CAP framework.</p> <p>The saving of <code>integration events</code> and <code>commands</code> run in the same database transaction. Once the transaction is committed, the <code>integration events</code> will also be saved to the database by the <code>CAP</code> component and sent to the <code>MQ</code>.</p> <p>The handling of <code>integration events</code> by the <code>integration event handler</code> is in a different transaction from the <code>command</code> that initiated it. If the <code>integration event handler</code> throws an exception, the <code>integration event</code> will be recorded and retried by the <code>CAP</code> component, and the operations of the <code>command</code> will not roll back.</p>"},{"location":"en/transactions/transactions/#transaction-lifecycle","title":"Transaction Lifecycle","text":"<p>The following diagram shows the lifecycle of a transaction:</p> <p></p> <p>The framework starts a transaction before the <code>CommandHandler</code> begins. The <code>DomainEvent</code> issued by the <code>CommandHandler</code> operating on the domain model will be handled by the <code>DomainEventHandler</code>. After processing, the transaction will be committed. If an exception occurs in the <code>CommandHandler</code> or <code>DomainEventHandler</code>, the transaction will roll back.</p> <p>If the <code>DomainEventHandler</code> converts the <code>DomainEvent</code> to an <code>IntegrationEvent</code>, the <code>IntegrationEvent</code> will be persisted to the database in the current database transaction. If the persistence fails, an exception will be thrown, and the transaction will roll back.</p> <p>If the database transaction is successfully committed, the execution result of the <code>CommandHandler</code> will be returned, the current request processing will be completed, and the <code>IntegrationEvent</code> will be published to the message queue.</p> <p>The <code>IntegrationEvent</code> will be handled by the <code>IntegrationEventHandler</code> that subscribes to it. After processing, the transaction will be committed. If an exception occurs in the <code>IntegrationEventHandler</code>, the framework will log the exception and attempt to retry. By default, it will retry 10 times with a certain interval between each retry.</p>"},{"location":"zh/about-ai/","title":"\u5173\u4e8eAI\u5de5\u5177","text":"<p>\u57fa\u4e8e\u672c\u9879\u76ee\u91c7\u7528\u7684\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u6bcf\u4e2a\u7c7b\u578b\u4f8b\u5982<code>\u9886\u57df\u6a21\u578b</code>\u3001<code>\u547d\u4ee4\u5904\u7406\u5668</code>\u3001<code>\u4e8b\u4ef6\u5904\u7406\u5668</code>\u7b49\u7b49\u90fd\u6709\u660e\u786e\u7684\u804c\u8d23\u548c\u80fd\u529b\uff0c\u8fd9\u5bf9AI\u5de5\u5177\u7684\u8f85\u52a9\u4f7f\u7528\u975e\u5e38\u53cb\u597d\uff0cAI\u5de5\u5177\u53ef\u4ee5\u6839\u636e\u4f60\u7f16\u5199\u4ee3\u7801\u7684\u6587\u4ef6\u6a21\u578b\u548c\u4e0a\u4e0b\u6587\u51c6\u786e\u63a8\u65ad\u51fa\u610f\u56fe\u5e76\u7ed9\u4e88\u4ee3\u7801\u8865\u5168\u63d0\u793a\uff0c\u5e76\u4e14\u968f\u7740\u4f60\u7684\u9879\u76ee\u4ee3\u7801\u7684\u589e\u591a\uff0cAI\u5de5\u5177\u7684\u667a\u80fd\u7a0b\u5ea6\u4f1a\u8d8a\u6765\u8d8a\u9ad8\u3002</p> <p>\u56e0\u6b64\uff0c\u975e\u5e38\u63a8\u8350\u4f7f\u7528AI\u5de5\u5177\u6765\u8f85\u52a9\u7f16\u5199\u4ee3\u7801\uff0c\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u7f16\u7801\u6548\u7387\u3002</p>"},{"location":"zh/about-ai/#_1","title":"\u4e00\u4e9b\u6280\u5de7","text":"<p>\u4e0b\u9762\u4e00\u4e9b\u6280\u5de7\u53ef\u4ee5\u5e2e\u52a9AI\u5de5\u5177\u66f4\u597d\u5730\u8f85\u52a9\u4f60\u7f16\u5199\u4ee3\u7801\uff1a</p> <ul> <li>\u4f7f\u7528\u5e26\u6709\u4e1a\u52a1\u542b\u4e49\u7684\u7c7b\u578b\u547d\u540d</li> <li>\u4f7f\u7528\u5e26\u6709\u660e\u786e\u529f\u80fd\u542b\u4e49\u7684\u65b9\u6cd5\u547d\u540d</li> <li>\u9002\u5f53\u7684\u6ce8\u91ca</li> </ul>"},{"location":"zh/about-ai/#ai_1","title":"AI\u5de5\u5177\u63a8\u8350","text":"<p>\u63a8\u8350\u4f7f\u7528 GitHub Copilot \u6765\u4f5c\u4e3a\u4ee3\u7801\u8f85\u52a9\u5de5\u5177\uff0c\u5b83\u652f\u6301\u591a\u79cd\u7f16\u8f91\u5668\uff0c\u4f8b\u5982<code>Visual Studio Code</code>\u3001<code>Visual Studio</code>\u3001<code>JetBrains Rider</code>\u7b49\u7b49\u3002</p>"},{"location":"zh/aspnetcore/exception-handling/","title":"\u5f02\u5e38\u5904\u7406","text":""},{"location":"zh/aspnetcore/exception-handling/#knownexception","title":"KnownException","text":"<p>\u6211\u4eec\u5728\u5305<code>NetCorePal.Extensions.Primitives</code>\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f02\u5e38\u7c7b<code>KnownException</code>\uff0c\u7528\u4e8e\u8868\u793a\u5df2\u77e5\u5f02\u5e38\uff0c\u4f7f\u5f97\u7cfb\u7edf\u53ef\u4ee5\u66f4\u53cb\u597d\u7684\u65b9\u5f0f\u54cd\u5e94\u5f02\u5e38\u3002</p> <p><code>KnownException</code>\u5b9e\u73b0\u4e86\u63a5\u53e3 <code>IKnownException</code>\uff0c\u53ef\u4ee5\u643a\u5e26<code>Message</code>\u3001<code>ErrorCode</code>\u3001<code>ErrorData</code>\u7b49\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>public interface IKnownException\n{\n    string Message { get; }\n\n    int ErrorCode { get; }\n\n    IEnumerable&lt;object&gt; ErrorData { get; }\n}\n</code></pre>"},{"location":"zh/aspnetcore/exception-handling/#knownexceptionhandlemiddleware","title":"\u5f02\u5e38\u5904\u7406\u4e2d\u95f4\u4ef6 KnownExceptionHandleMiddleware","text":"<p>\u6211\u4eec\u5728\u5305<code>NetCorePal.Extensions.AspNetCore</code>\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u4e2d\u95f4\u4ef6<code>KnownExceptionHandleMiddleware</code>\uff0c\u7528\u4e8e\u5904\u7406\u5f02\u5e38\u3002</p> <p><code>KnownExceptionHandleMiddleware</code>\u4f1a\u6355\u83b7\u5df2\u77e5\u5f02\u5e38\uff0c\u5e76\u5c06\u5f02\u5e38\u4fe1\u606f\u8f6c\u6362\u4e3a<code>ResponseData</code>\u5bf9\u8c61\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u4ece\u800c\u4fdd\u6301\u6b63\u5e38\u54cd\u5e94\u4e0e\u5f02\u5e38\u54cd\u5e94\u5177\u6709\u76f8\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u65b9\u4fbf\u524d\u7aef\u5904\u7406\u3002</p> <p>\u5982\u679c\u5f02\u5e38\u4e0d\u662f\u5df2\u77e5\u5f02\u5e38\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4ee5\u5c4f\u853d\u654f\u611f\u4fe1\u606f\uff0c\u907f\u514d\u66b4\u9732\u7cfb\u7edf\u5185\u90e8\u5f02\u5e38\u3002</p> <p>\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff0c\u5728<code>Program.cs</code>\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>var builder = WebApplication.CreateBuilder(args);\n\n//Add Other Services\n\nvar app = builder.Build();\napp.UseKnownExceptionHandler();\n</code></pre>"},{"location":"zh/aspnetcore/exception-handling/#knownexceptionhandlemiddlewareoptions","title":"KnownExceptionHandleMiddlewareOptions","text":"<p><code>KnownExceptionHandleMiddleware</code>\u7684\u914d\u7f6e\u9009\u9879\u5982\u4e0b\uff1a</p> <ul> <li><code>KnownExceptionStatusCode</code>: \u5df2\u77e5\u5f02\u5e38\u54cd\u5e94\u72b6\u6001\u7801\uff0c\u9ed8\u8ba4\u4e3a<code>HttpStatusCode.OK</code>\uff0c\u5373<code>200</code>;</li> <li><code>UnknownExceptionStatusCode</code>: \u975e\u5df2\u77e5\u5f02\u5e38\u54cd\u5e94\u72b6\u6001\u7801\uff0c\u9ed8\u8ba4\u4e3a<code>HttpStatusCode.InternalServerError</code>,\u5373<code>500</code>;</li> <li><code>UnknownExceptionMessage</code>: \u975e\u5df2\u77e5\u5f02\u5e38\u54cd\u5e94\u6d88\u606f\uff0c\u9ed8\u8ba4\u4e3a<code>\"\u672a\u77e5\u9519\u8bef\"</code>;</li> <li><code>UnknownExceptionCode</code>: \u975e\u5df2\u77e5\u5f02\u5e38\u54cd\u5e94\u9519\u8bef\u7801\uff0c\u9ed8\u8ba4\u4e3a<code>99999</code>;</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>public class KnownExceptionHandleMiddlewareOptions\n{\n    public HttpStatusCode KnownExceptionStatusCode { get; set; } = HttpStatusCode.OK;\n    public HttpStatusCode UnknownExceptionStatusCode { get; set; } = HttpStatusCode.InternalServerError;\n    public string UnknownExceptionMessage { get; set; } = \"\u672a\u77e5\u9519\u8bef\";\n    public int UnknownExceptionCode { get; set; } = 99999;\n}\n</code></pre>"},{"location":"zh/aspnetcore/exception-handling/#_2","title":"\u52a8\u6001\u5f02\u5e38\u5904\u7406\u914d\u7f6e","text":"<p><code>KnownExceptionHandleMiddleware</code>\u652f\u6301\u52a8\u6001\u914d\u7f6e\uff0c\u901a\u8fc7\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a</p> <pre><code>Func&lt;HttpContext, KnownExceptionHandleMiddlewareOptions&gt;\n</code></pre> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5f53\u8bf7\u6c42\u8def\u5f84\u4ee5<code>/api/internal</code>\u5f00\u5934\u65f6\uff0c\u4f7f\u7528<code>option1</code>\uff0c\u5426\u5219\u4f7f\u7528<code>option2</code>\uff1a</p> <pre><code>var app = builder.Build();\n\nvar option1 = new KnownExceptionHandleMiddlewareOptions {\n    KnownExceptionStatusCode = HttpStatusCode.InternalServerError,\n    UnknownExceptionStatusCode = HttpStatusCode.InternalServerError,\n    UnknownExceptionMessage = \"\u672a\u77e5\u9519\u8bef\",\n    UnknownExceptionCode = 99999\n};\nvar option2 = new KnownExceptionHandleMiddlewareOptions {\n    KnownExceptionStatusCode = HttpStatusCode.OK,\n    UnknownExceptionStatusCode = HttpStatusCode.BadRequest,\n    UnknownExceptionMessage = \"\u672a\u77e5\u9519\u8bef\",\n    UnknownExceptionCode = 10000\n};\n\napp.UseKnownExceptionHandler(httpContext =&gt; {\n    if(httpContext.Request.Path.StartsWithSegments(\"/api/internal\")) {\n        return option1;\n    }\n    else {\n        return option2;\n    }\n});\n</code></pre>"},{"location":"zh/aspnetcore/json/","title":"Json\u5e8f\u5217\u5316","text":""},{"location":"zh/aspnetcore/json/#_1","title":"\u4ecb\u7ecd","text":"<p>\u6846\u67b6\u5185\u7f6e\u4e86\u5f3a\u7c7b\u578bID<code>StronglyTypedId</code>\u3001<code>RowVersion</code>\u3001<code>UpdateTime</code>\u7b49\u7c7b\u578b\u6765\u8f85\u52a9\u5efa\u6a21\uff0c\u4e3a\u4e86\u4f7f\u8fd9\u4e9b\u7c7b\u578b\u5728Json\u5e8f\u5217\u5316\u66f4\u597d\u5730\u652f\u6301\uff0c\u6846\u67b6\u63d0\u4f9b\u4e86<code>JsonConverter</code>\u6765\u652f\u6301\u8fd9\u4e9b\u7c7b\u578b\u7684\u5e8f\u5217\u5316\u3002</p> <p>\u540c\u65f6\u652f\u6301\u4e86<code>Newtonsoft.Json</code>\u548c<code>System.Text.Json</code>\u4e24\u79cdJson\u5e8f\u5217\u5316\u5e93\u3002</p>"},{"location":"zh/aspnetcore/json/#_2","title":"\u5982\u4f55\u4f7f\u7528","text":""},{"location":"zh/aspnetcore/json/#systemtextjson","title":"System.Text.Json","text":"<p>\u5728<code>Program.cs</code>\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>builder.Services.AddMvc()\n  .AddNetCorePalSystemTextJson();\n</code></pre>"},{"location":"zh/aspnetcore/json/#newtonsoftjson","title":"Newtonsoft.Json","text":"<p>\u5728<code>Program.cs</code>\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>builder.Services.AddMvc()\n  .AddNetCorePalNewtonsoftJson();\n</code></pre> <p>\u5907\u6ce8\uff1a <code>Newtonsoft.Json</code>\u7684\u652f\u6301\u9700\u8981\u5f15\u7528<code>NetCorePal.Extensions.NewtonsoftJson</code>\u5305\u3002</p>"},{"location":"zh/aspnetcore/json/#_3","title":"\u5176\u5b83\u573a\u666f","text":"<p>\u5982\u679c\u9700\u8981\u5728\u5176\u5b83\u573a\u666f\u4e2d\u4f7f\u7528\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>AddNetCorePalJsonConverters</code>\u6269\u5c55\u65b9\u6cd5\u6dfb\u52a0<code>EntityIdJsonConverterFactory</code>\u3001<code>RowVersionJsonConverter</code>\u3001<code>UpdateTimeJsonConverter</code>\u7b49Converter\u3002</p>"},{"location":"zh/aspnetcore/json/#systemtextjson_1","title":"System.Text.Json","text":"<pre><code>using System.Text.Json;\n\nvar options = new JsonSerializerOptions();\noptions.AddNetCorePalJsonConverters();\n</code></pre>"},{"location":"zh/aspnetcore/json/#newtonsoftjson_1","title":"Newtonsoft.Json","text":"<pre><code>using Newtonsoft.Json;\n\nvar settings = new JsonSerializerSettings();\nsettings.AddNetCorePalJsonConverters();\n</code></pre>"},{"location":"zh/aspnetcore/jwt/","title":"Jwt\u8eab\u4efd\u8ba4\u8bc1","text":""},{"location":"zh/aspnetcore/jwt/#_1","title":"\u4ecb\u7ecd","text":"<p>\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u4f7f\u7528\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u7ba1\u7406Jwt\u5bc6\u94a5\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff0c\u5e76\u6ce8\u5165\u5230<code>JwtBearerOptions</code>\u4e2d\u3002\u6211\u4eec\u63d0\u4f9b\u4e86 <code>InMemoryJwtSettingStore</code>\u3001<code>FileJwtSettingStore</code>\u3001<code>RedisJwtSettingStore</code>\u3001<code>DbContextJwtSettingStore</code>\u7b49\u5bc6\u94a5\u5b58\u50a8\u65b9\u5f0f\uff0c\u7528\u6237\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u65b9\u5f0f\u3002</p>"},{"location":"zh/aspnetcore/jwt/#_2","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u6dfb\u52a0\u5305\u5f15\u7528\uff1a</p> <pre><code># InMemory\u5b58\u50a8 \u3001File\u5b58\u50a8\ndotnet add package NetCorePal.Extensions.Jwt   \n\n# Redis\u5b58\u50a8\ndotnet add package NetCorePal.Extensions.Jwt.StackExchangeRedis\n\n# EntityFrameworkCore\u5b58\u50a8\ndotnet add package NetCorePal.Extensions.Jwt.EntityFrameworkCore\n</code></pre> <p>\u5728\u542f\u52a8\u4ee3\u7801\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff08\u793a\u4f8b\u4e3a\u6700\u7b80JWT\u8ba4\u8bc1\u914d\u7f6e\uff09\uff1a</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\n\n// \u914d\u7f6e JWT \u8ba4\u8bc1\uff08\u5b9e\u9645\u6821\u9a8c\u53c2\u6570\u4f1a\u7531\u540e\u53f0\u670d\u52a1\u52a8\u6001\u66f4\u65b0\uff09\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\n// \u6ce8\u518c NetCorePal Jwt\uff0c\u5e76\u9009\u62e9\u5bc6\u94a5\u5b58\u50a8\u65b9\u5f0f\uff08\u793a\u4f8b\uff1a\u5185\u5b58\uff09\nbuilder.Services.AddNetCorePalJwt()\n    .AddInMemoryStore();\n</code></pre> <p>\u5982\u679c\u9700\u8981\u4f7f\u7528\u6587\u4ef6\u5b58\u50a8\u5bc6\u94a5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\n\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\nbuilder.Services.AddNetCorePalJwt()\n    .AddFileStore(\"jwtsetting-filename.json\"); // \u4f7f\u7528\u6587\u4ef6\u5b58\u50a8\u5bc6\u94a5\n</code></pre> <p>\u4f7f\u7528Redis\u5b58\u50a8\u5bc6\u94a5\uff1a</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing StackExchange.Redis;\n\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\n// \u6dfb\u52a0Redis\u8fde\u63a5\nbuilder.Services.AddSingleton&lt;IConnectionMultiplexer&gt;(\n    _ =&gt; ConnectionMultiplexer.Connect(builder.Configuration.GetConnectionString(\"Redis\")!));\n\nbuilder.Services.AddNetCorePalJwt()\n    .AddRedisStore(); // \u4f7f\u7528Redis\u5b58\u50a8\u5bc6\u94a5\n</code></pre> <p>\u4f7f\u7528EntityFrameworkCore\u5b58\u50a8\u5bc6\u94a5\uff0c\u9700\u8981\u5728MyDbContext\u4e2d\u6dfb\u52a0<code>JwtSetting</code>\u5b9e\u4f53\u7c7b\uff1a</p> <pre><code>public class MyDbContext : DbContext , IJwtSettingDbContext\n{\n    public MyDbContext(DbContextOptions&lt;MyDbContext&gt; options) : base(options)\n    {\n    }\n\n    public DbSet&lt;JwtSetting&gt; JwtSettings =&gt; Set&lt;JwtSetting&gt;();\n}\n</code></pre> <p>\u914d\u7f6e\u8eab\u4efd\u8ba4\u8bc1\u53ca\u5b58\u50a8\uff1a</p> <pre><code>using Microsoft.AspNetCore.Authentication.JwtBearer;\n\nbuilder.Services\n    .AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer();\n\nbuilder.Services.AddDbContext&lt;MyDbContext&gt;(options =&gt;\n{\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\"));\n});\n\nbuilder.Services.AddNetCorePalJwt()\n    .AddEntityFrameworkCoreStore&lt;MyDbContext&gt;(); // \u4f7f\u7528EntityFrameworkCore\u5b58\u50a8\u5bc6\u94a5\n</code></pre>"},{"location":"zh/aspnetcore/jwt/#key-rotation","title":"\u5bc6\u94a5\u8f6e\u8f6c\uff08Key Rotation\uff09","text":"<p>\u4ece\u73b0\u5728\u8d77\uff0c\u5bc6\u94a5\u8f6e\u8f6c\u670d\u52a1 <code>JwtKeyRotationService</code> \u4f1a\u5728\u8c03\u7528 <code>AddNetCorePalJwt()</code> \u65f6\u81ea\u52a8\u6ce8\u518c\uff0c\u5e76\u7531\u540e\u53f0\u670d\u52a1\uff08<code>JwtHostedService</code>\uff09\u6309\u914d\u7f6e\u5b9a\u671f\u6267\u884c\u3002</p> <p>\u5982\u9700\u542f\u7528\u5e76\u81ea\u5b9a\u4e49\u8f6e\u8f6c\u7b56\u7565\uff0c\u8bf7\u901a\u8fc7 <code>AddNetCorePalJwt</code> \u7684\u914d\u7f6e\u53c2\u6570\u8bbe\u7f6e <code>JwtOptions</code>\uff1a</p> <pre><code>builder.Services.AddNetCorePalJwt(options =&gt;\n{\n    options.AutomaticRotationEnabled = true;                    // \u542f\u7528\u81ea\u52a8\u8f6e\u8f6c\n    options.KeyLifetime = TimeSpan.FromDays(30);                // \u5bc6\u94a5\u6709\u6548\u671f\uff08\u4ec5\u5728 AutomaticRotationEnabled = true \u65f6\u751f\u6548\uff09\n    options.RotationCheckInterval = TimeSpan.FromHours(1);      // \u68c0\u67e5\u8f6e\u8f6c\u7684\u95f4\u9694\n    options.ExpiredKeyRetentionPeriod = TimeSpan.FromDays(30);  // \u8fc7\u671f\u5bc6\u94a5\u4fdd\u7559\u65f6\u957f\uff08\u7528\u4e8e\u9a8c\u8bc1\u65e7 token\uff09\n    options.MaxActiveKeys = 2;                                  // \u540c\u65f6\u4fdd\u7559\u7684\u6d3b\u8dc3\u5bc6\u94a5\u6570\u91cf\n})\n.AddInMemoryStore();\n</code></pre> <p>\u6ce8\u610f\uff1a\u5f53 <code>AutomaticRotationEnabled</code> \u4e3a false \u65f6\uff0c\u7cfb\u7edf\u4f1a\u4e3a\u65b0\u751f\u6210\u7684\u5bc6\u94a5\u8bbe\u7f6e\u4e00\u4e2a\u5f88\u957f\u7684\u6709\u6548\u671f\uff08100 \u5e74\uff09\uff0c\u6b64\u65f6 <code>KeyLifetime</code> \u914d\u7f6e\u5c06\u88ab\u5ffd\u7565\u3002</p> <p>\u63d0\u793a\uff1a\u5355\u5b9e\u4f8b\u8fd0\u884c\u65f6\uff0c<code>AddNetCorePalJwt()</code> \u4f1a\u9ed8\u8ba4\u4f7f\u7528\u5185\u5b58\u9501\u8fdb\u884c\u540c\u6b65\uff1b\u5982\u679c\u662f\u591a\u5b9e\u4f8b/\u5206\u5e03\u5f0f\u90e8\u7f72\uff0c\u5efa\u8bae\u914d\u7f6e\u5206\u5e03\u5f0f\u9501\uff08\u4f8b\u5982 Redis\uff09\u4ee5\u907f\u514d\u5e76\u53d1\u8f6e\u8f6c\u51b2\u7a81\uff1a</p> <pre><code>// \u9700\u8981\u5f15\u7528\u5206\u5e03\u5f0f\u9501\u5305\uff1aNetCorePal.Extensions.DistributedLocks.Redis\n// \u5e76\u6ce8\u518c Redis \u8fde\u63a5 IConnectionMultiplexer\nbuilder.Services.AddRedisLocks(); // \u6216 AddRedisLocks(connectionMultiplexer)\n</code></pre>"},{"location":"zh/aspnetcore/jwt/#_3","title":"\u6570\u636e\u4fdd\u62a4","text":"<p>\u4f7f\u7528ASP.NET Core DataProtection\u4fdd\u62a4\u5b58\u50a8\u7684JWT\u5bc6\u94a5\uff1a</p> <pre><code>builder.Services.AddNetCorePalJwt()\n    .UseDataProtection() // \u542f\u7528\u5bc6\u94a5\u52a0\u5bc6\u5b58\u50a8\uff08\u8bf7\u5728\u9009\u62e9\u5b58\u50a8\u4e4b\u524d\u8c03\u7528\uff09\n    .AddFileStore(\"jwtsetting-filename.json\");\n</code></pre> <p>\u91cd\u8981\u8bf4\u660e\uff1a\u5fc5\u987b\u5728\u9009\u62e9\u5b58\u50a8\u4e4b\u524d\u8c03\u7528 <code>UseDataProtection</code>\uff08\u5982 <code>AddInMemoryStore</code>\u3001<code>AddFileStore</code>\u3001<code>AddRedisStore</code>\u3001<code>AddEntityFrameworkCoreStore</code> \u4e4b\u524d\uff09\u3002\u8be5\u65b9\u6cd5\u4f1a\u5bf9\u201c\u63a5\u4e0b\u6765\u8981\u6ce8\u518c\u7684\u201d <code>IJwtSettingStore</code> \u8fdb\u884c\u5305\u88c5\u52a0\u5bc6\uff1b\u5982\u679c\u5728\u5df2\u6ce8\u518c\u5177\u4f53\u5b58\u50a8\u4e4b\u540e\u518d\u8c03\u7528\uff0c\u5219\u4e0d\u4f1a\u5bf9\u5df2\u6ce8\u518c\u7684\u5b58\u50a8\u751f\u6548\u3002</p> <p>DataProtection\u4f1a\u81ea\u52a8\u52a0\u5bc6\u5b58\u50a8\u7684\u79c1\u94a5\u6570\u636e\uff0c\u786e\u4fdd\u5bc6\u94a5\u5728\u6587\u4ef6\u3001\u6570\u636e\u5e93\u6216Redis\u4e2d\u7684\u5b89\u5168\u6027\u3002</p>"},{"location":"zh/aspnetcore/jwt/#jwttoken","title":"\u751f\u6210JwtToken","text":"<p>\u5728\u7aef\u70b9\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528<code>IJwtProvider</code>\u63a5\u53e3\u751f\u6210JwtToken\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>public class JwtLoginEndpoint : Endpoint&lt;JwtLoginRequest, ResponseData&lt;string&gt;&gt;\n{\n    public override void Configure()\n    {\n        Post(\"/jwtlogin\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(JwtLoginRequest req, CancellationToken ct)\n    {\n        var provider = Resolve&lt;IJwtProvider&gt;();\n        var claims = new[]\n        {\n            new Claim(\"uid\", \"111\"),\n            new Claim(\"type\", \"client\"),\n            new Claim(\"email\", \"abc@efg.com\"),\n        };\n        var jwt = await provider.GenerateJwtToken(new JwtData(\"issuer-x\", \"audience-y\",\n            claims,\n            DateTime.Now,\n            DateTime.Now.AddMinutes(1)));\n        await SendAsync(jwt.AsResponseData(), cancellation: ct);\n    }\n}\n\npublic record JwtLoginRequest(string Name);\n</code></pre>"},{"location":"zh/aspnetcore/response-data/","title":"webapi\u6570\u636e\u54cd\u5e94","text":"<p>\u4e3a\u4e86\u8ba9\u5ba2\u6237\u7aef\u80fd\u591f\u66f4\u597d\u5730\u5904\u7406\u54cd\u5e94\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u7528\u4e00\u81f4\u7684\u6570\u636e\u683c\u5f0f\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u6839\u636e\u6570\u636e\u683c\u5f0f\u8fdb\u884c\u7edf\u4e00\u7684\u5904\u7406\u3002</p>"},{"location":"zh/aspnetcore/response-data/#respnsedataresponsedata","title":"RespnseData\u3001ResponseData \u7c7b <p>\u6211\u4eec\u5728\u5305<code>NetCorePal.Extensions.AspNetCore</code>\u4e2d\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7c7b\u6765\u5c01\u88c5\u54cd\u5e94\u6570\u636e\uff0c\u5206\u522b\u662f <code>ResponseData</code> \u548c <code>ResponseData&lt;T&gt;</code>\u3002</p> <p><code>ResponseData</code> \u7c7b\u7528\u4e8e\u5c01\u88c5\u4e0d\u5e26\u6570\u636e\u7684\u54cd\u5e94\uff0c<code>ResponseData&lt;T&gt;</code> \u7c7b\u7528\u4e8e\u5c01\u88c5\u5e26\u6570\u636e\u7684\u54cd\u5e94\u3002</p> <p>\u7c7b\u578b\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>public class ResponseData\n{\n    public ResponseData(bool success = true, string message = \"\", int code = 0, IEnumerable&lt;object&gt;? errorData = null)\n    {\n        Success = success;\n        Message = message;\n        Code = code;\n        ErrorData = errorData ?? KnownException.EmptyErrorData;\n    }\n\n    public bool Success { get; protected set; }\n    public string Message { get; protected set; }\n    public int Code { get; protected set; }\n\n    public IEnumerable&lt;object&gt; ErrorData { get; protected set; }\n}\n\n\npublic class ResponseData&lt;T&gt; : ResponseData\n{\n    public ResponseData(T data, bool success = true, string message = \"\", int code = 0, IEnumerable&lt;object&gt;? errorData = null) : base(success: success, message: message, code: code, errorData: errorData)\n    {\n        this.Data = data;\n    }\n    public T Data { get; protected set; }\n}\n</code></pre>","text":""},{"location":"zh/aspnetcore/response-data/#asresponsedata","title":"AsResponseData \u6269\u5c55\u65b9\u6cd5 <p>\u6211\u4eec\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6269\u5c55\u65b9\u6cd5 <code>AsResponseData</code>\uff0c\u7528\u4e8e\u5c06\u6570\u636e\u8f6c\u6362\u4e3a <code>ResponseData</code> \u6216 <code>ResponseData&lt;T&gt;</code> \u5bf9\u8c61\u3002</p> <pre><code>using NetCorePal.Extensions.AspNetCore;\n\nvar data = new MyData();\nvar responseData = data.AsResponseData();\n</code></pre>","text":""},{"location":"zh/aspnetcore/response-data/#_1","title":"\u4f7f\u7528\u793a\u4f8b <p>\u5728\u7aef\u70b9\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>ResponseData</code> \u548c <code>ResponseData&lt;T&gt;</code> \u6765\u5c01\u88c5\u54cd\u5e94\u6570\u636e\u3002</p> <pre><code>public class GetWeatherEndpoint : EndpointWithoutRequest&lt;ResponseData&lt;IEnumerable&lt;WeatherForecast&gt;&gt;&gt;\n{\n    public override void Configure()\n    {\n        Get(\"/weather\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        var rng = new Random();\n        var result = await Task.FromResult(Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast\n        {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = rng.Next(-20, 55),\n            Summary = Summaries[rng.Next(Summaries.Length)]\n        }));\n\n        await SendAsync(result.AsResponseData(), cancellation: ct);\n    }\n}\n</code></pre>","text":""},{"location":"zh/aspnetcore/time-zone/","title":"\u65f6\u533a\u5904\u7406","text":"<p>\u8981\u4f7f\u7cfb\u7edf\u5728\u4e0d\u540c\u7684\u65f6\u533a\u4e2d\u6b63\u786e\u8fd0\u884c\uff0c\u9700\u8981\u8003\u8651\u65f6\u533a\u7684\u5904\u7406\uff0c\u8fd9\u91cc\u5217\u51fa\u4e00\u4e9b\u539f\u5219\u6765\u786e\u4fdd\u65f6\u533a\u5904\u7406\u7684\u6b63\u786e\u6027\u3002</p> <ul> <li>\u4f7f\u7528<code>DateTimeOffset</code>\u4ee3\u66ff<code>DateTime</code>\uff0c\u5219\u53ef\u4ee5\u89c4\u907f\u5e94\u7528\u7a0b\u5e8f\u65f6\u533a\u73af\u5883\u4e0d\u4e00\u81f4\u7684\u95ee\u9898;</li> <li>\u4f7f\u7528<code>DateTimeOffset.UtcNow</code>\u4ee3\u66ff<code>DateTime.Now</code>;</li> <li>\u5728\u6570\u636e\u5e93\u4e2d\u5b58\u50a8UTC\u65f6\u95f4\uff0c\u5bf9\u4e8eMySQL\u6570\u636e\u5e93\uff0c<code>DateTimeOffset</code>\u4f1a\u88ab\u81ea\u52a8\u8f6c\u4e3aUTC\u65f6\u95f4\u5b58\u50a8;</li> <li>\u4e0d\u4f9d\u8d56\u6570\u636e\u5e93\u751f\u6210\u65f6\u95f4\uff0c\u6240\u6709\u65f6\u95f4\u7684\u751f\u6210\u5747\u7531\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8d23\uff0c\u5219\u53ef\u4ee5\u89c4\u907f\u6570\u636e\u5e93\u670d\u52a1\u5668\u65f6\u533a\u4e0d\u4e00\u81f4\u7684\u95ee\u9898;</li> </ul>"},{"location":"zh/code-analysis/code-analysis-tools/","title":"\u4ee3\u7801\u5206\u6790\u5de5\u5177","text":"<p>NetCorePal.Extensions.CodeAnalysis.Tools \u662f\u57fa\u4e8e NetCorePal \u4ee3\u7801\u5206\u6790\u6846\u67b6\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u7528\u4e8e\u4ece .NET \u7a0b\u5e8f\u96c6\u751f\u6210\u67b6\u6784\u53ef\u89c6\u5316 HTML \u6587\u4ef6\u3002</p>"},{"location":"zh/code-analysis/code-analysis-tools/#_2","title":"\u26a0\ufe0f \u91cd\u8981\u8bf4\u660e","text":"<p>\u5de5\u5177\u751f\u6548\u7684\u524d\u63d0\u6761\u4ef6\uff1a\u76ee\u6807\u5206\u6790\u7684\u9879\u76ee/\u7a0b\u5e8f\u96c6\u5fc5\u987b\u5f15\u7528 <code>NetCorePal.Extensions.CodeAnalysis</code> \u5305\u3002\u8be5\u5305\u5305\u542b\u4e86\u6e90\u751f\u6210\u5668\uff0c\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u5206\u6790\u6240\u9700\u7684\u5143\u6570\u636e\u3002</p> <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.CodeAnalysis\" Version=\"2.8.3\" /&gt;\n</code></pre> <p>\u6ca1\u6709\u5f15\u7528\u6b64\u5305\u7684\u7a0b\u5e8f\u96c6\u5c06\u65e0\u6cd5\u751f\u6210\u5206\u6790\u7ed3\u679c\u3002</p>"},{"location":"zh/code-analysis/code-analysis-tools/#_3","title":"\u5b89\u88c5","text":"<p>\u4f5c\u4e3a\u5168\u5c40 dotnet \u5de5\u5177\u5b89\u88c5\uff1a</p> <pre><code>dotnet tool install -g NetCorePal.Extensions.CodeAnalysis.Tools\n</code></pre> <p>\u6216\u5728\u9879\u76ee\u4e2d\u672c\u5730\u5b89\u88c5\uff1a</p> <pre><code>dotnet tool install NetCorePal.Extensions.CodeAnalysis.Tools\n</code></pre>"},{"location":"zh/code-analysis/code-analysis-tools/#_4","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"zh/code-analysis/code-analysis-tools/#_5","title":"\u667a\u80fd\u53d1\u73b0","text":"<p>\u5de5\u5177\u652f\u6301\u81ea\u52a8\u53d1\u73b0\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u89e3\u51b3\u65b9\u6848\u3001\u9879\u76ee\u6216\u7a0b\u5e8f\u96c6\uff1a</p> <pre><code># \u81ea\u52a8\u53d1\u73b0\u5e76\u5206\u6790\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u5185\u5bb9\nnetcorepal-codeanalysis generate\n\n# \u6307\u5b9a\u89e3\u51b3\u65b9\u6848\u6587\u4ef6\nnetcorepal-codeanalysis generate --solution MySolution.sln\n\n# \u6307\u5b9a\u9879\u76ee\u6587\u4ef6  \nnetcorepal-codeanalysis generate --project MyProject.csproj\n\n# \u6307\u5b9a\u7a0b\u5e8f\u96c6\u6587\u4ef6\nnetcorepal-codeanalysis generate --assembly MyApp.dll\n</code></pre>"},{"location":"zh/code-analysis/code-analysis-tools/#_6","title":"\u547d\u4ee4\u884c\u9009\u9879","text":""},{"location":"zh/code-analysis/code-analysis-tools/#generate","title":"<code>generate</code> \u547d\u4ee4","text":"<p>\u8f93\u5165\u6e90\u9009\u9879\uff08\u6309\u4f18\u5148\u7ea7\u6392\u5e8f\uff09\uff1a</p> <ul> <li><code>--assembly, -a</code>\uff1a\u6307\u5b9a\u7a0b\u5e8f\u96c6\u6587\u4ef6 (.dll)\u3002\u53ef\u591a\u6b21\u6307\u5b9a</li> <li><code>--project, -p</code>\uff1a\u6307\u5b9a\u9879\u76ee\u6587\u4ef6 (.csproj)\u3002\u53ef\u591a\u6b21\u6307\u5b9a  </li> <li><code>--solution, -s</code>\uff1a\u6307\u5b9a\u89e3\u51b3\u65b9\u6848\u6587\u4ef6 (.sln)\u3002\u53ef\u591a\u6b21\u6307\u5b9a</li> </ul> <p>\u6784\u5efa\u9009\u9879\uff1a</p> <ul> <li><code>--configuration, -c</code>\uff1a\u6784\u5efa\u914d\u7f6e (Debug/Release)\u3002\u9ed8\u8ba4\uff1aDebug</li> </ul> <p>\u8f93\u51fa\u9009\u9879\uff1a</p> <ul> <li><code>--output, -o</code>\uff1a\u8f93\u51fa HTML \u6587\u4ef6\u8def\u5f84\u3002\u9ed8\u8ba4\uff1acode-analysis.html</li> <li><code>--title, -t</code>\uff1aHTML \u9875\u9762\u6807\u9898\u3002\u9ed8\u8ba4\uff1aArchitecture Visualization</li> <li><code>--verbose, -v</code>\uff1a\u542f\u7528\u8be6\u7ec6\u8f93\u51fa\u7528\u4e8e\u8c03\u8bd5</li> </ul>"},{"location":"zh/code-analysis/code-analysis-tools/#_7","title":"\u4f7f\u7528\u793a\u4f8b","text":"<ol> <li>\u81ea\u52a8\u53d1\u73b0\u5206\u6790\uff1a</li> </ol> <pre><code># \u8fdb\u5165\u9879\u76ee\u76ee\u5f55\ncd MyApp\n\n# \u81ea\u52a8\u53d1\u73b0\u5e76\u5206\u6790\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u89e3\u51b3\u65b9\u6848/\u9879\u76ee/\u7a0b\u5e8f\u96c6\nnetcorepal-codeanalysis generate\n\n# \u81ea\u52a8\u53d1\u73b0\u5e76\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\nnetcorepal-codeanalysis generate -o my-architecture.html\n</code></pre> <ol> <li>\u5206\u6790\u7279\u5b9a\u89e3\u51b3\u65b9\u6848\uff1a</li> </ol> <pre><code>cd MyApp\nnetcorepal-codeanalysis generate \\\n    --solution MyApp.sln \\\n    --configuration Release \\\n    --output architecture.html \\\n    --title \"\u6211\u7684\u5e94\u7528\u67b6\u6784\"\n</code></pre> <ol> <li>\u5206\u6790\u591a\u4e2a\u9879\u76ee\uff1a</li> </ol> <pre><code>cd MyApp\nnetcorepal-codeanalysis generate \\\n    -p MyApp/MyApp.csproj \\\n    -p MyApp.Domain/MyApp.Domain.csproj \\\n    -c Release \\\n    -o docs/architecture.html\n</code></pre> <ol> <li>\u76f4\u63a5\u5206\u6790\u7a0b\u5e8f\u96c6\uff1a</li> </ol> <pre><code>cd MyApp\nnetcorepal-codeanalysis generate \\\n    -a bin/Debug/net8.0/MyApp.dll \\\n    -a bin/Debug/net8.0/MyApp.Domain.dll \\\n    --verbose\n</code></pre>"},{"location":"zh/code-analysis/code-analysis-tools/#_8","title":"\u81ea\u52a8\u53d1\u73b0\u673a\u5236","text":"<p>\u5de5\u5177\u6309\u4ee5\u4e0b\u4f18\u5148\u7ea7\u81ea\u52a8\u53d1\u73b0\u9879\u76ee\u5185\u5bb9\uff1a</p> <ol> <li>\u89e3\u51b3\u65b9\u6848\u6587\u4ef6\uff1a\u67e5\u627e <code>*.sln</code> \u6587\u4ef6</li> <li>\u9879\u76ee\u6587\u4ef6\uff1a\u67e5\u627e <code>*.csproj</code> \u6587\u4ef6  </li> <li>\u7a0b\u5e8f\u96c6\u6587\u4ef6\uff1a\u67e5\u627e <code>bin/</code> \u76ee\u5f55\u4e0b\u7684 <code>*.dll</code> \u6587\u4ef6</li> </ol> <p>\u53d1\u73b0\u89c4\u5219\uff1a</p> <ul> <li>\u5728\u5f53\u524d\u76ee\u5f55\u53ca\u5b50\u76ee\u5f55\u4e2d\u9012\u5f52\u641c\u7d22</li> <li>\u89e3\u51b3\u65b9\u6848\u4f18\u5148\u4e8e\u9879\u76ee\uff0c\u9879\u76ee\u4f18\u5148\u4e8e\u7a0b\u5e8f\u96c6</li> <li>\u81ea\u52a8\u6392\u9664\u6d4b\u8bd5\u9879\u76ee\uff08\u5305\u542b \"Test\"\u3001\"Tests\" \u7684\u9879\u76ee\uff09</li> <li>\u81ea\u52a8\u6784\u5efa\u9879\u76ee\u5e76\u52a0\u8f7d\u751f\u6210\u7684\u7a0b\u5e8f\u96c6</li> </ul>"},{"location":"zh/code-analysis/code-analysis-tools/#_9","title":"\u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>.NET 8.0 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>\u7a0b\u5e8f\u96c6\u5fc5\u987b\u5305\u542b\u7531 <code>NetCorePal.Extensions.CodeAnalysis</code> \u6e90\u751f\u6210\u5668\u751f\u6210\u7684\u4ee3\u7801\u5206\u6790\u7ed3\u679c</li> </ul>"},{"location":"zh/code-analysis/code-analysis-tools/#_10","title":"\u8f93\u51fa\u5185\u5bb9","text":"<p>\u5de5\u5177\u751f\u6210\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684\u4ea4\u4e92\u5f0f HTML \u6587\u4ef6\uff1a</p> <ul> <li>\u7edf\u8ba1\u4fe1\u606f\uff1a\u5404\u7c7b\u578b\u7ec4\u4ef6\u7684\u6570\u91cf\u7edf\u8ba1\u548c\u5206\u5e03\u60c5\u51b5</li> <li>\u67b6\u6784\u603b\u89c8\u56fe\uff1a\u7cfb\u7edf\u4e2d\u6240\u6709\u7c7b\u578b\u53ca\u5176\u5173\u7cfb\u7684\u5b8c\u6574\u89c6\u56fe</li> <li>\u5904\u7406\u6d41\u7a0b\u56fe\u96c6\u5408\uff1a\u6bcf\u4e2a\u72ec\u7acb\u4e1a\u52a1\u94fe\u8def\u7684\u6d41\u7a0b\u56fe\uff08\u5982\u547d\u4ee4\u5904\u7406\u94fe\u8def\uff09</li> <li>\u805a\u5408\u5173\u7cfb\u56fe\u96c6\u5408\uff1a\u6bcf\u4e2a\u805a\u5408\u6839\u76f8\u5173\u7684\u5173\u7cfb\u56fe</li> <li>\u4ea4\u4e92\u5f0f\u5bfc\u822a\uff1a\u5de6\u4fa7\u6811\u5f62\u83dc\u5355\uff0c\u652f\u6301\u56fe\u8868\u7c7b\u578b\u5207\u6362</li> <li>Mermaid Live \u96c6\u6210\uff1a\u6bcf\u4e2a\u56fe\u8868\u53f3\u4e0a\u89d2\u7684\"View in Mermaid Live\"\u6309\u94ae</li> </ul>"},{"location":"zh/code-analysis/code-analysis-tools/#_11","title":"\u4e0e\u6784\u5efa\u8fc7\u7a0b\u96c6\u6210","text":""},{"location":"zh/code-analysis/code-analysis-tools/#msbuild","title":"MSBuild \u96c6\u6210","text":"<p>\u6dfb\u52a0\u5230 <code>.csproj</code> \u6587\u4ef6\uff1a</p> <pre><code>&lt;Target Name=\"GenerateArchitectureVisualization\" AfterTargets=\"Build\" Condition=\"'$(Configuration)' == 'Debug'\"&gt;\n  &lt;Exec Command=\"netcorepal-codeanalysis generate -a $(OutputPath)$(AssemblyName).dll -o $(OutputPath)architecture.html\" \n        ContinueOnError=\"true\" /&gt;\n&lt;/Target&gt;\n</code></pre>"},{"location":"zh/code-analysis/code-analysis-tools/#github-actions","title":"GitHub Actions","text":"<p>\u6dfb\u52a0\u5230\u5de5\u4f5c\u6d41\u7a0b\uff1a</p> <pre><code>- name: Generate Architecture Visualization\n  run: |\n    dotnet tool install -g NetCorePal.Extensions.CodeAnalysis.Tools\n    cd MyApp\n    netcorepal-codeanalysis generate \\\n      --output docs/architecture.html \\\n      --title \"MyApp \u67b6\u6784\u56fe\"\n</code></pre>"},{"location":"zh/code-analysis/code-analysis-tools/#_12","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"zh/code-analysis/code-analysis-tools/#_13","title":"\u5e38\u89c1\u95ee\u9898","text":"<ol> <li>\u627e\u4e0d\u5230\u7a0b\u5e8f\u96c6\uff1a\u786e\u4fdd\u7a0b\u5e8f\u96c6\u6587\u4ef6\u5b58\u5728\u4e14\u53ef\u8bbf\u95ee</li> <li>\u65e0\u5206\u6790\u7ed3\u679c\uff1a\u786e\u4fdd\u7a0b\u5e8f\u96c6\u4f7f\u7528\u4e86 <code>NetCorePal.Extensions.CodeAnalysis</code> \u5305\u5f15\u7528\u8fdb\u884c\u6784\u5efa</li> <li>\u6743\u9650\u9519\u8bef\uff1a\u68c0\u67e5\u8f93\u51fa\u76ee\u5f55\u7684\u5199\u5165\u6743\u9650</li> <li>\u6784\u5efa\u5931\u8d25\uff1a\u786e\u4fdd\u9879\u76ee\u53ef\u4ee5\u6b63\u5e38\u6784\u5efa\uff0c\u68c0\u67e5\u4f9d\u8d56\u9879</li> </ol>"},{"location":"zh/code-analysis/code-analysis-tools/#_14","title":"\u8be6\u7ec6\u8f93\u51fa","text":"<p>\u4f7f\u7528 <code>--verbose</code> \u6807\u5fd7\u83b7\u53d6\u5206\u6790\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\uff1a</p> <pre><code>netcorepal-codeanalysis generate --verbose\n</code></pre> <p>\u8fd9\u5c06\u663e\u793a\uff1a</p> <ul> <li>\u53d1\u73b0\u7684\u6587\u4ef6\u548c\u9879\u76ee</li> <li>\u6784\u5efa\u8fc7\u7a0b\u4fe1\u606f</li> <li>\u52a0\u8f7d\u7684\u7a0b\u5e8f\u96c6</li> <li>\u5206\u6790\u7edf\u8ba1\u4fe1\u606f</li> <li>\u6587\u4ef6\u751f\u6210\u8be6\u60c5</li> <li>\u53d1\u751f\u95ee\u9898\u65f6\u7684\u9519\u8bef\u8be6\u60c5</li> </ul>"},{"location":"zh/code-analysis/code-analysis-tools/#_15","title":"\u76f8\u5173\u5305","text":"<ul> <li><code>NetCorePal.Extensions.CodeAnalysis</code>\uff1a\u6838\u5fc3\u5206\u6790\u6846\u67b6</li> <li>\u6e90\u751f\u6210\u5668\uff1a\u7528\u4e8e\u81ea\u52a8\u5206\u6790\u7684\u6e90\u751f\u6210\u5668</li> </ul>"},{"location":"zh/code-analysis/code-flow-analysis/","title":"\u4ee3\u7801\u6d41\u5206\u6790 (Code Flow Analysis)","text":""},{"location":"zh/code-analysis/code-flow-analysis/#_1","title":"\u6982\u8ff0","text":"<p><code>NetCorePal.Extensions.CodeAnalysis</code> \u901a\u8fc7\u6e90\u751f\u6210\u5668\u81ea\u52a8\u5206\u6790\u60a8\u7684\u4ee3\u7801\u7ed3\u6784\uff0c\u5e2e\u52a9\u7406\u89e3 DDD \u67b6\u6784\u4e2d\u5404\u7ec4\u4ef6\u5173\u7cfb\u548c\u6570\u636e\u6d41\u5411\uff0c\u5e76\u652f\u6301\u591a\u79cd\u53ef\u89c6\u5316\u65b9\u5f0f\u3002</p>"},{"location":"zh/code-analysis/code-flow-analysis/#_2","title":"\u529f\u80fd\u7279\u6027","text":"<ul> <li>\u81ea\u52a8\u8bc6\u522b\u547d\u4ee4\u53d1\u9001\u8005\u3001\u805a\u5408\u6839\u3001\u547d\u4ee4\u3001\u4e8b\u4ef6\u3001\u5904\u7406\u5668\u7b49\u7c7b\u578b</li> <li>\u81ea\u52a8\u5efa\u7acb\u65b9\u6cd5\u3001\u547d\u4ee4\u3001\u805a\u5408\u3001\u4e8b\u4ef6\u3001\u5904\u7406\u5668\u7b49\u591a\u79cd\u5173\u7cfb</li> <li>\u652f\u6301\u591a\u79cd Mermaid \u56fe\u8868\u81ea\u52a8\u751f\u6210\uff1a</li> <li>\u67b6\u6784\u603b\u89c8\u56fe\uff1a\u7cfb\u7edf\u4e2d\u6240\u6709\u7c7b\u578b\u53ca\u5176\u5173\u7cfb\u7684\u5b8c\u6574\u89c6\u56fe</li> <li>\u5904\u7406\u6d41\u7a0b\u56fe\u96c6\u5408\uff1a\u6bcf\u4e2a\u72ec\u7acb\u4e1a\u52a1\u94fe\u8def\u7684\u6d41\u7a0b\u56fe</li> <li>\u805a\u5408\u5173\u7cfb\u56fe\u96c6\u5408\uff1a\u6bcf\u4e2a\u805a\u5408\u6839\u76f8\u5173\u7684\u5173\u7cfb\u56fe</li> <li>\u4e00\u952e\u751f\u6210\u4ea4\u4e92\u5f0f HTML \u67b6\u6784\u53ef\u89c6\u5316\u9875\u9762</li> </ul>"},{"location":"zh/code-analysis/code-flow-analysis/#_3","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"zh/code-analysis/code-flow-analysis/#1","title":"1. \u5b89\u88c5\u5305","text":"<p>\u5728\u9700\u8981\u5206\u6790\u7684\u9879\u76ee\u4e2d\u6dfb\u52a0\uff1a</p> <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.CodeAnalysis\" /&gt;\n</code></pre>"},{"location":"zh/code-analysis/code-flow-analysis/#2","title":"2. \u542f\u7528\u6e90\u751f\u6210\u5668","text":"<p>\u53ea\u9700\u5f15\u7528 <code>NetCorePal.Extensions.CodeAnalysis</code> \u5305\uff0c\u65e0\u9700\u624b\u52a8\u914d\u7f6e\u3002</p> <p>\u5176\u5185\u7f6e\u7684 SourceGenerator \u4f1a\u5728\u7f16\u8bd1\u65f6\u81ea\u52a8\u626b\u63cf\u9879\u76ee\u4ee3\u7801\uff0c\u5206\u6790\u63a7\u5236\u5668\u3001\u547d\u4ee4\u3001\u805a\u5408\u6839\u3001\u4e8b\u4ef6\u3001\u5904\u7406\u5668\u7b49\u7c7b\u578b\u53ca\u5176\u5173\u7cfb\uff0c\u5e76\u81ea\u52a8\u751f\u6210\u5305\u542b\u5206\u6790\u7ed3\u679c\u7684\u6570\u636e\u6587\u4ef6\u3002</p> <p>\u8be5\u6587\u4ef6\u5305\u542b\u6240\u6709\u5206\u6790\u7ed3\u679c\u6570\u636e\u7ed3\u6784\uff0c\u4f9b\u8fd0\u884c\u65f6\u805a\u5408\u548c\u53ef\u89c6\u5316\u4f7f\u7528\u3002</p> <p>\u6574\u4e2a\u6d41\u7a0b\u5b8c\u5168\u81ea\u52a8\u5316\uff0c\u65e0\u9700\u989d\u5916\u6b65\u9aa4\uff0c\u652f\u6301\u591a\u9879\u76ee\u3001\u8de8\u7a0b\u5e8f\u96c6\u5206\u6790\u3002</p>"},{"location":"zh/code-analysis/code-flow-analysis/#3","title":"3. \u83b7\u53d6\u5206\u6790\u7ed3\u679c","text":"<pre><code>using NetCorePal.Extensions.CodeAnalysis;\nvar result = CodeFlowAnalysisHelper.GetResultFromAssemblies(AppDomain.CurrentDomain.GetAssemblies());\n</code></pre> <p>// \u63a8\u8350\u5728 ASP.NET Core \u9879\u76ee\u4e2d\u76f4\u63a5\u805a\u5408\u5f53\u524d\u5e94\u7528\u57df\u6240\u6709\u7a0b\u5e8f\u96c6\uff0c\u786e\u4fdd\u5206\u6790\u7ed3\u679c\u5b8c\u6574\u3002</p>"},{"location":"zh/code-analysis/code-flow-analysis/#mermaid","title":"Mermaid \u53ef\u89c6\u5316\u652f\u6301","text":"<p>\u6846\u67b6\u5185\u7f6e\u4e09\u79cd Mermaid Visualizer\uff1a</p> <ol> <li>ArchitectureOverviewMermaidVisualizer    \u751f\u6210\u7cfb\u7edf\u6240\u6709\u7c7b\u578b\u53ca\u5176\u5173\u7cfb\u7684\u5b8c\u6574\u67b6\u6784\u56fe\u3002</li> </ol> <pre><code>var mermaid = ArchitectureOverviewMermaidVisualizer.GenerateMermaid(result);\n</code></pre> <ol> <li>ProcessingFlowMermaidVisualizer\uff08\u5904\u7406\u6d41\u7a0b\u56fe\uff09    \u751f\u6210\u6240\u6709\u72ec\u7acb\u4e1a\u52a1\u5904\u7406\u94fe\u8def\u7684\u6d41\u7a0b\u56fe\u96c6\u5408\uff08\u6bcf\u4e2a\u72ec\u7acb\u6d41\u7a0b\u4e00\u5f20\u56fe\uff09\uff0c\u7528\u4e8e\u5c55\u793a\u547d\u4ee4\u3001\u4e8b\u4ef6\u3001\u805a\u5408\u7b49\u5728\u4e1a\u52a1\u6d41\u8f6c\u4e2d\u7684\u5b9e\u9645\u8c03\u7528\u5173\u7cfb\u3002</li> </ol> <pre><code>var chains = ProcessingFlowMermaidVisualizer.GenerateMermaid(result);\nforeach (var (name, diagram) in chains)\n{\n    Console.WriteLine($\"{name}:\\n{diagram}\");\n}\n</code></pre> <ol> <li>AggregateRelationMermaidVisualizer    \u751f\u6210\u6240\u6709\u805a\u5408\u6839\u7684\u5173\u7cfb\u56fe\u96c6\u5408\uff08\u6bcf\u4e2a\u805a\u5408\u6839\u4e00\u5f20\u56fe\uff09\u3002</li> </ol> <pre><code>var aggregates = AggregateRelationMermaidVisualizer.GenerateAllAggregateMermaid(result);\nforeach (var (aggName, diagram) in aggregates)\n{\n    Console.WriteLine($\"{aggName}:\\n{diagram}\");\n}\n</code></pre>"},{"location":"zh/code-analysis/code-flow-analysis/#html","title":"\u4ea4\u4e92\u5f0f HTML \u53ef\u89c6\u5316","text":"<p>\u901a\u8fc7 <code>VisualizationHtmlBuilder</code> \u4e00\u952e\u751f\u6210\u5b8c\u6574\u7684\u4ea4\u4e92\u5f0f HTML \u67b6\u6784\u9875\u9762\uff0c\u5305\u542b\u6240\u6709\u56fe\u8868\u548c\u5bfc\u822a\uff1a</p> <pre><code>var html = VisualizationHtmlBuilder.GenerateVisualizationHtml(result, \"\u6211\u7684\u67b6\u6784\u53ef\u89c6\u5316\");\nFile.WriteAllText(\"architecture-visualization.html\", html);\n</code></pre> <ul> <li>\u652f\u6301\u4fa7\u8fb9\u680f\u5bfc\u822a\u3001\u56fe\u8868\u5207\u6362\u3001Mermaid Live Editor \u4e00\u952e\u8df3\u8f6c</li> <li>\u5305\u542b\u6240\u6709\u94fe\u8def\u3001\u805a\u5408\u3001\u67b6\u6784\u603b\u89c8\u7b49\u56fe\u8868</li> </ul>"},{"location":"zh/code-analysis/code-flow-analysis/#aspnet-core","title":"ASP.NET Core \u4e2d\u95f4\u4ef6\u96c6\u6210","text":"<p>\u4e00\u884c\u4ee3\u7801\u5373\u53ef\u5728\u5f00\u53d1\u73af\u5883\u4e0b\u96c6\u6210\u5728\u7ebf\u67b6\u6784\u5206\u6790\u56fe\uff1a</p> <pre><code>if (app.Environment.IsDevelopment())\n{\n    app.MapGet(\"/diagnostics/code-analysis\", () =&gt;\n        VisualizationHtmlBuilder.GenerateVisualizationHtml(\n            AnalysisResultAggregator.Aggregate(new[] { Assembly.GetExecutingAssembly() })\n        )\n    );\n}\n</code></pre>"},{"location":"zh/code-analysis/code-flow-analysis/#mermaid_1","title":"Mermaid \u56fe\u8868\u5728\u7ebf\u9884\u89c8","text":"<p>\u6240\u6709 Mermaid \u4ee3\u7801\u5747\u53ef\u7c98\u8d34\u5230 Mermaid Live Editor \u5b9e\u65f6\u9884\u89c8\u548c\u7f16\u8f91\u3002HTML \u9875\u9762\u5185\u7f6e\u4e00\u952e\u8df3\u8f6c\u6309\u94ae\u3002</p>"},{"location":"zh/concurrency/command-lock/","title":"\u547d\u4ee4\u9501","text":"<p>\u987e\u540d\u601d\u4e49\uff0c\u547d\u4ee4\u9501\u662f\u4e3a\u4e86\u89e3\u51b3\u547d\u4ee4\u5e76\u53d1\u6267\u884c\u7684\u95ee\u9898\u3002\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u67d0\u4e2a\u547d\u4ee4\u5728\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u88ab\u4e00\u4e2a\u5b9e\u4f8b\u6267\u884c\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u9501\u3002 \u672c\u8d28\u4e0a\u547d\u4ee4\u9501\u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u9501\uff0c\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u6211\u4eec\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u57fa\u4e8eRedis\u6765\u5b9e\u73b0\u7684\u547d\u4ee4\u9501\u3002</p>"},{"location":"zh/concurrency/command-lock/#_2","title":"\u6ce8\u518c\u547d\u4ee4\u9501","text":"<p>\u5728Program.cs\u6ce8\u518c<code>CommandLocks</code>\uff1a <pre><code>builder.Services.AddMediatR(cfg =&gt;\n        cfg.RegisterServicesFromAssemblies(Assembly.GetExecutingAssembly())\n            .AddCommandLockBehavior()  //\u6ce8\u518c\u547d\u4ee4\u9501\u884c\u4e3a\n            .AddKnownExceptionValidationBehavior()\n            .AddUnitOfWorkBehaviors());\n\nbuilder.Services.AddCommandLocks(typeof(Program).Assembly); //\u6ce8\u518c\u6240\u6709\u7684\u547d\u4ee4\u9501\u7c7b\u578b\n</code></pre></p> <p>\u6ce8\u610f\uff1a \u547d\u4ee4\u9501\u5e94\u8be5\u5728\u4e8b\u52a1\u5f00\u542f\u524d\u6267\u884c\uff0c\u6240\u4ee5\u9700\u8981\u5728<code>AddKnownExceptionValidationBehavior</code>\u4e4b\u524d\u6dfb\u52a0<code>AddCommandLockBehavior</code>\u3002</p>"},{"location":"zh/concurrency/command-lock/#_3","title":"\u4f7f\u7528\u547d\u4ee4\u9501","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u547d\u4ee4\u9501\uff0c\u5b9e\u73b0<code>ICommandLock&lt;TCommand&gt;</code>\u63a5\u53e3\uff0c\u5176\u4e2d<code>TCommand</code>\u662f\u547d\u4ee4\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a</p> <pre><code>public record PayOrderCommand(OrderId Id) : ICommand&lt;OrderId&gt;;\n\npublic class PayOrderCommandLock : ICommandLock&lt;PayOrderCommand&gt;\n{\n    public Task&lt;CommandLockSettings&gt; GetLockKeysAsync(PayOrderCommand command,\n        CancellationToken cancellationToken = default)\n    {\n        return Task.FromResult(command.Id.ToCommandLockSettings());\n    }\n}\n</code></pre> <p>\u5176\u4e2d<code>command.Id.ToCommandLockSettings()</code>\u662f\u5c06<code>OrderId</code>\u8f6c\u6362\u4e3a<code>CommandLockSettings</code>\uff0c<code>CommandLockSettings</code>\u662f\u547d\u4ee4\u9501\u7684\u914d\u7f6e\uff0c\u5305\u542b\u4e86\u9501\u7684Key\u3001\u83b7\u53d6\u9501\u4e4b\u524d\u53ef\u4ee5\u7b49\u5f85\u7684\u8fc7\u671f\u65f6\u95f4\u3002</p> <p>\u8bbe\u8ba1\u4e0a\uff0c\u547d\u4ee4\u9501\u4e0e\u547d\u4ee4\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb\uff0c\u5efa\u8bae\u5c06\u547d\u4ee4\u9501\u4e0e\u547d\u4ee4\u3001\u547d\u4ee4\u5904\u7406\u5668\u653e\u5728\u540c\u4e00\u4e2a\u7c7b\u6587\u4ef6\u4e2d\uff0c\u4fbf\u4e8e\u7ef4\u62a4\u3002</p>"},{"location":"zh/concurrency/command-lock/#key","title":"\u591akey\u547d\u4ee4\u9501","text":"<p>\u547d\u4ee4\u9501\u652f\u6301\u591aKey\u673a\u5236\uff0c\u5373\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2aKey\uff0c\u4f8b\u5982\uff1a</p> <pre><code>public class PayOrderCommandLock : ICommandLock&lt;PayOrderCommand&gt;\n{\n    public Task&lt;CommandLockSettings&gt; GetLockKeysAsync(PayOrderCommand command,\n        CancellationToken cancellationToken = default)\n    {\n        var ids = new List&lt;OrderId&gt; { new OrderId(1), new OrderId(2) };\n        return Task.FromResult(ids.ToCommandLockSettings());\n    }\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>PayOrderCommand</code>\u5bf9\u5e94\u4e24\u4e2aKey\uff0c\u5206\u522b\u662f<code>OrderId(1)</code>\u548c<code>OrderId(2)</code>\u3002</p> <p>\u5f53\u9700\u8981\u9501\u5b9a\u591a\u4e2aKey\u65f6\uff0cCommandLockSettings\u4f1a\u5bf9\u591a\u4e2aKey\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4e2a\u9501\u5b9a\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u4e2aKey\u9501\u5b9a\u5931\u8d25\uff0c\u5219\u4f1a\u91ca\u653e\u5df2\u7ecf\u9501\u5b9a\u7684Key\u3002</p>"},{"location":"zh/concurrency/command-lock/#_4","title":"\u53ef\u91cd\u5165\u673a\u5236","text":"<p>\u547d\u4ee4\u9501\u5b9e\u73b0\u4e86\u53ef\u91cd\u5165\u673a\u5236\uff0c\u5373\u5728\u540c\u4e00\u4e2a\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\uff0c\u76f8\u540c\u7684Key\u53ef\u4ee5\u91cd\u590d\u83b7\u53d6\u9501\uff0c\u4e0d\u4f1a\u9020\u6210\u6b7b\u9501\u3002 \u4f8b\u5982\u4e0a\u9762\u793a\u4f8b\u7684\u547d\u4ee4\u6267\u884c\u540e\u5e8f\u7684\u4e8b\u4ef6\u5904\u7406\u8fc7\u7a0b\u4e2d\u518d\u6b21\u6267\u884c\u643a\u5e26\u76f8\u540cKey\u7684\u547d\u4ee4\u9501\uff0c\u4e0d\u4f1a\u6b7b\u9501\u3002</p>"},{"location":"zh/concurrency/redis-lock/","title":"\u60b2\u89c2\u9501-Redis\u9501","text":""},{"location":"zh/concurrency/redis-lock/#redis","title":"\u4ec0\u4e48\u662fRedis\u9501\uff1f","text":"<p><code>Redis\u9501</code>\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u5e76\u53d1\u95ee\u9898\u7684\u673a\u5236\uff0c\u57fa\u4e8eRedis\u7684<code>\u60b2\u89c2\u9501</code>\u5b9e\u73b0\u3002\u5728\u5e76\u53d1\u73af\u5883\u4e2d\uff0c\u591a\u4e2a\u7528\u6237\u53ef\u80fd\u540c\u65f6\u53d8\u66f4\u540c\u4e00\u8d44\u6e90\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u9650\u5236\uff0c\u4e0d\u540c\u7528\u6237\u4e4b\u95f4\u7684\u64cd\u4f5c\u53ef\u80fd\u76f8\u4e92\u8986\u76d6\uff0c\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002<code>Redis\u9501</code>\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u800c\u8bbe\u8ba1\u7684\u3002</p>"},{"location":"zh/concurrency/redis-lock/#redis_1","title":"Redis\u9501\u7684\u5b9e\u73b0\u539f\u7406","text":"<p><code>Redis\u9501</code>\u7684\u5b9e\u73b0\u539f\u7406\u662f\u901a\u8fc7\u5728Redis\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u552f\u4e00\u7684\u952e\u6765\u8868\u793a\u9501\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u9501\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u65e0\u6cd5\u83b7\u53d6\u9501\uff0c\u76f4\u5230\u8be5\u7ebf\u7a0b\u91ca\u653e\u9501\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a 1. \u7ebf\u7a0bA\u5c1d\u8bd5\u83b7\u53d6\u9501\uff0c\u5728Redis\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u552f\u4e00\u952e\uff0c\u5982\u679c\u8bbe\u7f6e\u6210\u529f\uff0c\u5219\u83b7\u53d6\u9501\u3002 2. \u7ebf\u7a0bA\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u5220\u9664\u8be5\u552f\u4e00\u952e\uff0c\u91ca\u653e\u9501\u3002 3. \u7ebf\u7a0bB\u5c1d\u8bd5\u83b7\u53d6\u9501\uff0c\u5982\u679cRedis\u4e2d\u4e0d\u5b58\u5728\u8be5\u552f\u4e00\u952e\uff0c\u5219\u83b7\u53d6\u9501\uff0c\u5426\u5219\u7b49\u5f85\u6216\u91cd\u8bd5\u3002</p>"},{"location":"zh/concurrency/redis-lock/#redis_2","title":"Redis\u9501\u7684\u4f7f\u7528\u573a\u666f","text":"<p><code>Redis\u9501</code>\u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u9ad8\u5e76\u53d1\u95ee\u9898\uff0c\u4f8b\u5982\u5728\u8ba2\u5355\u7cfb\u7edf\u4e2d\uff0c\u5f53\u591a\u4e2a\u7528\u6237\u540c\u65f6\u4e0b\u5355\u65f6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8d85\u5356\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528<code>Redis\u9501</code>\u4f7f\u5f97\u6263\u9664\u5e93\u5b58\u7684\u64cd\u4f5c\u6bcf\u6b21\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\uff0c\u786e\u4fdd\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002</p>"},{"location":"zh/concurrency/redis-lock/#redis_3","title":"\u6ce8\u518cRedis\u9501","text":"<p>\u5728Program.cs\u6ce8\u518c<code>IDistributedLock</code>\uff1a <pre><code>using NetCorePal.Extensions.DistributedLocks;\nusing NetCorePal.Extensions.DistributedLocks.Redis;\nusing StackExchange.Redis;\n\nvar redis = ConnectionMultiplexer.Connect(builder.Configuration.GetConnectionString(\"Redis\")!);\nbuilder.Services.AddSingleton&lt;IConnectionMultiplexer&gt;(p =&gt; redis);\nbuilder.Services.AddRedisLocks();\n</code></pre></p>"},{"location":"zh/concurrency/redis-lock/#redis_4","title":"\u4f7f\u7528Redis\u9501","text":"<p>\u5728\u9700\u8981\u4f7f\u7528\u9501\u7684\u5730\u65b9\u6ce8\u5165<code>IDistributedLock</code>\uff1a <pre><code>using NetCorePal.Extensions.DistributedLocks;\nnamespace DistributedLocksSample\n{\n    public class RedisLockSample\n    {\n        private readonly IDistributedLock _lock;\n        public RedisLockSample(IDistributedLock @lock)\n        {\n            _lock = @lock;\n        }\n\n        public async Task LockSample()\n        {\n            using (var l = await _lock.Acquire(\"lock-key\", TimeSpan.FromSeconds(10)))\n            {\n                // do something\n            }\n        }\n\n        public async Task TryLockSample()\n        {\n            var lockerHandler = await _lock.TryAcquire(\"lock-key\", TimeSpan.FromSeconds(10)))\n            if (lockerHandler != null)\n            {\n                using (lockerHandler)\n                {\n                    // do something\n                }\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"zh/concurrency/row-version/","title":"RowVersion","text":""},{"location":"zh/concurrency/row-version/#rowversion_1","title":"\u4ec0\u4e48\u662fRowVersion\uff1f","text":"<p><code>RowVersion</code>\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u5e76\u53d1\u95ee\u9898\u7684\u673a\u5236\uff0c\u57fa\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u7279\u6027\u7684<code>\u4e50\u89c2\u9501</code>\u7684\u4e00\u79cd\u5b9e\u73b0,\u5728\u5e76\u53d1\u73af\u5883\u4e2d\uff0c\u591a\u4e2a\u7528\u6237\u53ef\u80fd\u540c\u65f6\u53d8\u66f4\u540c\u4e00\u884c\u6570\u636e\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u9650\u5236\uff0c\u4e0d\u540c\u7528\u6237\u4e4b\u95f4\u7684\u64cd\u4f5c\u53ef\u80fd\u76f8\u4e92\u8986\u76d6\uff0c\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002<code>RowVersion</code>\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u800c\u8bbe\u8ba1\u7684\u3002</p>"},{"location":"zh/concurrency/row-version/#rowversion_2","title":"RowVersion\u7684\u5b9e\u73b0\u539f\u7406","text":"<p><code>RowVersion</code>\u7684\u5b9e\u73b0\u539f\u7406\u662f\u5728\u6bcf\u4e00\u884c\u6570\u636e\u4e2d\u589e\u52a0\u4e00\u4e2a\u7248\u672c\u53f7\u5b57\u6bb5\uff0c\u6bcf\u6b21\u5bf9\u8fd9\u4e00\u884c\u6570\u636e\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u7248\u672c\u53f7\u52a01\u3002\u5728\u4e8b\u52a1\u5f00\u59cb\u65f6\uff0c\u4e8b\u52a1\u4f1a\u8bfb\u53d6\u5f53\u524d\u884c\u7684\u7248\u672c\u53f7\uff0c\u6267\u884c<code>update</code>\u65f6\uff0c\u4f1a\u66f4\u65b0<code>RowVersion</code>\uff0c\u5e76\u5728<code>where</code>\u6761\u4ef6\u4e2d\u589e\u52a0\u7c7b\u4f3c<code>row_version=@oldversion</code>\u8fd9\u6837\u7684\u6761\u4ef6\uff0c\u4e8b\u7269\u63d0\u4ea4\u524d\uff0c\u4f1a\u68c0\u67e5\u5f71\u54cd\u884c\u6570\u662f\u5426\u4e0e\u9884\u671f\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\uff0c\u5219\u63d0\u4ea4\u4e8b\u52a1\uff0c\u5426\u5219\u56de\u6eda\u4e8b\u52a1\u3002</p>"},{"location":"zh/concurrency/row-version/#rowversion_3","title":"RowVersion\u7684\u4f7f\u7528\u573a\u666f","text":"<p><code>RowVersion</code>\u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u5e76\u53d1\u95ee\u9898\uff0c\u4f8b\u5982\u5728\u8ba2\u5355\u7cfb\u7edf\u4e2d\uff0c\u5f53\u591a\u4e2a\u7528\u6237\u540c\u65f6\u5bf9\u540c\u4e00\u8ba2\u5355\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8ba2\u5355\u72b6\u6001\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4f7f\u7528\u884c\u7248\u672c\u53f7\uff0c\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u95ee\u9898\u7684\u53d1\u751f\u3002</p>"},{"location":"zh/concurrency/row-version/#_1","title":"\u5b9a\u4e49\u884c\u7248\u672c\u53f7","text":"<p>\u5728\u9886\u57df\u6a21\u578b\u4e2d\uff0c\u5b9a\u4e49\u4e00\u4e2a<code>NetCorePal.Extensions.Domain.RowVersion</code>\u7c7b\u578b\u7684<code>public</code>\u53ef\u8bfb\u7684\u5c5e\u6027\uff0c\u5373\u53ef\u5b9e\u73b0\u884c\u7248\u672c\u53f7\u7684\u529f\u80fd\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u5904\u7406\u884c\u7248\u672c\u53f7\u7684\u66f4\u65b0\u548c\u5e76\u53d1\u68c0\u67e5\u903b\u8f91\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>// \u5b9a\u4e49\u884c\u7248\u672c\u53f7\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n//\u4e3a\u6a21\u578b\u5b9a\u4e49\u5f3a\u7c7b\u578bID\npublic partial record OrderId : IInt64StronglyTypedId;\n\n//\u9886\u57df\u6a21\u578b\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    protected Order() { }\n    public string OrderNo { get; private set; } = string.Empty;\n    public bool Paid { get; private set; }\n    //\u5b9a\u4e49\u884c\u7248\u672c\u53f7\n    public RowVersion Version { get; private set; } = new RowVersion();\n\n    public void SetPaid()\n    {\n        Paid = true;\n    }\n}\n</code></pre>"},{"location":"zh/concurrency/row-version/#rowversion_4","title":"RowVersion\u4e0d\u9002\u5408\u7684\u573a\u666f","text":"<p><code>RowVersion</code>\u9002\u7528\u4e8e\u5e76\u53d1\u91cf\u8f83\u5c0f\u7684\u573a\u666f\uff0c\u5982\u679c\u5e76\u53d1\u91cf\u8f83\u5927\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u884c\u7248\u672c\u53f7\u51b2\u7a81\uff0c\u4ece\u800c\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528<code>\u60b2\u89c2\u9501</code>\u6765\u89e3\u51b3\u5e76\u53d1\u95ee\u9898\u3002</p>"},{"location":"zh/context/context/","title":"\u4e0a\u4e0b\u6587\u4f20\u9012\u7cfb\u7edf","text":""},{"location":"zh/context/context/#_2","title":"\u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587\u4f20\u9012\u7cfb\u7edf","text":"<p>\u4e0a\u4e0b\u6587\u4f20\u9012\u7cfb\u7edf\u662f\u4e00\u4e2a\u7528\u4e8e\u4f20\u9012\u4e0a\u4e0b\u6587\u7684\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u5728\u4e00\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u4e2d\u4f20\u9012\u4e0a\u4e0b\u6587\uff0c\u4f7f\u5f97\u5728\u4e00\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8bbf\u95ee\u5230\u4e0a\u4e0b\u6587\u3002</p>"},{"location":"zh/context/context/#_3","title":"\u5982\u4f55\u6ce8\u5165\u4e0a\u4e0b\u6587","text":"<p>\u5728Program.cs\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u4ee3\u7801\u6ce8\u5165\u4e0a\u4e0b\u6587\uff1a</p> <ol> <li> <p>\u6ce8\u5165\u4e0a\u4e0b\u6587</p> <pre><code>builder.Services.AddContext()  // \u6dfb\u52a0\u4e0a\u4e0b\u6587\n    .AddEnvContext()    // \u6dfb\u52a0\u73af\u5883\u652f\u6301\n    .AddTenantContext() // \u6dfb\u52a0\u79df\u6237\u652f\u6301\n    .AddCapContextProcessor(); // \u6dfb\u52a0\u4e0a\u4e0b\u6587\u5728CAP\u4e2d\u4f20\u9012\u7684\u652f\u6301\uff0c\u4ee5\u652f\u6301\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\u53ef\u4ee5\u6b63\u786e\u8bc6\u522b\u4e0a\u4e0b\u6587\n</code></pre> </li> <li> <p>\u6dfb\u52a0\u4e0a\u4e0b\u6587\u4e2d\u95f4\u4ef6</p> <pre><code>var app = builder.Build();\n\napp.UseContext();\n</code></pre> </li> </ol>"},{"location":"zh/context/context/#_4","title":"\u5982\u4f55\u4f7f\u7528\u4e0a\u4e0b\u6587","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u4e0a\u4e0b\u6587\uff0c\u6bd4\u5982\u5728Endpoint\u4e2d\uff1a</p> <pre><code>public class HomeEndpoint : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"/home\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        // \u83b7\u53d6\u4e0a\u4e0b\u6587\n        var contextAccessor = Resolve&lt;IContextAccessor&gt;();\n        var tenantContext = contextAccessor.GetContext&lt;TenantContext&gt;();\n\n        // \u8bbe\u7f6e\u4e0a\u4e0b\u6587\n        var tenantContext2 = new TenantContext(\"112233\");\n        contextAccessor.SetContext(tenantContext2);\n\n        await SendOkAsync(ct);\n    }\n}\n</code></pre> <p>\u5907\u6ce8\uff1a\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u670d\u52a1\u5185\u8bbe\u7f6e\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u670d\u52a1\u5185\u83b7\u53d6\u4e0a\u4e0b\u6587\uff0c\u4e0a\u4e0b\u6587\u662f\u5728\u4e00\u4e2a\u8bf7\u6c42\u94fe\u8def\u7684\u751f\u547d\u5468\u671f\u5185\u4f20\u9012\u7684\uff0c\u53ef\u4ee5\u8de8\u8d8a\u670d\u52a1\u8fdb\u884c\u4f20\u9012\u3002</p>"},{"location":"zh/context/context/#_5","title":"\u9ed8\u8ba4\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u7c7b\u578b","text":"<p>\u5728\u5305<code>NetCorePal.Context.Shared</code>\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u7c7b\u578b\uff0c\u5982\uff1a</p> <ol> <li> <p>\u79df\u6237\u4e0a\u4e0b\u6587</p> <p>\u7c7b\u578b\uff1a<code>NetCorePal.Context.TenantContext</code>\uff0c\u7528\u4ee5\u4f20\u9012\u5f53\u524d\u8bf7\u6c42\u6240\u5c5e\u79df\u6237\u4fe1\u606f\uff0c\u4ee5\u652f\u6301\u591a\u79df\u6237\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002</p> </li> <li> <p>\u73af\u5883\u4e0a\u4e0b\u6587</p> <p>\u7c7b\u578b\uff1a<code>NetCorePal.Context.EnvContext</code>\uff0c\u7528\u4ee5\u4f20\u9012\u5f53\u524d\u8bf7\u6c42\u7684\u7070\u5ea6\u73af\u5883\u4fe1\u606f\uff0c\u4ee5\u652f\u6301\u7070\u5ea6\u53d1\u5e03\u7684\u5b9e\u73b0\u3002</p> </li> </ol>"},{"location":"zh/context/context/#_6","title":"\u652f\u6301\u7684\u4f20\u9012\u573a\u666f","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0a\u4e0b\u6587\u4f20\u9012\u7cfb\u7edf\u652f\u6301\u4ee5\u4e0b\u573a\u666f\uff1a</p> <ol> <li> <p>\u652f\u6301\u5728Http\u8bf7\u6c42\u4e2d\u4f20\u9012\u4e0a\u4e0b\u6587</p> <p>\u652f\u6301HttpClient\u5bf9\u8c61\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u81ea\u52a8\u4f20\u9012\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u540c\u65f6\u652f\u6301aspnetcore\u63a5\u6536\u8bf7\u6c42\u65f6\uff0c\u81ea\u52a8\u89e3\u6790\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002</p> </li> <li> <p>\u652f\u6301\u5728CAP\u4e2d\u4f20\u9012\u4e0a\u4e0b\u6587</p> <p>\u652f\u6301CAP\u4e2d\u53d1\u9001\u4e8b\u4ef6\u65f6\u81ea\u52a8\u643a\u5e26\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u540c\u65f6\u652f\u6301CAP\u4e2d\u63a5\u6536\u4e8b\u4ef6\u65f6\u81ea\u52a8\u89e3\u6790\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002</p> </li> </ol>"},{"location":"zh/context/custom-context-type/","title":"\u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587\u7c7b\u578b","text":"<p>\u5f53\u5185\u7f6e\u7684\u4e0a\u4e0b\u6587\u7c7b\u578b\u4e0d\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u53ef\u4ee5\u53c2\u7167EnvContext\u7684\u5b9e\u73b0\uff0c\u5b9e\u73b0\u81ea\u5df1\u7684\u4e0a\u4e0b\u6587\u7c7b\u578b\u3002</p>"},{"location":"zh/context/custom-context-type/#_2","title":"\u5982\u4f55\u5b9e\u73b0\u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587\u7c7b\u578b","text":"<ol> <li> <p>\u5b9a\u4e49\u4e0a\u4e0b\u6587\u7c7b\u578b</p> <pre><code>public class CustomContext\n{\n    //\u4e0a\u4e0b\u6587\u4f1a\u88ab\u5b58\u50a8\u4e3a\u4e00\u4e2akey-value\u7684\u5f62\u5f0f\uff0c\u8fd9\u4e2akey\u5c31\u662fContextKey\n    public static string ContextKey { get; set; } = \"x-custom-context\"; \n\n    public CustomContext(string data)\n    {\n        Data = data;\n    }\n\n    public string Data { get; private set; }\n}\n</code></pre> </li> <li> <p>\u5b9e\u73b0<code>IContextCarrierHandler</code>\u63a5\u53e3</p> <pre><code>public class CustomContextCarrierHandler : IContextCarrierHandler\n{\n    public Type ContextType =&gt; typeof(CustomContext);\n\n    public void Inject(IContextCarrier carrier, object? context)\n    {\n        if (context != null)\n        {\n            carrier.Set(CustomContext.ContextKey, ((CustomContext)context).Data);\n        }\n    }\n\n    public object? Initial()\n    {\n        return null;\n    }\n}\n</code></pre> </li> <li> <p>\u5b9e\u73b0<code>IContextSourceHandler</code>\u63a5\u53e3</p> <pre><code>public class CustomContextSourceHandler : IContextSourceHandler\n{\n    public Type ContextType =&gt; typeof(CustomContext);\n\n    public object? Extract(IContextSource source)\n    {\n        var data = source.Get(CustomContext.ContextKey);\n        return string.IsNullOrEmpty(data) ? null : new CustomContext(data);\n    }\n}\n</code></pre> </li> <li> <p>\u6dfb\u52a0\u6ce8\u518c\u4e0a\u4e0b\u6587\u7c7b\u578b</p> <pre><code>public static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddCustomContext(this IServiceCollection services)\n    {\n        services.AddContextCore();\n        services.TryAddSingleton&lt;IContextCarrierHandler, CustomContextCarrierHandler&gt;();\n        services.TryAddSingleton&lt;IContextSourceHandler, CustomContextSourceHandler&gt;();\n        return services;\n    }\n}\n</code></pre> </li> <li> <p>\u5728<code>Program.cs</code>\u6ce8\u518c\u4e0a\u4e0b\u6587\u7c7b\u578b</p> <pre><code>builder.Services.AddContext()  \n    .AddEnvContext()    \n    .AddTenantContext() \n    .AddCustomContext()  // \u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587\n    .AddCapContextProcessor(); \n</code></pre> </li> </ol>"},{"location":"zh/data/id-generator/","title":"ID \u751f\u6210","text":"<p>\u76ee\u524d\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cdID\u751f\u6210\u5668\uff0c\u5206\u522b\u662f<code>Guid</code>\u548c<code>Int64</code>\uff0c\u53ef\u4ee5\u5728<code>IEntityTypeConfiguration&lt;&gt;</code>\u4e2d\u914d\u7f6eID\u751f\u6210\u5668\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a</p>"},{"location":"zh/data/id-generator/#iguidstronglytypedid","title":"\u4f7f\u7528 IGuidStronglyTypedId \u751f\u6210\u5668","text":"<p>\u652f\u6301<code>Guid</code>\u548c<code>GuidVersion7</code>\u4e24\u79cd\u7c7b\u578b\u7684ID\u751f\u6210\u5668\uff0c\u63a8\u8350\u4f7f\u7528<code>GuidVersion7</code>\u3002</p> <pre><code>using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\nnamespace YourNamespace;\n\npublic class OrderEntityTypeConfiguration : IEntityTypeConfiguration&lt;Order&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Order&gt; builder)\n    {\n        //\u4f7f\u7528Guid\u4f5c\u4e3aID\n        builder.Property(x =&gt; x.Id).UseGuidValueGenerator();\n\n        //\u4f7f\u7528Guid Version7 \u4f5c\u4e3aID\n        builder.Property(x =&gt; x.Id).UseGuidVersion7ValueGenerator();\n    }\n}\n</code></pre>"},{"location":"zh/data/id-generator/#id-iint64stronglytypedid","title":"\u4f7f\u7528\u96ea\u82b1ID\u4f5c\u4e3a IInt64StronglyTypedId \u751f\u6210\u5668 (\u4e0d\u63a8\u8350)","text":"<p>\u6dfb\u52a0\u5305<code>NetCorePal.Extensions.Repository.EntityFrameworkCore.Snowflake</code>:</p> <pre><code>dotnet add package NetCorePal.Extensions.Repository.EntityFrameworkCore.Snowflake;\n</code></pre> <pre><code>using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\nnamespace YourNamespace;\n\npublic class OrderEntityTypeConfiguration : IEntityTypeConfiguration&lt;Order&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Order&gt; builder)\n    {\n        //\u4f7f\u7528Int64\u4f5c\u4e3aID\n        builder.Property(x =&gt; x.Id).UseSnowFlakeValueGenerator();\n    }\n}\n</code></pre>"},{"location":"zh/data/repository/","title":"\u4ed3\u50a8","text":"<p>\u4ed3\u50a8\u63d0\u4f9b\u4e86\u5b9e\u4f53\u5230\u6570\u636e\u5e93\u7684\u5b58\u53d6\u80fd\u529b\uff0c\u5e95\u5c42\u4f7f\u7528\u4e86<code>EntityFrameworkCore</code>\u4f5c\u4e3a\u5177\u4f53\u7684\u5b9e\u73b0\u3002</p>"},{"location":"zh/data/repository/#_2","title":"\u521b\u5efa\u4ed3\u50a8","text":"<ol> <li> <p>\u6dfb\u52a0nuget\u5305<code>NetCorePal.Extensions.Repository.EntityFrameworkCore</code>\uff1a</p> <pre><code>dotnet add package NetCorePal.Extensions.Repository.EntityFrameworkCore\n</code></pre> </li> <li> <p>\u5b9a\u4e49\u4ed3\u50a8</p> <pre><code>using NetCorePal.Extensions.Repository;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\n\nnamespace YourRepositoryNamespace;\n\n\n//\u4ed3\u50a8\u63a5\u53e3\uff08\u53ef\u9009\uff09\uff0c\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u4ed3\u50a8\u63a5\u53e3\uff0c\u4ec5\u5b9a\u4e49\u4ed3\u50a8\u7c7b\u3002\npublic interface IOrderRepository : IRepository&lt;Order, OrderId&gt;\n{\n}\n\n//\u4ed3\u50a8\u5b9e\u73b0\npublic class OrderRepository : RepositoryBase&lt;Order, OrderId, ApplicationDbContext&gt;, IOrderRepository\n{\n    public OrderRepository(ApplicationDbContext context) : base(context)\n    {\n    }\n}\n</code></pre> </li> <li> <p>\u5728Program.cs\u4e2d\u6ce8\u518c\u4ed3\u50a8</p> <pre><code>using NetCorePal.Extensions.Repository.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace YourStartupNamespace;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n{\n    options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"));\n});\n\n//\u6ce8\u518c\u4ed3\u50a8\nbuilder.Services.AddRepositories(typeof(OrderRepository).Assembly);\n\n//\u6ce8\u518cUnitOfWork\nbuilder.Services.AddUnitOfWork&lt;ApplicationDbContext&gt;();\n</code></pre> <p>\u5907\u6ce8\uff1a \u4ed3\u50a8\u7c7b\u5c06\u88ab\u6ce8\u518c\u4e3a<code>Scoped</code>\u751f\u547d\u5468\u671f\u3002</p> </li> </ol>"},{"location":"zh/data/unit-of-work/","title":"\u5de5\u4f5c\u5355\u5143\u6a21\u5f0f\uff08UnitOfWork\uff09","text":"<p>\u5de5\u4f5c\u5355\u5143\u6a21\u5f0f\u662f\u4e00\u79cd\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5b83\u5c06\u591a\u4e2a\u64cd\u4f5c\u7ec4\u5408\u6210\u4e00\u4e2a\u5355\u5143\uff0c\u4ee5\u4fbf\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u6267\u884c\u3002\u8fd9\u79cd\u6a21\u5f0f\u6709\u52a9\u4e8e\u7ba1\u7406\u4e8b\u52a1\uff0c\u786e\u4fdd\u6240\u6709\u64cd\u4f5c\u90fd\u6210\u529f\u6216\u5931\u8d25\u3002</p> <p>\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u6765\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5de5\u4f5c\u5355\u5143\u6a21\u5f0f\u7684\u77e5\u8bc6\uff1a\u5de5\u4f5c\u5355\u5143\u6a21\u5f0f</p>"},{"location":"zh/data/unit-of-work/#_1","title":"\u4f7f\u7528\u5de5\u4f5c\u5355\u5143\u6a21\u5f0f","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6846\u67b6\u81ea\u52a8\u7ba1\u7406\u4e86\u6570\u636e\u5e93\u4e8b\u52a1\u7684\u751f\u547d\u5468\u671f\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u4e8b\u52a1\u5904\u7406 \u7ae0\u8282\u3002</p> <p>\u5982\u679c\u4f60\u9700\u8981\u81ea\u884c\u7ba1\u7406\u4e8b\u52a1\uff0c\u6846\u67b6\u63d0\u4f9b\u4e86\u63a5\u53e3 <code>IUnitOfWork</code> \u548c <code>ITransactionUnitOfWork</code> \u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\u3002</p> <ol> <li> <p>\u83b7\u53d6\u5de5\u4f5c\u5355\u5143\u5b9e\u4f8b</p> <p><pre><code>//\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6ce8\u5165\npublic class MyService\n{\n     private readonly IUnitOfWork _unitOfWork;\n\n     public MyService(IUnitOfWork unitOfWork)\n     {\n          _unitOfWork = unitOfWork;\n     }\n}\n\n//\u901a\u8fc7\u5bb9\u5668\u83b7\u53d6\nusing var scope = _serviceProvider.CreateScope();\nvar unitOfWork = scope.ServiceProvider.GetRequiredService&lt;IUnitOfWork&gt;();\nvar transactionUnitOfWork = scope.ServiceProvider.GetRequiredService&lt;ITransactionUnitOfWork&gt;();\n\n\n//\u901a\u8fc7\u4ed3\u50a8\u5b9e\u4f8b\u83b7\u53d6 IUnitOfWork\npublic class MyService\n{\n     private readonly IUnitOfWork _unitOfWork;\n     private readonly IOrderRepository _orderRepository;\n\n     public MyService(IOrderRepository orderRepository)\n     {\n          _orderRepository = orderRepository;\n          _unitOfWork = orderRepository.UnitOfWork;\n     }\n}\n</code></pre>    \u6ce8\u610f\uff1a \u63a5\u53e3 <code>IUnitOfWork</code> \u548c <code>ITransactionUnitOfWork</code> \u751f\u547d\u5468\u671f\u90fd\u662f<code>Scoped</code>\uff0c\u9700\u8981\u5728<code>Scoped</code>\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u3002</p> </li> <li> <p>\u4f7f\u7528\u5de5\u4f5c\u5355\u5143\u7ba1\u7406\u4e8b\u52a1</p> <p>\u5982\u679c\u9700\u8981\u81ea\u884c\u7ba1\u7406\u4e8b\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>ITransactionUnitOfWork</code> \u63a5\u53e3\u6765\u5b9e\u73b0\u3002 <pre><code>using var transaction = transactionUnitOfWork.BeginTransactionAsync();\ntry\n{\n    //\u6267\u884c\u6570\u636e\u5e93\u64cd\u4f5c\n    await _unitOfWork.SaveEntitiesAsync();\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n}\n</code></pre></p> </li> </ol>"},{"location":"zh/domain/domain-entity/","title":"\u9886\u57df\u6a21\u578b","text":""},{"location":"zh/domain/domain-entity/#_2","title":"\u4ecb\u7ecd","text":"<p>\u9886\u57df\u6a21\u578b\u662f\u6307\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u5bf9\u7279\u5b9a\u9886\u57df\u6216\u4e1a\u52a1\u8fdb\u884c\u62bd\u8c61\u548c\u5efa\u6a21\u7684\u8868\u793a\u65b9\u5f0f\u3002\u5b83\u63cf\u8ff0\u4e86\u9886\u57df\u5185\u7684\u5b9e\u4f53\u3001\u6982\u5ff5\u3001\u5173\u7cfb\u548c\u884c\u4e3a\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u4ea4\u4e92\u548c\u53ef\u6267\u884c\u7684\u8868\u793a\u3002\u9886\u57df\u6a21\u578b\u901a\u5e38\u662f\u901a\u8fc7\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u7684\uff0c\u4f8b\u5982\u7c7b\u3001\u5bf9\u8c61\u3001\u5c5e\u6027\u548c\u65b9\u6cd5\u7b49\u3002</p> <p>\u5728\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\uff08Domain-Driven Design\uff0c\u7b80\u79f0DDD\uff09\u4e2d\uff0c\u5f3a\u8c03\u5c06\u9886\u57df\u6a21\u578b\u4f5c\u4e3a\u6838\u5fc3\u7ec4\u4ef6\u6765\u6307\u5bfc\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002DDD\u9f13\u52b1\u5f00\u53d1\u56e2\u961f\u4e0e\u9886\u57df\u4e13\u5bb6\u5bc6\u5207\u5408\u4f5c\uff0c\u5171\u540c\u63a2\u7d22\u548c\u7406\u89e3\u9886\u57df\u7684\u590d\u6742\u6027\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7406\u89e3\u8f6c\u5316\u4e3a\u53ef\u7ef4\u62a4\u548c\u53ef\u6269\u5c55\u7684\u8f6f\u4ef6\u7cfb\u7edf\u3002</p> <p>\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u4e2d\u7684\u9886\u57df\u6a21\u578b\u662f\u901a\u8fc7\u5bf9\u9886\u57df\u4e13\u5bb6\u7684\u77e5\u8bc6\u8fdb\u884c\u5efa\u6a21\u800c\u4ea7\u751f\u7684\u3002\u5b83\u4e0d\u4ec5\u7528\u4e8e\u89e3\u51b3\u95ee\u9898\u57df\u7684\u5206\u6790\u548c\u8bbe\u8ba1\uff0c\u8fd8\u53ef\u4ee5\u5728\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\u3002\u9886\u57df\u6a21\u578b\u4e0e\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u5bc6\u5207\u76f8\u5173\uff0c\u56e0\u4e3a\u9886\u57df\u6a21\u578b\u662f\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u7684\u6838\u5fc3\u8981\u7d20\u4e4b\u4e00\uff0c\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u7406\u89e3\u548c\u5e94\u5bf9\u590d\u6742\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u4ece\u800c\u66f4\u597d\u5730\u6784\u5efa\u9ad8\u8d28\u91cf\u7684\u8f6f\u4ef6\u7cfb\u7edf\u3002</p>"},{"location":"zh/domain/domain-entity/#_3","title":"\u5b9a\u4e49\u9886\u57df\u6a21\u578b","text":"<p>\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u9700\u8981\u4e0b\u5217\u6b65\u9aa4\uff1a</p> <ol> <li> <p>\u5b89\u88c5nuget\u5305 <code>NetCorePal.Extensions.Domain.Abstractions</code></p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>\u5b9a\u4e49\u9886\u57df\u6a21\u578b,\u9700\u8981\uff1a</p> <ul> <li>\u5b9a\u4e49\u4e3a\u6a21\u578b\u5b9a\u4e49\u5f3a\u7c7b\u578bId\uff08\u53ef\u9009\uff09\uff0c\u6a21\u578b\u7c7b\u578b\u53ef\u6839\u636e\u9700\u8981\u81ea\u884c\u5b9a\u4e49\uff1b</li> <li>\u7ee7\u627f<code>NetCorePal.Extensions.Domain.Entity&lt;T&gt;</code>\u7c7b\uff0c\u5e76\u6307\u5b9a\u6a21\u578bId\u7c7b\u578b\uff1b</li> <li>\u5b9e\u73b0<code>IAggregateRoot</code>\u63a5\u53e3\uff08\u53ef\u9009\uff09\uff0c\u4ec5\u5f53\u6a21\u578b\u88ab\u5b9a\u4e49\u4e3a\u805a\u5408\u6839\u65f6\u624d\u9700\u8981\u6807\u8bb0\u8be5\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u8be5\u6a21\u578b\u652f\u6301\u4f5c\u4e3a\u4ed3\u50a8\u7c7b\u578b\u7684\u8303\u578b\u53c2\u6570\uff1b</li> <li>\u4e3a\u6a21\u578b\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684\u53d7\u4fdd\u62a4\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ee5\u652f\u6301EntityFrameworkCore\u6846\u67b6\u5728\u67e5\u8be2\u65f6\u6784\u9020\u9886\u57df\u6a21\u578b\u5b9e\u4f8b\uff1b</li> </ul> <p>\u4e0b\u9762\u4e3a\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>// \u5b9a\u4e49\u9886\u57df\u6a21\u578b\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n//\u4e3a\u6a21\u578b\u5b9a\u4e49\u5f3a\u7c7b\u578bID\npublic partial record UserId : IInt64StronglyTypedId;\n\n//\u9886\u57df\u6a21\u578b\npublic class User : Entity&lt;UserId&gt;, IAggregateRoot\n{\n    protected User() { }\n    public string Name { get; private set; }\n    public string Email { get; set; }\n}\n</code></pre> </li> </ol>"},{"location":"zh/domain/domain-entity/#_4","title":"\u9886\u57df\u6a21\u578b\u5fc5\u987b","text":"<ul> <li>\u9886\u57df\u6a21\u578b\u7684\u5c5e\u6027\u5fc5\u987b\u5bf9\u5916\u53ea\u8bfb\uff0c\u5185\u90e8\u53ef\u5199\uff08private set\uff09\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u7684\u5c5e\u6027\u53d8\u66f4\u5fc5\u987b\u901a\u8fc7\u6a21\u578b\u5b9e\u4f8b\u65b9\u6cd5\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u5fc5\u987b\u6709\u4e00\u4e2a <code>protected</code> \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u7528\u4e8e\u652f\u6301EntityFrameworkCore\u6846\u67b6\u5728\u67e5\u8be2\u65f6\u6784\u9020\u9886\u57df\u6a21\u578b\u5b9e\u4f8b\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u5fc5\u987b\u7ee7\u627f <code>IEntity</code> \u6216 <code>Entity&lt;TKey&gt;</code> \u7c7b\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u7684\u65b9\u6cd5\u5fc5\u987b\u7531<code>CommandHandler</code>\u8c03\u7528\uff1b</li> </ul>"},{"location":"zh/domain/domain-entity/#_5","title":"\u9886\u57df\u6a21\u578b\u53ef\u4ee5","text":"<ul> <li>\u9886\u57df\u6a21\u578b\u53ef\u4ee5\u5b9e\u73b0 <code>IAggregateRoot</code> \u63a5\u53e3\uff0c\u4ee5\u8868\u793a\u8be5\u6a21\u578b\u662f\u4e00\u4e2a\u805a\u5408\u6839\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u7528\u4e8e\u63cf\u8ff0\u9886\u57df\u5185\u7684\u5b9e\u4f53\u3001\u6982\u5ff5\u3001\u5173\u7cfb\u548c\u884c\u4e3a\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u7684\u6784\u9020\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u9886\u57df\u6a21\u578b\u7684\u5c5e\u6027\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u7684\u4e8b\u4ef6\uff0c\u7528\u4e8e\u63cf\u8ff0\u9886\u57df\u6a21\u578b\u7684\u72b6\u6001\u53d8\u5316\uff1b</li> <li>\u9886\u57df\u6a21\u578b\u7684\u89c4\u5219\uff0c\u7528\u4e8e\u9a8c\u8bc1\u9886\u57df\u6a21\u578b\u7684\u5408\u6cd5\u6027\uff1b</li> </ul>"},{"location":"zh/domain/domain-entity/#_6","title":"\u9886\u57df\u6a21\u578b\u4e0d\u8981","text":"<ul> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5f15\u7528\u5916\u90e8\u8d44\u6e90\uff0c\u5982\u6570\u636e\u5e93\u8fde\u63a5\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5904\u7406\u4e0e\u4e1a\u52a1\u65e0\u5173\u7684\u903b\u8f91\uff0c\u5982\u65e5\u5fd7\u8bb0\u5f55\u3001\u5f02\u5e38\u5904\u7406\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u76f4\u63a5\u8c03\u7528\u5916\u90e8\u670d\u52a1\uff0c\u5982Web API\u3001\u6d88\u606f\u961f\u5217\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5904\u7406\u4e0e\u4e1a\u52a1\u65e0\u5173\u7684\u6570\u636e\uff0c\u5982\u914d\u7f6e\u4fe1\u606f\u3001\u73af\u5883\u53d8\u91cf\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5904\u7406\u4e0e\u4e1a\u52a1\u65e0\u5173\u7684\u72b6\u6001\uff0c\u5982\u4f1a\u8bdd\u4fe1\u606f\u3001\u7528\u6237\u4fe1\u606f\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5904\u7406\u4e0e\u4e1a\u52a1\u65e0\u5173\u7684\u884c\u4e3a\uff0c\u5982\u8ddf\u8e2a\u3001\u76d1\u63a7\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5904\u7406\u4e0e\u4e1a\u52a1\u65e0\u5173\u7684\u5f02\u5e38\uff0c\u5982\u7f51\u7edc\u5f02\u5e38\u3001\u6570\u636e\u5e93\u5f02\u5e38\u7b49\uff1b</li> <li>\u4e0d\u8981\u5728\u9886\u57df\u6a21\u578b\u4e2d\u5904\u7406\u4e0e\u4e1a\u52a1\u65e0\u5173\u7684\u4e8b\u4ef6\uff0c\u5982\u5b9a\u65f6\u4efb\u52a1\u3001\u6d88\u606f\u901a\u77e5\u7b49\uff1b</li> </ul>"},{"location":"zh/domain/domain-event/","title":"\u9886\u57df\u4e8b\u4ef6","text":"<p>\u9886\u57df\u4e8b\u4ef6\u662f\u9886\u57df\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u5b83\u662f\u9886\u57df\u6a21\u578b\u4e2d\u7684\u4e00\u79cd\u901a\u4fe1\u673a\u5236\uff0c\u7528\u4e8e\u5728\u9886\u57df\u6a21\u578b\u4e4b\u95f4\u4f20\u9012\u6d88\u606f\u3002</p> <p>\u9886\u57df\u4e8b\u4ef6\u4ec5\u5305\u542b\u63cf\u8ff0\u4e8b\u4ef6\u53d1\u751f\u65f6\u9886\u57df\u6a21\u578b\u4e2d\u7684\u6570\u636e\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\uff0c\u4e1a\u52a1\u89c4\u5219\u548c\u4e1a\u52a1\u6d41\u7a0b\u3002</p>"},{"location":"zh/domain/domain-event/#_2","title":"\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6","text":"<ol> <li> <p>\u5b89\u88c5nuget\u5305 <code>NetCorePal.Extensions.Domain.Abstractions</code></p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\uff0c\u9700\u8981\uff1a</p> <ul> <li>\u7ee7\u627f<code>NetCorePal.Extensions.Domain.IDomainEvent</code>\u63a5\u53e3\uff1b</li> <li>\u4e3a\u9886\u57df\u4e8b\u4ef6\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ee5\u652f\u6301\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff1b</li> <li>\u4e3a\u9886\u57df\u4e8b\u4ef6\u5b9a\u4e49\u4e00\u4e2a\u516c\u5171\u7684\u6784\u9020\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u9886\u57df\u4e8b\u4ef6\u7684\u5c5e\u6027\uff1b</li> <li>\u4e3a\u9886\u57df\u4e8b\u4ef6\u5b9a\u4e49\u4e00\u4e2a\u516c\u5171\u7684\u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u4e8b\u4ef6\u53d1\u751f\u65f6\u9886\u57df\u6a21\u578b\u4e2d\u7684\u6570\u636e\uff1b</li> </ul> <p>\u4e0b\u9762\u4e3a\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>// \u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record UserCreatedDomainEvent(User user) : IDomainEvent;\n</code></pre> </li> </ol>"},{"location":"zh/domain/domain-event/#_3","title":"\u9886\u57df\u4e8b\u4ef6\u5fc5\u987b","text":"<ul> <li>\u9886\u57df\u4e8b\u4ef6\u5fc5\u987b\u7531\u9886\u57df\u6a21\u578b\u53d1\u51fa\uff1b</li> <li>\u9886\u57df\u4e8b\u4ef6\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\uff1b</li> </ul>"},{"location":"zh/domain/domain-event/#_4","title":"\u9886\u57df\u4e8b\u4ef6\u53ef\u4ee5","text":"<ul> <li>\u4f7f\u7528<code>record</code>\u5173\u952e\u5b57\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\uff1b</li> </ul>"},{"location":"zh/domain/domain-event/#_5","title":"\u9886\u57df\u4e8b\u4ef6\u4e0d\u8981","text":"<ul> <li>\u4e0d\u8981\u5305\u542b\u4e1a\u52a1\u903b\u8f91</li> <li>\u4e0d\u8981\u5305\u542b\u4e1a\u52a1\u89c4\u5219</li> <li>\u4e0d\u8981\u5305\u542b\u4e1a\u52a1\u6d41\u7a0b</li> </ul>"},{"location":"zh/domain/domain-value-object/","title":"\u503c\u7c7b\u578b","text":""},{"location":"zh/domain/domain-value-object/#_2","title":"\u4ec0\u4e48\u662f\u503c\u7c7b\u578b","text":""},{"location":"zh/domain/soft-delete/","title":"\u8f6f\u5220\u9664\u7c7b\u578b","text":""},{"location":"zh/domain/soft-delete/#deleted","title":"Deleted \u7c7b\u578b","text":""},{"location":"zh/domain/soft-delete/#_2","title":"\u4ecb\u7ecd","text":"<p><code>Deleted</code> \u662f\u4e00\u4e2a<code>record</code>\u7c7b\u578b\uff0c\u5185\u90e8\u5c01\u88c5\u4e86<code>bool</code>\u503c\uff0c\u9ed8\u8ba4\u4e3afalse\uff0c\u7528\u4e8e\u6807\u8bb0\u6570\u636e\u662f\u5426\u5df2\u88ab\u8f6f\u5220\u9664\u3002\u6846\u67b6\u4f1a\u6839\u636e\u6b64\u5c5e\u6027\u81ea\u52a8\u8fdb\u884c\u67e5\u8be2\u8fc7\u6ee4\u3002</p>"},{"location":"zh/domain/soft-delete/#_3","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u5728\u5b9e\u4f53\u7c7b\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49 <code>Deleted</code> \u7c7b\u578b\u7684\u5c5e\u6027\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6846\u67b6\u4e0d\u4f1a\u81ea\u52a8\u7ef4\u62a4\u8be5\u5c5e\u6027\u7684\u503c\uff0c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u5220\u9664\u65b9\u6cd5\u6765\u66f4\u65b0\u6b64\u503c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    protected Order() { }\n\n    /// &lt;summary&gt;\n    /// \u5220\u9664\u6807\u8bb0\n    /// &lt;/summary&gt;\n    public Deleted IsDeleted { get; private set; } = new ();\n\n    public void SoftDelete()\n    {\n        IsDeleted = true;\n    }\n}\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cOrder \u5b9e\u4f53\u7c7b\u5305\u542b\u4e00\u4e2a IsDeleted \u5c5e\u6027\uff0c\u521d\u59cb\u503c\u4e3a false\uff0c\u8868\u793a\u6570\u636e\u672a\u88ab\u5220\u9664\u3002SoftDelete \u65b9\u6cd5\u7528\u4e8e\u5c06 IsDeleted \u5c5e\u6027\u8bbe\u7f6e\u4e3a true\uff0c\u6807\u8bb0\u6570\u636e\u5df2\u88ab\u8f6f\u5220\u9664\u3002</p>"},{"location":"zh/domain/soft-delete/#_4","title":"\u9690\u5f0f\u8f6c\u6362","text":"<p>\u652f\u6301\u4e0e<code>bool</code>\u7c7b\u578b\u7684\u65e0\u7f1d\u8f6c\u6362\uff1a</p> <pre><code>Deleted deleted = true;  // \u81ea\u52a8\u8f6c\u6362\u4e3aDeleted\u7c7b\u578b\nbool isDeleted = deleted; // \u81ea\u52a8\u89e3\u5305\u4e3abool\u503c\n</code></pre>"},{"location":"zh/domain/soft-delete/#_5","title":"\u63a7\u5236\u6570\u636e\u5e93\u5b57\u6bb5\u5c5e\u6027","text":"<p>\u4f7f\u7528<code>[Column]</code>\u7279\u6027\u6765\u63a7\u5236\u6570\u636e\u5e93\u5b57\u6bb5\u7684\u540d\u79f0\uff1a</p> <pre><code>[Column(Name = \"is_deleted\")]\npublic Deleted IsDeleted { get; private set; }\n</code></pre>"},{"location":"zh/domain/soft-delete/#deletedtime","title":"DeletedTime \u7c7b\u578b","text":""},{"location":"zh/domain/soft-delete/#_6","title":"\u4ecb\u7ecd","text":"<p><code>DeletedTime</code> \u662f\u4e00\u4e2a<code>record</code>\u7c7b\u578b\uff0c\u5185\u90e8\u5c01\u88c5\u4e86<code>DateTimeOffset</code>\uff0c\u7528\u4e8e\u8bb0\u5f55\u6570\u636e\u88ab\u8f6f\u5220\u9664\u7684\u65f6\u95f4\u3002\u9700\u4e0e<code>Deleted</code>\u7c7b\u578b\u914d\u5408\u4f7f\u7528\u3002</p>"},{"location":"zh/domain/soft-delete/#_7","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u5728\u5b9e\u4f53\u4e2d\u5b9a\u4e49<code>DeletedTime</code>\u7c7b\u578b\u7684\u5c5e\u6027\uff0c\u6846\u67b6\u4f1a\u5728\u5b9e\u4f53\u4e2d<code>Deleted</code>\u7c7b\u578b\u7684\u5c5e\u6027\u503c\u66f4\u65b0\u4e3atrue\u65f6\u81ea\u52a8\u8bbe\u7f6e\u65f6\u95f4\u6233\uff1a</p> <pre><code>public class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    protected Order() { }\n\n    /// &lt;summary&gt;\n    /// \u5220\u9664\u6807\u8bb0\n    /// &lt;/summary&gt;\n    public Deleted IsDeleted { get; private set; } = new Deleted(false);\n\n    /// &lt;summary&gt;\n    /// \u5220\u9664\u65f6\u95f4\n    /// &lt;/summary&gt;\n    public DeletedTime DeletedAt { get; private set; }\n\n    public void SoftDelete()\n    {\n        IsDeleted = true;\n    }\n}\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cOrder \u5b9e\u4f53\u7c7b\u5305\u542b IsDeleted \u548c DeletedAt \u4e24\u4e2a\u5c5e\u6027\u3002\u5f53\u8c03\u7528 SoftDelete \u65b9\u6cd5\u5c06 IsDeleted \u8bbe\u7f6e\u4e3a true \u65f6\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u4e3a DeletedAt \u5c5e\u6027\u8bb0\u5f55\u5f53\u524d\u65f6\u95f4\u3002</p>"},{"location":"zh/domain/soft-delete/#_8","title":"\u63a7\u5236\u6570\u636e\u5e93\u5b57\u6bb5\u5c5e\u6027","text":"<p>\u4f7f\u7528<code>[Column]</code>\u7279\u6027\u6765\u63a7\u5236\u6570\u636e\u5e93\u5b57\u6bb5\u7684\u540d\u79f0\uff1a</p> <pre><code>[Column(Name = \"deleted_at\")]\npublic DeletedTime DeletedAt { get; private set; }\n</code></pre>"},{"location":"zh/domain/soft-delete/#_9","title":"\u6700\u4f73\u5b9e\u8df5","text":"<p>\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u5728\u591a\u4e2a\u5b9e\u4f53\u7c7b\u4e2d\u4f7f\u7528\u8f6f\u5220\u9664\u529f\u80fd\uff0c\u5efa\u8bae\u81ea\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u5c06 Deleted \u548c DeletedTime \u7c7b\u578b\u7684\u5c5e\u6027\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>public interface ISoftDelete\n{\n    public Deleted IsDeleted { get; private set; }\n    public DeletedTime DeletedAt { get; private set; }\n}\n</code></pre>"},{"location":"zh/domain/strong-typed-id/","title":"\u5f3a\u7c7b\u578b\u5b9e\u4f53ID","text":""},{"location":"zh/domain/strong-typed-id/#_1","title":"\u4ecb\u7ecd","text":"<p>\u5728\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u5efa\u6a21\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u4f53ID\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5b83\u662f\u5b9e\u4f53\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u662f\u5b9e\u4f53\u7684\u4e3b\u952e\uff0c\u662f\u5b9e\u4f53\u7684\u91cd\u8981\u5c5e\u6027\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u4f7f\u7528<code>int</code>\u3001<code>long</code>\u3001<code>Guid</code>\u3001<code>string</code>\u7b49\u7c7b\u578b\u6765\u5b9a\u4e49\u5b9e\u4f53ID\uff0c\u4f46\u5728\u7cfb\u7edf\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e0b\u5217\u95ee\u9898\uff1a</p> <ol> <li>\u5f53\u5b9a\u4e49\u4e00\u4e2aID\u503c\u65f6\uff0c\u65e0\u6cd5\u4ece\u7c7b\u578b\u4e0a\u5224\u65ad\u5b83\u4ee3\u8868\u5b9e\u4f53ID\u8fd8\u662f\u5176\u5b83\u7c7b\u578b\uff0c\u56e0\u6b64\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u4f1a\u53d8\u5dee</li> <li>\u5728\u4e3a\u4e00\u4e2a\u5b9e\u4f53\u4e0a\u5f15\u7528\u7684ID\u5b57\u6bb5\u8d4b\u503c\u65f6\uff0c\u5bb9\u6613\u51fa\u73b0\u5c06\u975e\u9884\u671f\u7684\u5176\u5b83\u7c7b\u578b\u503c\u8d4b\u503c\u7ed9ID\u5b57\u6bb5\uff0c\u4ece\u800c\u5bfc\u81f4\u9519\u8bef</li> </ol> <p>\u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528<code>\u5f3a\u7c7b\u578b\u5b9e\u4f53ID</code>\uff0c\u5f3a\u7c7b\u578b\u5b9e\u4f53ID\u662f\u57fa\u4e8e\u57fa\u7840\u7c7b\u578b\u7684\u5c01\u88c5\uff0c\u76ee\u524d\u652f\u6301\u7684\u57fa\u7840\u7c7b\u578b\u6709\uff1a</p> <ul> <li>Int32</li> <li>Int64</li> <li>Guid</li> <li>String</li> </ul>"},{"location":"zh/domain/strong-typed-id/#_2","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u5f3a\u7c7b\u578bid\u9700\u8981\u5173\u952e\u5b57 <code>public</code>\u3001<code>partial</code> \u548c<code>record</code> \u6765\u4fee\u9970\uff0c\u540c\u65f6\u9700\u8981\u5b9e\u73b0 <code>IInt32StronglyTypedId</code>\u3001<code>IInt64StronglyTypedId</code>\u3001<code>IGuidStronglyTypedId</code>\u3001<code>IStringStronglyTypedId</code> \u63a5\u53e3\u4e4b\u4e00\u3002</p> <ol> <li> <p>\u9879\u76ee\u6dfb\u52a0\u5f15\u7528 <code>NetCorePal.Extensions.Domain.Abstractions</code> \u5305\u3002</p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>\u60a8\u53ef\u4ee5\u7f16\u5199\u7c7b\u4f3c\u4e0b\u5217\u4ee3\u7801\u6765\u5b9e\u73b0\u5f3a\u7c7b\u578b\u5b9e\u4f53ID\uff1a</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic partial record Int64OrderId : IInt64StronglyTypedId;\n</code></pre> <p>\u4e0b\u9762\u4ee3\u7801\u5219\u7531<code>SourceGenerator</code>\u81ea\u52a8\u751f\u6210\uff1a</p> <pre><code>using NetCorePal.Extensions.Domain;\nusing System;\nusing System.ComponentModel;\nnamespace YourNamespace;\n\n[TypeConverter(typeof(EntityIdTypeConverter&lt;Int64OrderId, Int64&gt;))]\npublic partial record Int64OrderId(Int64 Id) : IInt64StronglyTypedId\n{\n    public static implicit operator Int64(Int64OrderId id) =&gt; id.Id;\n    public static implicit operator Int64OrderId(Int64 id) =&gt; new Int64OrderId(id);\n    public override string ToString()\n    {\n        return Id.ToString();\n    }\n}\n</code></pre> <p>\u66f4\u591a\u793a\u4f8b\uff1a</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n\n// Int32 \u5f3a\u7c7b\u578b\u5b9e\u4f53ID\npublic partial record Int32OrderId : IInt32StronglyTypedId;\n\n// Guid \u5f3a\u7c7b\u578b\u5b9e\u4f53ID\npublic partial record GuidOrderId : IGuidStronglyTypedId;\n\n// String \u5f3a\u7c7b\u578b\u5b9e\u4f53ID\npublic partial record StringOrderId : IStringStronglyTypedId;\n</code></pre> </li> </ol>"},{"location":"zh/domain/strong-typed-id/#json","title":"Json\u5e8f\u5217\u5316\u652f\u6301","text":"<p>\u5728\u670d\u52a1\u95f4\u8c03\u7528\u3001WebAPI\u7b49\u573a\u666f\u4e2d\uff0c\u901a\u5e38\u4f1a\u6d89\u53ca\u5230\u5b9e\u4f53\u7c7b\u578b\u4e0eJson\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5f3a\u7c7b\u578b\u5b9e\u4f53ID\u80fd\u591f\u5728\u8fd9\u4e9b\u573a\u666f\u4e2d\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u57fa\u4e8e<code>System.Text.Json</code>\u548c<code>Newtonsoft.Json</code>\u7684\u5e8f\u5217\u5316\u652f\u6301\u3002</p> <ol> <li> <p>\u5bf9\u4e8e<code>System.Text.Json</code>\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a</p> <pre><code>using NetCorePal.Extensions.Domain.Json;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddMvc().AddControllersAsServices().AddJsonOptions(options =&gt;\n{\n    options.JsonSerializerOptions.Converters.Add(new EntityIdJsonConverterFactory());\n});\n</code></pre> </li> <li> <p>\u5bf9\u4e8e<code>Newtonsoft.Json</code>\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a</p> <p>\u6dfb\u52a0<code>NetCorePal.Extensions.AspNetCore</code>\u5305</p> <pre><code>dotnet add package NetCorePal.Extensions.AspNetCore\n</code></pre> <p>\u6dfb\u52a0\u4e0b\u9762\u4ee3\u7801\u5230<code>Startup.cs</code>\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>builder.Services.AddControllers().AddNewtonsoftJson(options =&gt;\n{\n    options.SerializerSettings.Converters.Add(new NewtonsoftEntityIdJsonConverter());\n});\n</code></pre> <p>\u4e0b\u9762\u793a\u4f8b\u8868\u793a\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\u6548\u679c\uff1a</p> <pre><code>JsonSerializerOptions options = new();\noptions.Converters.Add(new EntityIdJsonConverterFactory());\n\nvar id = JsonSerializer.Deserialize&lt;OrderId1&gt;(\"\\\"12\\\"\", options);\nAssert.NotNull(id);\nAssert.True(id.Id == 12);\nvar id2 = new OrderId2(2);\nvar json = JsonSerializer.Serialize(id2, options);\nAssert.Equal(\"\\\"2\\\"\", json);\n</code></pre> </li> </ol> <p>\u6ce8\u610f\uff1a \u5f3a\u7c7b\u578b\u5b9e\u4f53ID\u90fd\u4f1a\u5f53\u4f5c\u5b57\u7b26\u4e32\u6765\u5e8f\u5217\u5316\u3002</p>"},{"location":"zh/domain/strong-typed-id/#id_1","title":"ID \u751f\u6210","text":"<p>\u5173\u4e8e ID \u751f\u6210\uff0c\u89c1 ID \u751f\u6210 \u6587\u6863\u3002</p>"},{"location":"zh/domain/update-time/","title":"\u66f4\u65b0\u65f6\u95f4\u7c7b\u578b","text":""},{"location":"zh/domain/update-time/#_2","title":"\u4ecb\u7ecd","text":"<p><code>UpdateTime</code> \u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff0c\u5185\u90e8\u5c01\u88c5\u4e86<code>DateTimeOffset</code>\uff0c\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u901a\u5e38\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u6570\u636e\u7684\u66f4\u65b0\u65f6\u95f4\u3002</p>"},{"location":"zh/domain/update-time/#_3","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u4e3a\u5b9e\u4f53\u5b9a\u4e49\u4e00\u4e2a<code>UpdateTime</code>\u7c7b\u578b\u7684\u5c5e\u6027\uff0c\u5373\u53ef\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u5904\u7406\u5176\u503c\u7684\u66f4\u65b0\u3002</p> <pre><code>using NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    /// &lt;summary&gt;\n    /// \n    /// &lt;/summary&gt;\n    protected Order()\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// \u66f4\u65b0\u65f6\u95f4\n    /// &lt;/summary&gt;\n    public UpdateTime UpdateAt { get; private set; } = new UpdateTime(DateTimeOffset.UtcNow);\n}\n</code></pre>"},{"location":"zh/domain/update-time/#_4","title":"\u63a7\u5236\u6570\u636e\u5e93\u5b57\u6bb5\u5c5e\u6027","text":"<p>\u4f7f\u7528<code>[Column]</code>\u7279\u6027\u6765\u63a7\u5236\u6570\u636e\u5e93\u5b57\u6bb5\u7684\u540d\u79f0\uff1a</p> <pre><code>using NetCorePal.Extensions.Domain;\nusing System.ComponentModel.DataAnnotations.Schema;\nnamespace YourNamespace;\n\npublic class Order : Entity&lt;OrderId&gt;, IAggregateRoot\n{\n    /// &lt;summary&gt;\n    /// \n    /// &lt;/summary&gt;\n    protected Order()\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// \u66f4\u65b0\u65f6\u95f4\n    /// &lt;/summary&gt;\n    [Column(name:\"update_at\")]\n    public UpdateTime UpdateAt { get; private set; } = new UpdateTime(DateTimeOffset.UtcNow);\n}\n</code></pre>"},{"location":"zh/env/multi-env/","title":"\u591a\u73af\u5883\u652f\u6301","text":""},{"location":"zh/env/multi-env/#_2","title":"\u4ec0\u4e48\u662f\u591a\u73af\u5883\u652f\u6301","text":"<p>\u591a\u73af\u5883\u662f\u6307\u5728\u540c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\uff0c\u540c\u65f6\u90e8\u7f72\u591a\u4e2a\u7248\u672c\u7684\u670d\u52a1\uff0c\u5e76\u901a\u8fc7\u4e0a\u4e0b\u6587\u7cfb\u7edf\uff0c\u4f7f\u5f97\u7528\u6237\u7684\u8bf7\u6c42\u53ef\u4ee5\u88ab\u671f\u671b\u7684\u7248\u672c\u5904\u7406\u7684\u80fd\u529b\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u671f\u671b\u591a\u7248\u672c\u540c\u65f6\u8fd0\u884c\uff0c\u5219\u9700\u8981\u5728\u96c6\u7fa4\u4e2d\u4e3a\u65b0\u7684\u7248\u672c\u90e8\u7f72\u6240\u6709\u7684\u5e94\u7528\u670d\u52a1\uff0c\u6709\u4e86\u591a\u73af\u5883\u652f\u6301\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u96c6\u7fa4\u4e2d\u4ec5\u90e8\u7f72\u53d8\u66f4\u7684\u670d\u52a1\u5373\u53ef\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5c06\u8bf7\u6c42\u8def\u7531\u5230\u6b63\u786e\u7684\u670d\u52a1\u4e2d\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u73af\u5883\u652f\u6301\u7684\u67b6\u6784\u56fe\uff0c\u4e0d\u540c\u7684\u7684\u7ebf\uff0c\u4ee3\u8868\u7740\u4e0d\u540c\u7248\u672c\u7684\u8bf7\u6c42\u7684\u5904\u7406\u8def\u5f84\uff1a</p> <p></p>"},{"location":"zh/env/multi-env/#_3","title":"\u542f\u7528\u591a\u73af\u5883\u652f\u6301","text":"<ol> <li>\u6dfb\u52a0\u4f9d\u8d56\u5305</li> </ol> <pre><code>dotnet add package NetCorePal.Extensions.MultiEnv\ndotnet add package NetCorePal.Extensions.MicrosoftServiceDiscovery  //\u5982\u679c\u4f7f\u7528Microsoft.Extensions.ServiceDiscovery\u4f5c\u4e3a\u670d\u52a1\u53d1\u73b0\n</code></pre> <ol> <li> <p>\u6dfb\u52a0\u73af\u5883\u4e0a\u4e0b\u6587</p> <pre><code>builder.Services.AddContext()  \n    .AddEnvContext()    // \u6dfb\u52a0\u73af\u5883\u652f\u6301\n    .AddTenantContext() \n    .AddCapContextProcessor(); \n</code></pre> </li> <li> <p>\u6dfb\u52a0\u591a\u73af\u5883\u652f\u6301</p> </li> </ol> <p>\u53ef\u4ee5\u4f7f\u7528<code>NetCorePalServiceDiscovery</code>\u6216\u8005<code>Microsoft.Extensions.ServiceDiscovery</code>\u4f5c\u4e3a\u591a\u73af\u5883\u7684\u670d\u52a1\u53d1\u73b0\u652f\u6301    <pre><code>builder.Services.AddMultiEnv(options =&gt;\n  {\n      options.ServiceName = \"MyServiceName\";\n      options.ServiceEnv = \"main\";\n  })\n  .UseNetCorePalServiceDiscovery(); //\u4f7f\u7528NetCorePalServiceDiscovery\u4f5c\u4e3a\u591a\u73af\u5883\u7684\u670d\u52a1\u53d1\u73b0\u652f\u6301\n  //.UseMicrosoftServiceDiscovery();  //\u4f7f\u7528Microsoft.Extensions.ServiceDiscovery\u4f5c\u4e3a\u591a\u73af\u5883\u7684\u670d\u52a1\u53d1\u73b0\u652f\u6301\n</code></pre></p> <ol> <li>\u4f7f\u7528<code>Microsoft.Extensions.ServiceDiscovery</code>\u591a\u73af\u5883\u652f\u6301</li> </ol> <p>\u5982\u679c\u4f60\u7684\u670d\u52a1\u53d1\u73b0\u4f7f\u7528\u7684\u662f<code>Microsoft.Extensions.ServiceDiscovery</code>\uff0c\u9700\u8981\u5c06<code>AddServiceDiscovery</code> \u66ff\u6362\u4e3a <code>AddMultiEnvMicrosoftServiceDiscovery</code></p> <pre><code>\u4fee\u6539\u6ce8\u518c\u4ee3\u7801\n```csharp\n// \u6ce8\u518cMicrosoft.Extensions.ServiceDiscovery\nbuilder.Services.AddMultiEnvMicrosoftServiceDiscovery()  // \u5c06`AddServiceDiscovery` \u66ff\u6362\u4e3a `AddMultiEnvMicrosoftServiceDiscovery`\n    .AddConfigurationServiceEndpointProvider();\n\n//\u6ce8\u518cHttpClient\u5e76\u914d\u7f6e\u670d\u52a1\u53d1\u73b0\nbuilder.Services.AddHttpClient&lt;CatalogClient&gt;()\n    .AddMultiEnvMicrosoftServiceDiscovery();   // \u5c06`AddServiceDiscovery` \u66ff\u6362\u4e3a `AddMultiEnvMicrosoftServiceDiscovery`\n```\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879\uff1a\u76ee\u524d\u57fa\u4e8e<code>Microsoft.Extensions.ServiceDiscovery</code>\u7684\u591a\u73af\u5883\u7684\u652f\u6301\uff0c\u4f9d\u8d56\u670d\u52a1\u6ce8\u518c\u53d1\u73b0\u4e2d\u53ef\u4ee5\u660e\u786e\u83b7\u53d6\u5230\u7684\u670d\u52a1\u5217\u8868\uff0c\u5bf9\u4e8e<code>PassThroughServiceEndpointProvider</code>\u7684\u670d\u52a1\uff0c\u4e0d\u4f1a\u88ab\u8bc6\u522b\u4e3a\u6709\u6548\u7684\u670d\u52a1\uff0c\u56e0\u4e3a\u65e0\u6cd5\u786e\u5b9a\u8be5\u670d\u52a1\u662f\u5426\u771f\u7684\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d\uff0c\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u611f\u77e5\u5230\u7070\u5ea6\u7248\u672c\u7684\u5b58\u5728\uff0c\u6d41\u91cf\u90fd\u4f1a\u5411\u9ed8\u8ba4\u7248\u672c\u53d1\u8d77\u3002</p>"},{"location":"zh/env/multi-env/#_4","title":"\u4f7f\u7528\u591a\u73af\u5883","text":"<p>\u591a\u73af\u5883\u7cfb\u7edf\u4e3b\u8981\u901a\u8fc7\u73af\u5883\u4e0a\u4e0b\u6587\u6765\u4f20\u9012\u8bf7\u6c42\u7684\u73af\u5883\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u7cfb\u7edf\u7684\u5165\u53e3\u5904\u8bbe\u7f6e\u73af\u5883\u4fe1\u606f\uff0c\u4f8b\u5982\u5728Yarp\u7f51\u5173\u4e2d\uff0c\u5b9a\u4e49\u4e00\u4e2a\u903b\u8f91\uff1a</p> <pre><code> app.Use((context, next) =&gt;\n {\n     var contextAccessor = context.RequestServices.GetRequiredService&lt;IContextAccessor&gt;();\n     contextAccessor.SetContext(new EnvContext(\"v2\")); //\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u767b\u5f55\u7528\u6237\u51b3\u5b9a\u73af\u5883\u7248\u672c\n     return next();\n });\n</code></pre> <p>\u901a\u8fc7\u4e0a\u9762\u7684\u8bbe\u7f6e\uff0c\u540e\u7eed\u7684\u6240\u6709\u8bf7\u6c42\uff0c\u90fd\u4f1a\u88ab\u8def\u7531\u5230\u5bf9\u5e94\u7684<code>v2</code>\u7248\u672c\u7684\u670d\u52a1\u4e2d\u8fdb\u884c\u5904\u7406\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u670d\u52a1\u4e0d\u5b58\u5728<code>v2</code>\u7248\u672c\uff0c\u5219\u4f1a\u8def\u7531\u5230\u9ed8\u8ba4\u7248\u672c\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"zh/events/domain-event-handler/","title":"\u9886\u57df\u4e8b\u4ef6\u5904\u7406","text":"<p>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u662f\u4e00\u4e2a\u56e0<code>\u7279\u5b9a\u76ee\u7684</code>\u800c\u5904\u7406<code>\u9886\u57df\u4e8b\u4ef6</code>\u7684\u5904\u7406\u903b\u8f91\uff0c\u4e00\u4e2a\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u5e94\u8be5\u4ec5\u9488\u5bf9\u4e00\u4e2a\u76ee\u7684\u6765\u5904\u7406\u9886\u57df\u4e8b\u4ef6\uff0c\u9488\u5bf9\u540c\u4e00<code>\u9886\u57df\u4e8b\u4ef6</code>\u7684\u4e0d\u540c\u76ee\u7684\u5e94\u8be5\u6709\u4e0d\u540c\u7684\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u3002</p>"},{"location":"zh/events/domain-event-handler/#_2","title":"\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668","text":"<ol> <li> <p>\u5b89\u88c5nuget\u5305 <code>NetCorePal.Extensions.Domain.Abstractions</code></p> <pre><code>dotnet add package NetCorePal.Extensions.Domain.Abstractions\n</code></pre> </li> <li> <p>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86<code>IDomainEventHandler&lt;TDomainEvent&gt;</code>\u63a5\u53e3\u7684\u7c7b\uff0c\u5176\u4e2d<code>TDomainEvent</code>\u662f\u9886\u57df\u4e8b\u4ef6\u7684\u7c7b\u578b\u3002</p> </li> </ol> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u7684\u4f8b\u5b50\uff1a</p> <pre><code>```csharp\npublic class OrderCreatedDomainEventHandler(IMediator mediator) : IDomainEventHandler&lt;OrderCreatedDomainEvent&gt;\n{\n    public Task Handle(OrderCreatedDomainEvent notification, CancellationToken cancellationToken)\n    {\n        return mediator.Send(new DeliverGoodsCommand(notification.Order.Id), cancellationToken);\n    }\n}\n```\n</code></pre>"},{"location":"zh/events/domain-event-handler/#_3","title":"\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u5fc5\u987b","text":"<ul> <li>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u5fc5\u987b\u662f\u5e42\u7b49\u7684\uff0c\u5373\u591a\u6b21\u5904\u7406\u540c\u4e00\u9886\u57df\u4e8b\u4ef6\uff0c\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u81f4\u7684\uff1b</li> <li>\u540c\u4e00\u4e2a\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u53ea\u80fd\u53d1\u51fa\u4e00\u4e2a\u547d\u4ee4\uff0c\u4e0d\u5141\u8bb8\u5728\u4e00\u4e2a\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u53d1\u51fa\u591a\u4e2a\u547d\u4ee4\uff1b</li> </ul> <p>\u5907\u6ce8\uff1a \u5728\u6211\u4eec\u7684\u6846\u67b6\u4e2d\uff0c\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u662f\u540c\u6b65\u6267\u884c\u7684\uff0c\u5e76\u4e14\u5176\u8c03\u7528\u7684Command\u4e0e\u89e6\u53d1\u9886\u57df\u4e8b\u4ef6\u7684CommandHandler\u5904\u4e8e\u540c\u4e00\u4e8b\u52a1\u4e2d</p>"},{"location":"zh/events/domain-event-handler/#_4","title":"\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u53ef\u4ee5","text":"<ul> <li>\u4e00\u4e2a\u9886\u57df\u4e8b\u4ef6\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\uff1b</li> <li>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u53ef\u4ee5\u4f7f\u7528<code>MediatR</code>\u6846\u67b6\u6765\u53d1\u9001\u547d\u4ee4\uff1b</li> <li>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u53ef\u4ee5\u4ece\u591a\u4e2a\u67e5\u8be2\u4e2d\u83b7\u53d6\u6570\u636e\uff1b</li> <li>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u53ef\u4ee5\u8c03\u7528\u5916\u90e8\u670d\u52a1\u6765\u5b8c\u6210\u4e00\u4e9b\u4fe1\u606f\u7ec4\u7ec7\u548c\u9a8c\u8bc1\uff1b</li> <li>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u53ef\u4ee5\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6\u6765\u5c06\u4e8b\u4ef6\u4f20\u9012\u7ed9\u5176\u5b83\u7cfb\u7edf\uff1b</li> </ul>"},{"location":"zh/events/domain-event-handler/#_5","title":"\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e0d\u8981","text":"<ul> <li>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u4e0d\u8981\u5305\u542b\u9886\u57df\u6a21\u578b\u7684\u64cd\u4f5c\uff0c\u5e94\u8be5\u7531CommandHandler\u64cd\u4f5c\u9886\u57df\u6a21\u578b\u5e76\u6301\u4e45\u5316\uff1b</li> </ul> <p>\u5907\u6ce8\uff1a \u7531\u4e8e\u6211\u4eec\u6846\u67b6\u4ec5\u5bf9<code>CommandHandler</code>\u505a\u4e86\u4e8b\u52a1\u7ba1\u7406\uff0c\u5bf9\u4e8e\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u7684\u64cd\u4f5c\u6846\u67b6\u4e0d\u4f1a\u505a<code>SaveChangesAsync</code>\uff0c\u4ece\u800c\u5bfc\u81f4\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u7684\u64cd\u4f5c\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d</p>"},{"location":"zh/events/integration-converter/","title":"\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668","text":"<p>\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668\u5c06\u9886\u57df\u4e8b\u4ef6\u53d1\u9001\u6210\u96c6\u6210\u4e8b\u4ef6\u7684\u8f6c\u6362\u5de5\u5177\u3002</p> <p>\u901a\u8fc7\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668\u53ef\u4ee5\u5c06\u8981\u53d1\u9001\u96c6\u6210\u4e8b\u4ef6\u4e0e\u5176\u4ed6\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u4e1a\u52a1\u903b\u8f91\u89e3\u8026\u3002</p>"},{"location":"zh/events/integration-converter/#_2","title":"\u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668","text":"<ol> <li>\u5b89\u88c5nuget\u5305 <code>NetCorePal.Extensions.DistributedTransactions.Abstractions</code></li> </ol> <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.Abstractions\n</code></pre> <ol> <li> <p>\u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668\uff0c\u9700\u8981\uff1a</p> </li> <li> <p>\u7ee7\u627f<code>NetCorePal.Extensions.DistributedTransactions.IIntegrationEventConverter</code>\u63a5\u53e3\uff1b</p> </li> <li>\u5b9e\u73b0IIntegrationEventConverter\u63a5\u53e3\u7684Convert\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5165\u53c2\u4e3a\u9886\u57df\u4e8b\u4ef6IDomainEvent\uff0c\u8fd4\u53c2\u4e3a\u96c6\u6210\u4e8b\u4ef6IntegrationEvent</li> </ol> <p>\u200b       \u4e0b\u9762\u4e3a\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>// \u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668\nusing NetCorePal.Web.Application.IntegrationConvert;\nnamespace YourNamespace;\n\npublic class OrderCreatedIntegrationEventConverter : \n    IIntegrationEventConverter&lt;OrderCreatedDomainEvent, OrderCreatedIntegrationEvent&gt;\n{\n    public OrderCreatedIntegrationEvent Convert(OrderCreatedDomainEvent domainEvent)\n    {\n        return new OrderCreatedIntegrationEvent(domainEvent.Order.Id);\n    }\n}\n</code></pre> <ol> <li>\u6846\u67b6\u81ea\u5e26\u4ee3\u7801\u751f\u6210\u5668\u81ea\u52a8\u751f\u6210\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668</li> </ol> <p>\u5982\u4e0b\u4e3a\u4ee3\u7801\u751f\u6210\u5668\u751f\u6210\u7684\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\uff1a</p> <pre><code>// &lt;auto-generated/&gt;\nusing NetCorePal.Web.Application.IntegrationConverters;\nusing NetCorePal.Extensions.DistributedTransactions;\nusing NetCorePal.Extensions.Domain;\nusing NetCorePal.Web;\nnamespace YourNamespace;\n{\n    /// &lt;summary&gt;\n    /// OrderCreatedIntegrationEventConverterDomainEventHandlers\n    /// &lt;/summary&gt;\n    public class OrderCreatedIntegrationEventConverterDomainEventHandler(IIntegrationEventPublisher integrationEventPublisher,\nOrderCreatedIntegrationEventConverter converter) : IDomainEventHandler&lt;OrderCreatedDomainEvent&gt;\n    {\n        /// &lt;summary&gt;\n        /// OrderCreatedIntegrationEventConverterDomainEventHandler\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"notification\"&gt;notification&lt;/param&gt;\n        /// &lt;param name=\"cancellationToken\"&gt;cancellationToken&lt;/param&gt;\n        public async Task Handle(OrderCreatedDomainEvent notification, CancellationToken cancellationToken){\n            // \u8f6c\u79fb\u64cd\u4f5c\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6\n            var integrationEvent = converter.Convert(notification);\n            await integrationEventPublisher.PublishAsync(integrationEvent, cancellationToken);\n        }\n\n    }\n}\n</code></pre>"},{"location":"zh/events/integration-event-handler/","title":"\u96c6\u6210\u4e8b\u4ef6","text":"<p>\u7531\u4e8e<code>\u9886\u57df\u4e8b\u4ef6</code>\u4ec5\u5728\u672c\u5730\u4e8b\u52a1\u4e2d\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6765\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f20\u9012\u4e8b\u4ef6\uff0c\u4f7f\u5f97\u4e8b\u4ef6\u7684\u5904\u7406\u4e0d\u963b\u65ad\u53d1\u8d77\u4e8b\u4ef6\u7684<code>\u547d\u4ee4</code>\u7684\u6267\u884c\uff0c\u8fd9\u5c31\u662f<code>\u96c6\u6210\u4e8b\u4ef6</code>\u7684\u4f5c\u7528\u3002</p>"},{"location":"zh/events/integration-event-handler/#_2","title":"\u6ce8\u518c\u96c6\u6210\u4e8b\u4ef6\u670d\u52a1","text":"<p>\u76ee\u524d\u6846\u67b6\u5b9e\u73b0\u4e86<code>CAP</code>\u7ec4\u4ef6\u6765\u652f\u6301\u96c6\u6210\u4e8b\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5728<code>Startup</code>\u7c7b\u4e2d\u6ce8\u518c<code>CAP</code>\u7ec4\u4ef6\uff1a</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(x =&gt;\n    {\n        x.UseEntityFramework&lt;AppDbContext&gt;();\n        x.UseRabbitMQ(\"localhost\");\n    });\n}\n\n// \u914d\u7f6eCAP\u4e3a\u96c6\u6210\u4e8b\u4ef6\u5b9e\u73b0\nbuilder.Services.AddIntegrationEvents(typeof(Program))\n        .UseCap(b =&gt;\n        {\n            b.RegisterServicesFromAssemblies(typeof(Program));\n            b.AddContextIntegrationFilters();\n            b.UseMySql();\n        });\n</code></pre>"},{"location":"zh/events/integration-event-handler/#_3","title":"\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6","text":"<p>\u96c6\u6210\u4e8b\u4ef6\u662f\u7531<code>\u9886\u57df\u4e8b\u4ef6</code>\u8f6c\u6362\u800c\u6765\u7684\uff0c\u547d\u540d\u4e00\u822c\u4ee5<code>IntegrationEvent</code>\u7ed3\u5c3e\u4ece\u800c\u4e0e<code>\u9886\u57df\u4e8b\u4ef6</code>\u533a\u5206\uff0c\u5982<code>OrderCreatedIntegrationEvent</code>\uff1b</p> <p>\u8981\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a<code>IIntegrationEventConverter</code>\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06\u9886\u57df\u4e8b\u4ef6\u8f6c\u6362\u4e3a\u96c6\u6210\u4e8b\u4ef6\u5e76\u53d1\u51fa\u3002</p> <pre><code>public class OrderCreatedIntegrationEventConverter : \n    IIntegrationEventConverter&lt;OrderCreatedDomainEvent, OrderCreatedIntegrationEvent&gt;\n{\n    public OrderCreatedIntegrationEvent Convert(OrderCreatedDomainEvent domainEvent)\n    {\n        return new OrderCreatedIntegrationEvent(domainEvent.Order.Id);\n    }\n}\n</code></pre>"},{"location":"zh/events/integration-event-handler/#_4","title":"\u96c6\u6210\u4e8b\u4ef6\u5904\u7406","text":"<p>\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86<code>IIntegrationEventHandler&lt;TIntegrationEvent&gt;</code>\u63a5\u53e3\u7684\u7c7b\uff0c\u5176\u4e2d<code>TIntegrationEvent</code>\u662f\u96c6\u6210\u4e8b\u4ef6\u7684\u7c7b\u578b\u3002</p> <p>\u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u5728\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u505a\u4e0b\u5217\u4e8b\u60c5\uff1a</p> <ul> <li>\u53d1\u51fa\u547d\u4ee4</li> <li>\u8c03\u7528\u5916\u90e8\u670d\u52a1</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\u7684\u4f8b\u5b50\uff1a</p> <pre><code>public class OrderCreatedIntegrationEventHandler(IMediator mediator) : IIntegrationEventHandler&lt;OrderCreatedIntegrationEvent&gt;\n{\n    public async Task Handle(OrderCreatedIntegrationEvent eventData, CancellationToken cancellationToken)\n    {\n        //\u5904\u7406\u96c6\u6210\u4e8b\u4ef6\n        var cmd = new OrderPaidCommand(eventData.OrderId);\n        await mediator.Send(cmd, cancellationToken);\n    }\n}\n</code></pre>"},{"location":"zh/events/integration-event-handler/#_5","title":"\u5931\u8d25\u91cd\u8bd5","text":"<p>\u6211\u4eec\u501f\u52a9<code>CAP</code>\u7ec4\u4ef6\u5b9e\u73b0\u4e86\u96c6\u6210\u4e8b\u4ef6\uff0c<code>CAP</code>\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u5931\u8d25\u91cd\u8bd5\u673a\u5236\uff0c\u5f53\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5931\u8d25\u65f6\uff0c<code>CAP</code>\u4f1a\u81ea\u52a8\u91cd\u8bd5\u5904\u7406\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u91cd\u8bd5<code>10</code>\u6b21\u3002</p>"},{"location":"zh/events/integration-event-handler/#_6","title":"\u9650\u5236\u6761\u4ef6","text":"<p>\u96c6\u6210\u4e8b\u4ef6\u5fc5\u987b\u4f7f\u7528\u7b80\u5355\u5bf9\u8c61\uff0c\u56e0\u4e3a\u96c6\u6210\u4e8b\u4ef6\u4f1a\u5728\u9700\u8981\u652f\u6301<code>Json</code>\u683c\u5f0f\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u5e76\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f20\u9012\u3002</p>"},{"location":"zh/getting-started/development-process/","title":"\u5feb\u901f\u5f00\u53d1\u6d41\u7a0b","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd\u4e86\u4f7f\u7528\u672c\u6846\u67b6\u7684\u4e3b\u8981\u5f00\u53d1\u6d41\u7a0b\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5feb\u901f\u4e0a\u624b\u3002</p>"},{"location":"zh/getting-started/development-process/#1","title":"1. \u521b\u5efa\u9886\u57df\u6a21\u578b","text":"<p>\u5728\u9886\u57df\u5c42\u521b\u5efa\u9886\u57df\u6a21\u578b\uff0c\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u7684\u5c5e\u6027\u3001\u65b9\u6cd5\u3001\u4e8b\u4ef6\u3001\u89c4\u5219\u7b49\u3002</p> <pre><code>// \u5b9a\u4e49\u9886\u57df\u6a21\u578b\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\n//\u4e3a\u6a21\u578b\u5b9a\u4e49\u5f3a\u7c7b\u578bID\npublic partial record UserId : IInt64StronglyTypedId;\n\n//\u9886\u57df\u6a21\u578b\npublic class User : Entity&lt;UserId&gt;, IAggregateRoot\n{\n    protected User() { }\n\n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n        this.AddDomainEvent(new UserCreatedDomainEvent(this));\n    }\n    public string Name { get; private set; }\n    public string Email { get; private set; }\n\n    public void ChangeEmail(string email)\n    {\n        Email = email;\n        this.AddDomainEvent(new UserEmailChangedDomainEvent(this));\n    }\n}\n</code></pre> <p>\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6</p> <pre><code>//\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record UserCreatedDomainEvent(User user) : IDomainEvent;\n</code></pre>"},{"location":"zh/getting-started/development-process/#2","title":"2. \u521b\u5efa\u4ed3\u50a8","text":"<p>\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u7684\u4ed3\u50a8\u63a5\u53e3</p> <pre><code>//\u5b9a\u4e49\u4ed3\u50a8\u63a5\u53e3\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic interface IUserRepository : IRepository&lt;User, UserId&gt;\n{\n    Task&lt;User&gt; GetByEmailAsync(string email); //\u53ef\u9009\u7684\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\n}\n</code></pre> <p>\u5b9e\u73b0\u4ed3\u50a8\u63a5\u53e3</p> <pre><code>//\u5b9e\u73b0\u4ed3\u50a8\u63a5\u53e3\nusing NetCorePal.Extensions.Repository;\nusing NetCorePal.Extensions.Repository.EntityFrameworkCore;\nnamespace YourNamespace;\n\npublic class UserRepository : RepositoryBase&lt;User, UserId, ApplicationDbContext&gt;, IUserRepository\n{\n    public UserRepository(ApplicationDbContext dbContext) : base(dbContext)\n    {\n    }\n\n    public async Task&lt;User&gt; GetByEmailAsync(string email)\n    {\n        return await DbContext.Set&lt;User&gt;().FirstOrDefaultAsync(x =&gt; x.Email == email);\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#3","title":"3. \u5b9a\u4e49\u6a21\u578b\u4e0e\u6570\u636e\u5e93\u6620\u5c04\u5173\u7cfb","text":"<pre><code>//\u5b9a\u4e49\u6a21\u578b\u4e0e\u6570\u636e\u5e93\u6620\u5c04\u5173\u7cfb\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing NetCorePal.Extensions.Domain;\n\nnamespace YourNamespace;\n\npublic class UserEntityTypeConfiguration : IEntityTypeConfiguration&lt;User&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;User&gt; builder)\n    {\n        builder.HasKey(x =&gt; x.Id);\n        builder.Property(x =&gt; x.Name).IsRequired().HasMaxLength(50);\n        builder.Property(x =&gt; x.Email).IsRequired().HasMaxLength(50);\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#4","title":"4. \u547d\u4ee4\u4e0e\u547d\u4ee4\u5904\u7406\u5668","text":"<p>\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u7684\u547d\u4ee4</p> <pre><code>//\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u7684\u547d\u4ee4\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record CreateUserCommand(string Name, string Email) : ICommand&lt;UserId&gt;;\n</code></pre> <p>\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u7684\u547d\u4ee4\u5904\u7406\u5668</p> <pre><code>//\u5b9a\u4e49\u9886\u57df\u6a21\u578b\u7684\u547d\u4ee4\u5904\u7406\u5668\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class CreateUserCommandHandler(IUserRepository userRepository) : ICommandHandler&lt;CreateUserCommand, UserId&gt;\n{\n    public async Task&lt;UserId&gt; HandleAsync(CreateUserCommand command)\n    {\n        var user = new User(command.Name, command.Email);\n        await userRepository.AddAsync(user);\n        return user.Id;\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#5-webapi","title":"5. \u5b9a\u4e49webapi\u63a5\u53e3","text":"<p>\u5728Endpoint\u4e2d\u4f7f\u7528IMediator\u63a5\u53e3\u5904\u7406\u9886\u57df\u6a21\u578b\u7684\u547d\u4ee4</p> <p>\u5b9a\u4e49RequestDto</p> <pre><code>//\u5b9a\u4e49RequestDto\nnamespace YourNamespace;\n\npublic record CreateUserRequestDto(string Name, string Email);\n</code></pre> <p>\u5b9a\u4e49ResponseDto</p> <pre><code>//\u5b9a\u4e49ResponseDto\nnamespace YourNamespace;\n\npublic record CreateUserResponseDto(UserId UserId);\n</code></pre> <p>\u5b9a\u4e49FastEndpoint</p> <pre><code>//\u5b9a\u4e49Endpoint\nusing FastEndpoints;\nusing NetCorePal.Extensions.Domain;\nusing NetCorePal.Extensions.Dto;\nnamespace YourNamespace;\n\npublic class CreateUserEndpoint(IMediator mediator) : Endpoint&lt;CreateUserRequestDto, ResponseData&lt;CreateUserResponseDto&gt;&gt;\n{\n    public override void Configure()\n    {\n        Post(\"/api/users\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CreateUserRequestDto req, CancellationToken ct)\n    {\n        var command = new CreateUserCommand(req.Name, req.Email);\n        var userId = await mediator.SendAsync(command, ct);\n        var response = new CreateUserResponseDto(userId).AsResponseData();\n        await SendAsync(response, cancellation: ct);\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#6","title":"6. \u7f16\u5199\u96c6\u6210\u6d4b\u8bd5","text":"<p>\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u9886\u57df\u6a21\u578b\u7684\u547d\u4ee4\u5904\u7406\u5668,\u4f7f\u7528<code>MyWebApplicationFactory</code>\u6765\u521b\u5efa\u6d4b\u8bd5\u73af\u5883</p> <pre><code>//\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing Xunit;\nusing YourNamespace;\nnamespace YourNamespace.Tests;\n\npublic class CreateUserEndpointTests : IClassFixture&lt;MyWebApplicationFactory&gt;\n{\n    private readonly HttpClient _client;\n\n    public CreateUserEndpointTests(MyWebApplicationFactory factory)\n    {\n        _client = factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task CreateUserTest()\n    {\n        var response = await _client.PostAsJsonAsync(\"/api/users\", new CreateUserRequestDto(\"test\", \"abc@efg.com\"));\n        response.EnsureSuccessStatusCode();\n        var result = await response.Content.ReadFromJsonAsync&lt;ResponseData&lt;CreateUserResponseDto&gt;&gt;();\n        Assert.NotNull(result);\n        Assert.True(result.Success);\n        Assert.NotNull(result.Data);\n    }   \n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#7","title":"7. \u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668","text":"<p>\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668</p> <pre><code>//\u5b9a\u4e49\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class UserCreatedDomainEventHandler : IDomainEventHandler&lt;UserCreatedDomainEvent&gt;\n{\n    public async Task HandleAsync(UserCreatedDomainEvent domainEvent)\n    {\n        //\u5904\u7406\u9886\u57df\u4e8b\u4ef6,\u53d1\u9001\u79ef\u5206 \u79ef\u5206\u9886\u57df\n\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#8","title":"8. \u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6","text":"<p>\u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6</p> <pre><code>//\u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic record UserCreatedIntegrationEvent(UserId userId) : IIntegrationEvent;\n</code></pre>"},{"location":"zh/getting-started/development-process/#9","title":"9. \u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6","text":"<p>\u4f7f\u7528\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668\u5c06\u9886\u57df\u4e8b\u4ef6\u8f6c\u6362\u4e3a\u96c6\u6210\u4e8b\u4ef6\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6\uff1a</p> <pre><code>public class UserCreatedIntegrationEventConverter : IIntegrationEventConverter&lt;UserCreatedDomainEvent,UserCreatedIntegrationEvent&gt;{\n    public UserCreatedIntegrationEvent Convert(UserCreatedDomainEvent domainEvent)\n    {\n        return new UserCreatedIntegrationEvent(domainEvent.User.Id);\n    }\n}\n</code></pre> <p>\u5907\u6ce8\uff1a IIntegrationEventPublisher\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6</p> <p>\u4f7f\u7528 IIntegrationEventPublisher \u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6</p> <pre><code>//\u53d1\u51fa\u96c6\u6210\u4e8b\u4ef6\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class UserCreatedDomainEventHandler(IIntegrationEventPublisher integrationEventPublisher) : IDomainEventHandler&lt;UserCreatedDomainEvent&gt;\n{\n    public async Task HandleAsync(UserCreatedDomainEvent domainEvent)\n    {\n        //\u5904\u7406\u9886\u57df\u4e8b\u4ef6\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/development-process/#10","title":"10. \u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668","text":"<p>\u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668</p> <pre><code>//\u5b9a\u4e49\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\nusing NetCorePal.Extensions.Domain;\nnamespace YourNamespace;\n\npublic class UserCreatedIntegrationEventHandler : IIntegrationEventHandler&lt;UserCreatedIntegrationEvent&gt;\n{\n    public async Task HandleAsync(UserCreatedIntegrationEvent integrationEvent)\n    {\n        //\u5904\u7406\u96c6\u6210\u4e8b\u4ef6\n        var cmd = new AddUserScoreCommand(integrationEvent.UserId);\n        await _mediator.SendAsync(cmd);\n    }\n}\n</code></pre>"},{"location":"zh/getting-started/getting-started/","title":"\u5165\u95e8","text":""},{"location":"zh/getting-started/getting-started/#_2","title":"\u73af\u5883\u51c6\u5907","text":""},{"location":"zh/getting-started/getting-started/#_3","title":"\u5b89\u88c5\u7f16\u7a0b\u5de5\u5177","text":"<p>\u9009\u62e9\u4e0b\u5217\u5176\u4e2d\u4e00\u79cd\u7f16\u7a0b\u5de5\u5177</p> <ul> <li>Visual Studio Code</li> <li>Visual Studio</li> <li>JetBrains Rider</li> </ul>"},{"location":"zh/getting-started/getting-started/#net-sdk","title":"\u5b89\u88c5 .NET SDK","text":"<ul> <li>.NET 9 SDK</li> </ul>"},{"location":"zh/getting-started/getting-started/#docker","title":"\u5b89\u88c5 Docker \u73af\u5883","text":"<p>\u62e5\u6709Docker\u73af\u5883\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u3002</p> <p>Docker Desktop\u4e0b\u8f7d\u5730\u5740\uff1a \uff08https://www.docker.com/products/docker-desktop/)</p>"},{"location":"zh/getting-started/getting-started/#_4","title":"\u8c03\u8bd5\u73af\u5883\u51c6\u5907","text":"<p>\u8fd9\u4e00\u6b65\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u81ea\u52a8\u5316\u6d4b\u8bd5\u4f1a\u81ea\u52a8\u542f\u52a8\u8c03\u8bd5\u73af\u5883\uff0c\u5e76\u5728\u6d4b\u8bd5\u7ed3\u675f\u540e\u81ea\u52a8\u5173\u95ed\u3002</p> <p>\u8fd9\u91cc\u5b89\u88c5\u7684\u8c03\u8bd5\u73af\u5883\u662f\u4e3a\u4e86\u5728\u672c\u5730\u8fd0\u884c\u8c03\u8bd5\u3002</p> <pre><code># redis\ndocker run -p 6379:6379 -d redis:7.0\n# rabbitmq\ndocker run -p 5672:5672 -p 15672:15672  -d rabbitmq:3.9-management\n# mysql\ndocker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0\n</code></pre> <p>\u5176\u4e2dRabbitMQ\u7684\u7ba1\u7406\u754c\u9762\u5730\u5740\u4e3a\uff1ahttp://localhost:15672/\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801\u90fd\u662fguest\u3002</p>"},{"location":"zh/getting-started/getting-started/#_5","title":"\u5b89\u88c5\u5de5\u7a0b\u6a21\u7248\u5de5\u5177","text":"<p>\u6b63\u5f0f\u7248 NetCorePal.Template - NuGet</p> <pre><code>dotnet new install NetCorePal.Template\n</code></pre> <p>or</p> <p>\u9884\u89c8\u7248\u672c NetCorePal.Template - MyGet</p> <pre><code>dotnet new install NetCorePal.Template::&lt;package-version&gt; --add-source \"https://www.myget.org/F/netcorepal/api/v3/index.json\"\n</code></pre>"},{"location":"zh/getting-started/getting-started/#_6","title":"\u521b\u5efa\u5de5\u7a0b","text":"<pre><code>dotnet new netcorepal-web -n MyWebApp\n</code></pre>"},{"location":"zh/getting-started/getting-started/#_7","title":"\u8fd0\u884c\u9879\u76ee","text":"<pre><code>cd MyWebApp/src/MyWebApp.Web\n# Todo \u6dfb\u52a0\u6784\u5efa\u57fa\u7840\u8bbe\u65bd\u7684\u811a\u672c\ndotnet run\n</code></pre>"},{"location":"zh/getting-started/getting-started/#_8","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code>dotnet test\n</code></pre>"},{"location":"zh/getting-started/program-file/","title":"\u914d\u7f6e\u670d\u52a1","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728<code>Program.cs</code>\u6587\u4ef6\u4e2d\u914d\u7f6e\u670d\u52a1\u3002</p> <pre><code>//\u914d\u7f6e\u670d\u52a1\nusing Microsoft.Extensions.DependencyInjection;\nusing NetCorePal.Extensions.DependencyInjection;\nusing YourNamespace;\n\nvar builder = WebApplication.CreateBuilder(args);\n</code></pre>"},{"location":"zh/getting-started/project-structure/","title":"\u9879\u76ee\u7ed3\u6784","text":""},{"location":"zh/getting-started/project-structure/#_2","title":"\u6574\u4f53\u7ed3\u6784","text":"<pre><code>YourProject\n     \u251c\u2500\u2500src\n     \u2502  \u251c\u2500\u2500YourProject.Web  //Web\u9879\u76ee\n     \u2502  \u251c\u2500\u2500YourProject.Domain //\u9886\u57df\u6a21\u578b\n     \u2502  \u2514\u2500\u2500YourProject.Infrastructure //\u57fa\u7840\u8bbe\u65bd\n     \u2514\u2500\u2500tests\n        \u251c\u2500\u2500YourProject.Web.Tests  //Web\u6d4b\u8bd5\n        \u251c\u2500\u2500YourProject.Domain.Tests //\u9886\u57df\u6a21\u578b\u6d4b\u8bd5\n        \u2514\u2500\u2500YourProject.Infrastructure.Tests //\u57fa\u7840\u8bbe\u65bd\u6d4b\u8bd5\n</code></pre>"},{"location":"zh/getting-started/project-structure/#_3","title":"\u9886\u57df\u6a21\u578b\u5c42\u9879\u76ee\u7ed3\u6784","text":"<pre><code>YourProject.Domain\n     \u251c\u2500\u2500 AggregatesModel //\u9886\u57df\u6a21\u578b\u76ee\u5f55\uff0c\u653e\u7f6e\u805a\u5408\u6839\u3001\u5b9e\u4f53\u3001\u503c\u5bf9\u8c61\u7b49\n     \u2514\u2500\u2500 DomainEvents //\u9886\u57df\u4e8b\u4ef6\u76ee\u5f55\n</code></pre>"},{"location":"zh/getting-started/project-structure/#_4","title":"\u57fa\u7840\u8bbe\u65bd\u5c42\u9879\u76ee\u7ed3\u6784","text":"<pre><code>YourProject.Infrastructure\n     \u251c\u2500\u2500 EntityConfigurations  //\u9886\u57df\u6a21\u578b\u6570\u636e\u5e93\u6620\u5c04\u914d\u7f6e\u76ee\u5f55\n     \u251c\u2500\u2500 Repositories  //\u4ed3\u50a8\u76ee\u5f55\n     \u2514\u2500\u2500 ApplicationDbContext.cs  //\u6570\u636e\u5e93\u4e0a\u4e0b\u6587\n</code></pre>"},{"location":"zh/getting-started/project-structure/#web","title":"Web\u5c42\u9879\u76ee\u7ed3\u6784","text":"<pre><code>YourProject.Web\n     \u251c\u2500\u2500 wwwroot //\u9759\u6001\u8d44\u6e90\u76ee\u5f55\n     \u251c\u2500\u2500 Application  //\u5e94\u7528\u670d\u52a1\u76ee\u5f55\n     \u2502   \u251c\u2500\u2500 Commands  //\u547d\u4ee4\u3001\u547d\u4ee4\u5904\u7406\u5668\u3001\u547d\u4ee4\u9a8c\u8bc1\u5668\u76ee\u5f55\n     \u2502   \u251c\u2500\u2500 DomainEventHandlers  //\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668\u76ee\u5f55\n     \u2502   \u251c\u2500\u2500 IntegrationEventConverters //\u96c6\u6210\u4e8b\u4ef6\u8f6c\u6362\u5668\u76ee\u5f55\n     \u2502   \u251c\u2500\u2500 IntegrationEventHandlers  //\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668\u76ee\u5f55\n     \u2502   \u2514\u2500\u2500 Queries  //\u67e5\u8be2\u670d\u52a1\u76ee\u5f55\n     \u251c\u2500\u2500 Clients  //\u8fdc\u7a0b\u670d\u52a1\u5ba2\u6237\u7aef\u76ee\u5f55\uff0c\u7528\u4ee5\u8bbf\u95ee\u5176\u5b83\u5fae\u670d\u52a1\u6216\u7b2c\u4e09\u65b9\u670d\u52a1\n     \u251c\u2500\u2500 Endpoints  //\u7aef\u70b9\u76ee\u5f55\n     \u251c\u2500\u2500 Extensions  //\u6269\u5c55\u65b9\u6cd5\u76ee\u5f55\uff0c\u653e\u7f6e\u5404\u79cd\u6269\u5c55\u65b9\u6cd5\u5b9a\u4e49\n     \u251c\u2500\u2500 Filters  //\u8fc7\u6ee4\u5668\u76ee\u5f55\n     \u2514\u2500\u2500 Program.cs  //\u542f\u52a8\u5165\u53e3\u7c7b\n</code></pre>"},{"location":"zh/rules-of-ddd/rules-of-ddd/","title":"Rules of Domain Driven Design","text":""},{"location":"zh/rules-of-ddd/rules-of-ddd/#_1","title":"\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u7684\u539f\u5219","text":""},{"location":"zh/rules-of-ddd/rules-of-ddd/#_2","title":"\u4e0d\u51c6\u8de8\u57df\uff1a","text":"<ul> <li>\u5b9e\u4f53\u5b57\u6bb5\u7684\u53d8\u5316\uff0c\u5fc5\u987b\u7531\u5b9e\u4f53\u81ea\u5df1\u7684\u65b9\u6cd5\u6765\u64cd\u4f5c\uff1b</li> <li>\u805a\u5408\u6839\u4e4b\u95f4\u4e0d\u80fd\u53d1\u751f\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u5f15\u7528\u5173\u7cfb\uff1b</li> <li>\u6bcf\u4e2a\u67e5\u8be2\u4e0d\u80fd\u5173\u8054\u591a\u4e2a\u805a\u5408\uff1b</li> </ul>"},{"location":"zh/rules-of-ddd/rules-of-ddd/#_3","title":"\u4e0d\u8981\u590d\u7528\uff1a","text":"<ul> <li>\u4e3a\u6bcf\u4e2a\u524d\u7aef\u573a\u666f\u521b\u5efa\u4e00\u4e2aAPI\uff1b</li> <li>\u4e3a\u6bcf\u4e2aAPI\u521b\u5efa\u5404\u81ea\u7684\u8f93\u5165\u8f93\u51fa\u5b9e\u4f53\uff08RequestDto\u3001ResponseDto\uff09\uff1b</li> <li>\u4e3a\u6bcf\u4e2a\u64cd\u4f5c\u521b\u5efa\u5404\u81ea\u7684\u547d\u4ee4\uff08Command\uff09\uff1b</li> </ul>"},{"location":"zh/rules-of-ddd/rules-of-ddd/#rules-of-domain-driven-design_1","title":"Rules of Domain Driven Design","text":""},{"location":"zh/rules-of-ddd/rules-of-ddd/#no-cross-domain-allowed","title":"No cross-domain allowed:","text":"<ul> <li>The change of entity fields must be operated by the entity's own methods.</li> <li>There should be no direct or indirect reference relationship between aggregate roots.</li> <li>Each query should not associate multiple aggregates.</li> </ul>"},{"location":"zh/rules-of-ddd/rules-of-ddd/#avoid-reuse","title":"Avoid reuse:","text":"<ul> <li>Create an API for each frontend scenario.</li> <li>Create separate input and output entities (RequestDto, ResponseDto) for each API.</li> <li>Create separate commands for each operation.</li> </ul>"},{"location":"zh/service-discovery/service-discovery/","title":"\u670d\u52a1\u53d1\u73b0","text":"<p>\u5f53\u4f60\u9700\u8981\u53d1\u8d77\u670d\u52a1\u95f4\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u670d\u52a1\u53d1\u73b0\u529f\u80fd\uff0c\u6846\u67b6\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u57fa\u4e8ek8s\u7684\u670d\u52a1\u53d1\u73b0\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u5fae\u8f6f\u5b98\u65b9\u63d0\u4f9b\u7684<code>Microsoft.Extensions.ServiceDiscovery</code>\u7ec4\u4ef6\u3002</p>"},{"location":"zh/service-discovery/service-discovery/#netcorepalservicediscovery","title":"\u4f7f\u7528 NetCorePalServiceDiscovery","text":"<ol> <li> <p>\u6dfb\u52a0\u4f9d\u8d56\u5305</p> <pre><code>dotnet add package NetCorePal.Extensions.ServiceDiscovery.Abstractions\ndotnet add package NetCorePal.Extensions.ServiceDiscovery.K8s   //\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u6dfb\u52a0\u8be5\u5305\u4ee5\u652f\u6301k8s\u73af\u5883\u4e0b\u7684\u670d\u52a1\u53d1\u73b0\n</code></pre> </li> <li> <p>\u5728 <code>Program.cs</code> \u4e2d\u914d\u7f6e\u670d\u52a1\u53d1\u73b0</p> <pre><code>// \u6ce8\u518cNetCorePalServiceDiscovery\nbuilder.Services.AddNetCorePalServiceDiscoveryClient()\n    .AddK8sServiceDiscovery(); //\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u6dfb\u52a0\u6dfb\u52a0k8s\u670d\u52a1\u53d1\u73b0\u652f\u6301\n</code></pre> </li> <li> <p>\u6ce8\u518c<code>HttpClient</code></p> </li> </ol> <p><code>csharp     //\u6ce8\u518cHttpClient\u5e76\u914d\u7f6e\u670d\u52a1\u53d1\u73b0     builder.Services.AddHttpClient&lt;CatalogClient&gt;()         .AddNetCorePalServiceDiscovery(\"catalog\");</code></p>"},{"location":"zh/service-discovery/service-discovery/#microsoftextensionsservicediscovery","title":"\u4f7f\u7528 Microsoft.Extensions.ServiceDiscovery","text":"<ol> <li> <p>\u6dfb\u52a0\u4f9d\u8d56\u5305</p> <pre><code>dotnet add package Microsoft.Extensions.ServiceDiscovery\n</code></pre> </li> <li> <p>\u5728 <code>Program.cs</code> \u4e2d\u914d\u7f6e\u670d\u52a1\u53d1\u73b0</p> <pre><code>// \u6ce8\u518cMicrosoft.Extensions.ServiceDiscovery\nbuilder.Services.AddServiceDiscovery()\n    .AddConfigurationServiceEndpointProvider();\n</code></pre> </li> <li> <p>\u6ce8\u518c<code>HttpClient</code></p> </li> </ol> <p><code>csharp     //\u6ce8\u518cHttpClient\u5e76\u914d\u7f6e\u670d\u52a1\u53d1\u73b0     builder.Services.AddHttpClient&lt;CatalogClient&gt;()         .AddServiceDiscovery();</code></p> <p>\u66f4\u591a\u5173\u4e8e<code>Microsoft.Extensions.ServiceDiscovery</code>\u8be6\u89c1\u5b98\u65b9\u6587\u6863\uff1aMicrosoft.Extensions.ServiceDiscovery</p>"},{"location":"zh/service-discovery/service-discovery/#_2","title":"\u63a8\u8350\u7528\u6cd5","text":"<p>\u63a8\u8350\u4f7f\u7528<code>Refit</code>\u7ec4\u4ef6\u6765\u7b80\u5316<code>HttpClient</code>\u7684\u4f7f\u7528\uff0c\u540c\u65f6\u53ef\u4ee5\u7ed3\u5408<code>Polly</code>\u7ec4\u4ef6\u5b9e\u73b0\u91cd\u8bd5\u3001\u7194\u65ad\u7b49\u529f\u80fd\u3002</p> <ol> <li> <p>\u6dfb\u52a0\u4f9d\u8d56\u5305</p> <pre><code>dotnet add package Refit.HttpClientFactory\ndotnet add package Microsoft.Extensions.Http.Resilience\n</code></pre> </li> <li> <p>\u5b9a\u4e49\u8fdc\u7a0b\u670d\u52a1\u63a5\u53e3</p> </li> </ol> <pre><code>public interface ICatalogApi\n{\n   [Get(\"/api/v1/catalog\")]\n   Task&lt;IEnumerable&lt;CatalogItem&gt;&gt; GetCatalogItemsAsync();\n}\n</code></pre> <ol> <li> <p>\u6ce8\u518c<code>HttpClient</code></p> <pre><code>RefitSettings refitSettings = new RefitSettings();\nvar jsonOptions = new JsonSerializerOptions();\njsonOptions.AddNetCorePalJsonConverters();   //\u914d\u7f6eNetCorePalJsonConverters\nvar serializer = new SystemTextJsonContentSerializer(jsonOptions); \n\nbuilder.Services.AddRefitClient&lt;ICatalogApi&gt;(_ =&gt; refitSettings)  //\u6dfb\u52a0RefitClient\n    .ConfigureHttpClient(p =&gt; p.BaseAddress = new Uri(\"https://catalog:5000\"))\n    .AddPalServiceDiscovery  \u6216\u8005\u4f7f\u7528Microsoft.Extensions.ServiceDiscovery\n    //.AddNetCorePalServiceDiscovery(\"catalog\")   //\u4f7f\u7528NetCorePalServiceDiscovery \n    .AddStandardResilienceHandler(); //\u6dfb\u52a0\u6807\u51c6\u5f39\u6027\u7b56\u7565\n</code></pre> </li> </ol>"},{"location":"zh/sharding/data-sharding/","title":"\u5206\u5e93\u5206\u8868\u89e3\u51b3\u65b9\u6848","text":"<p>\u4e3a\u4e86\u4f7f\u7cfb\u7edf\u5177\u5907\u66f4\u5927\u89c4\u6a21\u7684\u6570\u636e\u5bb9\u91cf\u6269\u5c55\u80fd\u529b\uff0c\u6211\u4eec\u96c6\u6210\u4e86 sharding-core \u4f5c\u4e3a\u6570\u636e\u5206\u5e93\u5206\u8868\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p><code>sharding-core</code> \u662f\u4e00\u4e2a\u57fa\u4e8e <code>EntityFrameworkCore</code> \u7684\u5f00\u6e90\u7684\u5206\u5e93\u5206\u8868\u6846\u67b6\uff0c\u652f\u6301\u591a\u79cd\u6570\u636e\u5e93\u7c7b\u578b\u548c\u5206\u7247\u7b56\u7565\u3002\u4f5c\u4e3a\u5ba2\u6237\u7aef\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u5bf9\u4e8e\u6570\u636e\u5e93\u57fa\u7840\u8bbe\u65bd\u7684\u8981\u6c42\u8f83\u4f4e\uff0c\u9002\u5408\u4e8e\u5927\u591a\u6570\u573a\u666f\u3002\u5b83\u652f\u6301\u591a\u79cd\u5206\u7247\u7b56\u7565\uff0c\u5305\u62ec\u8303\u56f4\u5206\u7247\u3001\u54c8\u5e0c\u5206\u7247\u548c\u590d\u5408\u5206\u7247\u7b49\u3002\u5b83\u8fd8\u652f\u6301\u52a8\u6001\u5206\u7247\u548c\u52a8\u6001\u8def\u7531\uff0c\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u7075\u6d3b\u8c03\u6574\u3002</p> <p><code>sharding-core</code> \u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"zh/sharding/data-sharding/#_2","title":"\u652f\u6301\u7684\u573a\u666f","text":"<ul> <li>\u8bfb\u5199\u5206\u79bb</li> <li>\u5206\u8868</li> <li>\u5206\u5e93</li> <li>\u79df\u6237\u6a21\u5f0f</li> </ul> <p><code>\u8bfb\u5199\u5206\u79bb</code>\u3001<code>\u5206\u8868</code>\u3001<code>\u5206\u5e93</code>\u53ef\u4ee5\u6309\u9700\u7ec4\u5408\u642d\u914d\u4f7f\u7528\u3002</p>"},{"location":"zh/sharding/data-sharding/#_3","title":"\u5b98\u65b9\u6587\u6863","text":"<p>\u5173\u4e8e <code>sharding-core</code> \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a https://xuejmnet.github.io/sharding-core-doc/</p>"},{"location":"zh/sharding/data-sharding/#_4","title":"\u6ce8\u610f\u4e8b\u9879","text":""},{"location":"zh/sharding/data-sharding/#_5","title":"\u5173\u4e8e\u61d2\u52a0\u8f7d\u517c\u5bb9","text":"<p>\u9700\u8981\u6dfb\u52a0 o.UseEntityFrameworkCoreProxies = true;</p> <p>see: https://github.com/dotnetcore/sharding-core/issues/259</p>"},{"location":"zh/sharding/read-write-separation/","title":"\u8bfb\u5199\u5206\u79bb","text":"<p>\u968f\u7740\u7cfb\u7edf\u7528\u6237\u7684\u589e\u591a\uff0c\u7cfb\u7edf\u7684\u67e5\u8be2\u538b\u529b\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u6b64\u65f6\u4f7f\u7528\u8bfb\u5199\u5206\u79bb\u65b9\u6848\uff0c\u53ef\u4ee5\u6709\u6548\u7f13\u89e3\u6570\u636e\u5e93\u7684\u67e5\u8be2\u538b\u529b\u3002</p>"},{"location":"zh/sharding/read-write-separation/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<p><code>sharding-core</code> \u672a\u5b9e\u73b0\u6570\u636e\u540c\u6b65\u5230\u53ea\u8bfb\u5e93\u7684\u529f\u80fd\uff0c\u8981\u91c7\u7528\u8bfb\u5199\u5206\u79bb\u7684\u65b9\u6848\uff0c\u9700\u8981\u5148\u505a\u597d\u6570\u636e\u5e93\u7684\u6570\u636e\u540c\u6b65\u673a\u5236\uff0c\u4f8b\u5982 <code>MySQL</code> \u7684 <code>binlog</code> \u540c\u6b65\u3001<code>MSSQL</code> \u7684 <code>always on</code>\u529f\u80fd\u7b49\u3002</p>"},{"location":"zh/sharding/read-write-separation/#_3","title":"\u914d\u7f6e\u8bfb\u5199\u5206\u79bb","text":"<p>\u8981\u4f7f\u7528<code>sharding-core</code>,\u9700\u8981\u4fee\u6539DbContext\u7684\u6ce8\u518c\u65b9\u5f0f\u3002</p> <ol> <li> <p>\u6dfb\u52a0\u5305<code>NetCorePal.Extensions.ShardingCore</code>\u5f15\u7528\uff1a</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   \u6216\u8005 PackageReference   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>\u4e3a\u4f60\u7684 <code>DbContext</code> \u7c7b\u578b\u6dfb\u52a0 <code>IShardingCore</code> \u63a5\u53e3</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    //Your Code\n}  \n</code></pre> </li> <li> <p>\u521b\u5efa<code>ApplicationDbContextCreator</code></p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>\u79fb\u9664 <code>AddDbContext</code> \u6ce8\u518c\u65b9\u5f0f     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>\u4f7f\u7528 <code>AddShardingDbContext</code> \u6ce8\u518c,\u4e0b\u9762\u914d\u7f6e\u4e3a\u540d\u79f0\u4e3a<code>ds0</code>\u7684\u6570\u636e\u6e90\u914d\u7f6e\u4e86\u4e24\u4e2a\u53ea\u8bfb\u5e93\uff1a</p> <pre><code>builder.Services.AddShardingDbContext&lt;ApplicationDbContext&gt;()\n        .UseConfig(op =&gt;\n        {\n            op.ThrowIfQueryRouteNotMatch = true;\n            op.UseShardingQuery((conStr, builder) =&gt;\n            {\n                builder.UseMySql(conStr,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.UseShardingTransaction((con, builder) =&gt;\n            {\n                builder.UseMySql(con,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.AddDefaultDataSource(\"ds0\", builder.Configuration.GetConnectionString(\"Mysql\")); //\u914d\u7f6e\u5199\u5e93\n            op.AddReadWriteSeparation(sp =&gt; new Dictionary&lt;string, IEnumerable&lt;string&gt;&gt;    //\u914d\u7f6e\u53ea\u8bfb\u5e93\n                {\n                    {\n                        \"ds0\",\n                        [builder.Configuration.GetConnectionString(\"Mysql-Read1\"), builder.Configuration.GetConnectionString(\"Mysql-Read2\")]\n                    }\n                },\n                readStrategyEnum: ReadStrategyEnum.Loop,\n                defaultEnableBehavior: ReadWriteDefaultEnableBehavior.DefaultDisable,\n                defaultPriority: 10,\n                readConnStringGetStrategy: ReadConnStringGetStrategyEnum.LatestFirstTime\n            );\n        })\n        .ReplaceService&lt;IDbContextCreator, ApplicationDbContextCreator&gt;()\n        .AddShardingCore();\n</code></pre> </li> </ol>"},{"location":"zh/sharding/read-write-separation/#_4","title":"\u53c2\u8003\u6587\u6863","text":"<p>\u66f4\u591a\u7684\u914d\u7f6e\u548c\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\uff1a</p> <p>https://xuejmnet.github.io/sharding-core-doc/read-write/configure</p>"},{"location":"zh/sharding/sharding-database/","title":"\u5206\u5e93","text":"<p>\u5f53\u6211\u4eec\u53d1\u73b0\u5355\u4e2a\u6570\u636e\u5e93\u7684\u6027\u80fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u6570\u636e\u5206\u6563\u5230\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c</p>"},{"location":"zh/sharding/sharding-database/#_2","title":"\u5173\u4e8e\u4e8b\u52a1","text":"<p>\u7531\u4e8e\u5206\u5e93\u4f1a\u4ea7\u751f\u8de8\u6570\u636e\u5e93\u4e8b\u52a1\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u96c6\u6210\u4e8b\u4ef6\u7684\u672c\u5730\u6d88\u606f\u9700\u8981\u5171\u4eab\u5f53\u524d\u4e0a\u4e0b\u6587\u7684\u4e8b\u52a1\uff0c\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u4e86\u5728\u540c\u4e00\u4e2a\u547d\u4ee4\u6267\u884c\u8303\u56f4\u5185\uff0c\u786e\u4fdd\u96c6\u6210\u4e8b\u4ef6\u7684\u53d1\u5e03\u8bb0\u5f55\u4fdd\u5b58\u5230\u4e0e\u4e1a\u52a1\u6570\u636e\u76f8\u540c\u7684\u6570\u636e\u6e90\u4e2d\u3002</p> <p>\u56e0\u6b64\u4f1a\u6709\u5982\u4e0b\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ol> <li>\u540c\u4e00\u4e2a\u547d\u4ee4\u4e2d\u53ea\u64cd\u4f5c\u540c\u4e00\u5206\u5e93\u7684\u6570\u636e\u65f6\uff0c\u80fd\u591f\u786e\u4fdd\u96c6\u6210\u4e8b\u4ef6\u7684\u53d1\u5e03\u8bb0\u5f55\u4fdd\u5b58\u5230\u4e0e\u4e1a\u52a1\u6570\u636e\u76f8\u540c\u7684\u6570\u636e\u6e90\u4e2d\u3002</li> <li>\u540c\u4e00\u4e2a\u8bf7\u6c42\u4e0a\u4e0b\u6587\u6d89\u53ca\u4e0d\u540c\u5206\u5e93\u65f6\uff0c<code>sharding-core</code> \u4f1a\u4e3a\u6bcf\u4e2a\u5bf9\u5e94\u6570\u636e\u6e90\u5f00\u542f\u5404\u81ea\u7684\u4e8b\u52a1\u3002</li> </ol> <p>\u66f4\u591a\u5173\u4e8e\u5206\u5e93\u4e8b\u52a1\u7684\u8bf4\u660e\uff0c\u8bf7\u53c2\u8003\uff1ahttps://xuejmnet.github.io/sharding-core-doc/adv/transaction/</p>"},{"location":"zh/sharding/sharding-database/#_3","title":"\u914d\u7f6e\u5206\u5e93","text":"<ol> <li> <p>\u6dfb\u52a0\u5305<code>NetCorePal.Extensions.ShardingCore</code>\u5f15\u7528\uff1a</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   \u6216\u8005 PackageReference   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>\u4e3a\u4f60\u7684 <code>DbContext</code> \u7c7b\u578b\u6dfb\u52a0 <code>IShardingCore</code> \u63a5\u53e3</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    //Your Code\n}  \n</code></pre> </li> <li> <p>\u521b\u5efa<code>ApplicationDbContextCreator</code></p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>\u79fb\u9664 <code>AddDbContext</code> \u6ce8\u518c\u65b9\u5f0f     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>\u6dfb\u52a0\u5305 <code>NetCorePal.Extensions.DistributedTransactions.CAP.MySql</code> \u4ee5\u652f\u6301CAP\u7684\u53d1\u5e03\u6d88\u606f\u5206\u5e93\uff1a</p> <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.MySql\n</code></pre> <p>\u4e3a ApplicationDbContext \u6dfb\u52a0 IMySqlCapDataStorage \u63a5\u53e3:</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, \nIShardingCore, IMySqlCapDataStorage\n{\n//Your Code\n}\n</code></pre> <p>\u4fee\u6539AddCap\u4ee3\u7801\uff0c\u914d\u7f6eUseNetCorePalStorage <pre><code>services.AddCap(op =&gt;\n{\n   op.UseNetCorePalStorage&lt;ShardingDatabaseDbContext&gt;(); //\u914d\u7f6e\u4f7f\u7528UseNetCorePalStorage \u4ee5\u652f\u6301\u5206\u5e93\n   op.UseRabbitMQ(p =&gt;\n   {\n      p.HostName = _rabbitMqContainer.Hostname;\n      p.UserName = \"guest\";\n      p.Password = \"guest\";\n      p.Port = _rabbitMqContainer.GetMappedPublicPort(5672);\n      p.VirtualHost = \"/\";\n   }); \n});\n</code></pre></p> <p>MS SqlServer \u4ee5\u53ca PostgreSql \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5bf9\u5e94\u7684\u5305\u6765\u652f\u6301 <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.SqlServer\ndotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.PostgreSql\n</code></pre></p> </li> <li> <p>\u914d\u7f6e<code>MediatR</code>\u6dfb\u52a0<code>AddShardingBehavior</code>,\u6ce8\u610f\u9700\u8981\u6dfb\u52a0\u5728<code>AddUnitOfWorkBehaviors</code>\u4e4b\u524d:</p> <pre><code>services.AddMediatR(cfg =&gt;\n                 cfg.RegisterServicesFromAssembly(typeof(ShardingDatabaseDbContextTests).Assembly)\n                     .AddShardingBehavior()    //\u6dfb\u52a0\u5728`AddUnitOfWorkBehaviors`\u4e4b\u524d\n                     .AddUnitOfWorkBehaviors());\n</code></pre> </li> <li> <p>\u4e3a\u5206\u5e93\u7684\u5b9e\u4f53\u6dfb\u52a0\u5206\u5e93\u8def\u7531\u914d\u7f6e\uff0c\u5206\u5e93\u9700\u8981\u5b9e\u73b0\u57fa\u7c7b<code>NetCorePalVirtualDataSourceRoute</code>:</p> <pre><code>public class OrderVirtualDataSourceRoute(IOptions&lt;NetCorePalShardingCoreOptions&gt; options)\n : NetCorePalVirtualDataSourceRoute&lt;Order,\n     string&gt;(options)\n{\n    public override void Configure(EntityMetadataDataSourceBuilder&lt;Order&gt; builder)\n    {\n        builder.ShardingProperty(o =&gt; o.Area); //\u8fd4\u56de\u5206\u5e93\u5b57\u6bb5\n    }\n\n    protected override string GetDataSourceName(object? shardingKey)\n    {\n        return shardingKey == null ? string.Empty : shardingKey.ToString()!; //\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5206\u5e93\u903b\u8f91\n    }\n}\n</code></pre> </li> <li> <p>\u914d\u7f6eShardingCore:</p> <pre><code>services.AddShardingDbContext&lt;ShardingDatabaseDbContext&gt;()\n                 .UseNetCorePal(op =&gt;  //\u914d\u7f6e\u5206\u5e93\u540d\u79f0\uff0c\u9700\u8981UseConfig\u4e2d\u914d\u7f6e\u7684\u540d\u79f0\u4fdd\u6301\u4e00\u81f4\n                 {\n                     op.AllDataSourceNames = [\"Db0\", \"Db1\"];\n                     op.DefaultDataSourceName = \"Db0\";\n                 })\n                 .UseRouteConfig(op =&gt;\n                 {\n                     op.AddCapShardingDataSourceRoute();  //\u6dfb\u52a0\u9ed8\u8ba4\u7684PubishedMessage\u5206\u5e93\u8def\u7531\n                     op.AddShardingDataSourceRoute&lt;OrderVirtualDataSourceRoute&gt;();  //\u6dfb\u52a0\u5b9e\u4f53\u5206\u5e93\u8def\u7531\n                 }).UseConfig(op =&gt;\n                 {\n                     op.ThrowIfQueryRouteNotMatch = true;\n                     op.UseShardingQuery((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.UseShardingTransaction((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.AddDefaultDataSource(\"Db0\", _mySqlContainer0.GetConnectionString());\n                     op.AddExtraDataSource(_ =&gt; new Dictionary&lt;string, string&gt;\n                     {\n                         { \"Db1\", _mySqlContainer1.GetConnectionString() }\n                     });\n                 })\n                 .ReplaceService&lt;IDbContextCreator, ShardingDatabaseDbContextCreator&gt;()\n                 .AddShardingCore();\n</code></pre> </li> </ol>"},{"location":"zh/sharding/sharding-database/#_4","title":"\u9ad8\u7ea7","text":"<p>\u66f4\u591a\u5206\u5e93\u914d\u7f6e\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1ahttps://xuejmnet.github.io/sharding-core-doc/sharding-data-source/init/</p>"},{"location":"zh/sharding/sharding-table/","title":"\u5206\u8868","text":"<p>\u5f53\u67d0\u4e2a\u4e1a\u52a1\u8868\u6570\u636e\u91cf\u89c4\u6a21\u6bd4\u8f83\u5927\u800c\u5f71\u54cd\u67e5\u8be2\u6027\u80fd\u65f6\uff0c\u53ef\u4ee5\u91c7\u53d6\u5206\u8868\u7684\u65b9\u5f0f\u5c06\u6570\u636e\u62c6\u5206\u5f00\uff0c<code>sharding-core</code> \u652f\u6301\u6309\u7167<code>\u65f6\u95f4</code>\u3001<code>\u53d6\u6a21</code>\u7b49</p>"},{"location":"zh/sharding/sharding-table/#_2","title":"\u914d\u7f6e\u5206\u8868","text":"<ol> <li> <p>\u6dfb\u52a0\u5305<code>NetCorePal.Extensions.ShardingCore</code>\u5f15\u7528\uff1a</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   \u6216\u8005 PackageReference   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>\u4e3a\u4f60\u7684 <code>DbContext</code> \u7c7b\u578b\u6dfb\u52a0 <code>IShardingCore</code> \u63a5\u53e3</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    //Your Code\n}  \n</code></pre> </li> <li> <p>\u521b\u5efa<code>ApplicationDbContextCreator</code></p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>\u79fb\u9664 <code>AddDbContext</code> \u6ce8\u518c\u65b9\u5f0f     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>\u4e3a\u8868\u6dfb\u52a0\u5206\u8868\u914d\u7f6e\uff1a</p> <pre><code>public class OrderVirtualTableRoute : AbstractSimpleShardingMonthKeyDateTimeVirtualTableRoute&lt;Order&gt;\n{\n    public override DateTime GetBeginTime()\n    {\n        return DateTime.Now.AddMonths(-3);\n    }\n\n    public override void Configure(EntityMetadataTableBuilder&lt;Order&gt; builder)\n    {\n        builder.ShardingProperty(o =&gt; o.CreationTime);\n    }\n\n    public override bool AutoCreateTableByTime()\n    {\n        return true;\n    }\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>AddShardingDbContext</code> \u6ce8\u518c<code>ApplicationDbContext</code>:</p> <pre><code>builder.Services.AddShardingDbContext&lt;ApplicationDbContext&gt;()\n        .UseRouteConfig(op =&gt;\n        {\n           op.AddShardingTableRoute&lt;OrderVirtualTableRoute&gt;(); //\u6ce8\u518c\u5206\u8868\u914d\u7f6e\n        })\n        .UseConfig(op =&gt;\n        {\n            op.ThrowIfQueryRouteNotMatch = true;\n            op.UseShardingQuery((conStr, builder) =&gt;\n            {\n                builder.UseMySql(conStr,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.UseShardingTransaction((con, builder) =&gt;\n            {\n                builder.UseMySql(con,\n                    new MySqlServerVersion(new Version(8, 0, 34)));\n            });\n            op.AddDefaultDataSource(\"ds0\", builder.Configuration.GetConnectionString(\"Mysql\")); //\u914d\u7f6e\u5199\u5e93\n        })\n        .ReplaceService&lt;IDbContextCreator, ApplicationDbContextCreator&gt;()\n        .AddShardingCore();\n</code></pre> </li> </ol>"},{"location":"zh/sharding/sharding-table/#_3","title":"\u9ad8\u7ea7","text":"<p>\u66f4\u591a\u5173\u4e8e\u5206\u8868\u7684\u914d\u7f6e\u548c\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a https://xuejmnet.github.io/sharding-core-doc/sharding-table/init/</p>"},{"location":"zh/sharding/sharding-tenant/","title":"\u6309\u79df\u6237\u5206\u5e93","text":"<p>\u6309\u79df\u6237\u5206\u5e93\uff0c\u662f\u66f4\u5177\u4f53\u7684\u5206\u5e93\u7b56\u7565\u573a\u666f\uff0c\u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\u5927\u90e8\u5206\u7684\u4e1a\u52a1\u5904\u7406\u90fd\u662f\u9650\u5b9a\u5728\u79df\u6237\u8303\u56f4\u5185\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4fdd\u6301\u5728\u540c\u4e00\u4e8b\u52a1\u5185\u63d0\u4ea4\u3002</p>"},{"location":"zh/sharding/sharding-tenant/#_2","title":"\u914d\u7f6e\u5206\u5e93","text":"<ol> <li> <p>\u6dfb\u52a0\u5305<code>NetCorePal.Extensions.ShardingCore</code>\u5f15\u7528\uff1a</p> <p><pre><code>dotnet add package NetCorePal.Extensions.ShardingCore\n</code></pre>   \u6216\u8005 PackageReference   <pre><code>&lt;PackageReference Include=\"NetCorePal.Extensions.ShardingCore\" /&gt;\n</code></pre></p> </li> <li> <p>\u4e3a\u4f60\u7684 <code>DbContext</code> \u7c7b\u578b\u6dfb\u52a0 <code>IShardingCore</code> \u63a5\u53e3</p> <pre><code>public partial class ApplicationDbContext : AppDbContextBase, IShardingCore\n{\n    //Your Code\n}  \n</code></pre> </li> <li> <p>\u521b\u5efa<code>ApplicationDbContextCreator</code></p> <pre><code>public class ApplicationDbContextCreator(IShardingProvider provider)\n    : IDbContextCreator\n{\n    public DbContext CreateDbContext(DbContext shellDbContext, ShardingDbContextOptions shardingDbContextOptions)\n    {\n        var outDbContext = (ApplicationDbContext)shellDbContext;\n        var dbContext = new ApplicationDbContext(\n            (DbContextOptions&lt;ApplicationDbContext&gt;)shardingDbContextOptions.DbContextOptions, outDbContext.Mediator);\n        if (dbContext is IShardingTableDbContext shardingTableDbContext)\n        {\n            shardingTableDbContext.RouteTail = shardingDbContextOptions.RouteTail;\n        }\n\n        _ = dbContext.Model;\n        return dbContext;\n    }\n\n    public DbContext GetShellDbContext(IShardingProvider shardingProvider)\n    {\n        return shardingProvider.GetRequiredService&lt;ApplicationDbContext&gt;();\n    }\n}\n</code></pre> </li> <li> <p>\u79fb\u9664 <code>AddDbContext</code> \u6ce8\u518c\u65b9\u5f0f     <pre><code>builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n    {\n        options.UseMySql(builder.Configuration.GetConnectionString(\"Mysql\"),\n            new MySqlServerVersion(new Version(8, 0, 34)),\n            b =&gt; { b.MigrationsAssembly(typeof(Program).Assembly.FullName); });\n    });\n</code></pre></p> </li> <li> <p>\u6dfb\u52a0\u5305 <code>NetCorePal.Extensions.DistributedTransactions.CAP.MySql</code> \u4ee5\u652f\u6301CAP\u7684\u53d1\u5e03\u6d88\u606f\u5206\u5e93\uff1a</p> <p><pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.MySql\n</code></pre> \u4e3a ApplicationDbContext \u6dfb\u52a0 IMySqlCapDataStorage \u63a5\u53e3 <pre><code>public partial class ApplicationDbContext : AppDbContextBase, \n   IShardingCore, IMySqlCapDataStorage\n{\n    //Your Code\n}\n</code></pre></p> <p>\u4fee\u6539AddCap\u4ee3\u7801\uff0c\u914d\u7f6eUseNetCorePalStorage <pre><code>services.AddCap(op =&gt;\n{\n   op.UseNetCorePalStorage&lt;ShardingDatabaseDbContext&gt;(); //\u914d\u7f6e\u4f7f\u7528UseNetCorePalStorage \u4ee5\u652f\u6301\u5206\u5e93\n   op.UseRabbitMQ(p =&gt;\n   {\n      p.HostName = _rabbitMqContainer.Hostname;\n      p.UserName = \"guest\";\n      p.Password = \"guest\";\n      p.Port = _rabbitMqContainer.GetMappedPublicPort(5672);\n      p.VirtualHost = \"/\";\n   });\n});\n</code></pre></p> <p>MS SqlServer \u4ee5\u53ca PostgreSql \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5bf9\u5e94\u7684\u5305\u6765\u652f\u6301 <pre><code>dotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.SqlServer\ndotnet add package NetCorePal.Extensions.DistributedTransactions.CAP.PostgreSql\n</code></pre></p> </li> <li> <p>\u914d\u7f6e<code>MediatR</code>\u6dfb\u52a0<code>AddTenantShardingBehavior</code>,\u6ce8\u610f\u9700\u8981\u6dfb\u52a0\u5728<code>AddUnitOfWorkBehaviors</code>\u4e4b\u524d:</p> <pre><code>services.AddMediatR(cfg =&gt;\n                 cfg.RegisterServicesFromAssembly(typeof(ShardingDatabaseDbContextTests).Assembly)\n                     .AddTenantShardingBehavior()    //\u6dfb\u52a0\u5728`AddUnitOfWorkBehaviors`\u4e4b\u524d\n                     .AddUnitOfWorkBehaviors());\n</code></pre> </li> <li> <p>\u4e3a\u5206\u5e93\u7684\u5b9e\u4f53\u6dfb\u52a0\u5206\u5e93\u8def\u7531\u914d\u7f6e\uff0c\u5206\u5e93\u9700\u8981\u5b9e\u73b0\u57fa\u7c7b<code>NetCorePalTenantVirtualDataSourceRoute</code>:</p> <pre><code>public class OrderTenantVirtualDataSourceRoute(\n     IOptions&lt;NetCorePalShardingCoreOptions&gt; options,\n     ITenantDataSourceProvider provider) : \n     NetCorePalTenantVirtualDataSourceRoute&lt;Order, string&gt;(options, provider)\n{\n     public override void Configure(EntityMetadataDataSourceBuilder&lt;Order&gt; builder)\n     {\n          builder.ShardingProperty(p =&gt; p.TenantId); //\u8fd4\u56de\u79df\u6237Id\n     }\n}\n</code></pre> </li> <li> <p>\u914d\u7f6eShardingCore:</p> <pre><code>services.AddShardingDbContext&lt;ShardingDatabaseDbContext&gt;()\n                 .UseNetCorePal(op =&gt;  //\u914d\u7f6e\u5206\u5e93\u540d\u79f0\uff0c\u9700\u8981UseConfig\u4e2d\u914d\u7f6e\u7684\u540d\u79f0\u4fdd\u6301\u4e00\u81f4\n                 {\n                     op.AllDataSourceNames = [\"Db0\", \"Db1\"];\n                     op.DefaultDataSourceName = \"Db0\";\n                 })\n                 .UseRouteConfig(op =&gt;\n                 {\n                     op.AddCapShardingDataSourceRoute();  //\u6dfb\u52a0\u9ed8\u8ba4\u7684PubishedMessage\u5206\u5e93\u8def\u7531\n                     op.AddShardingDataSourceRoute&lt;OrderTenantVirtualDataSourceRoute&gt;();  //\u6dfb\u52a0\u5b9e\u4f53\u5206\u5e93\u8def\u7531\n                 }).UseConfig(op =&gt;\n                 {\n                     op.ThrowIfQueryRouteNotMatch = true;\n                     op.UseShardingQuery((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.UseShardingTransaction((conStr, builder) =&gt;\n                     {\n                         builder.UseMySql(conStr,\n                             new MySqlServerVersion(new Version(8, 0, 34)));\n                     });\n                     op.AddDefaultDataSource(\"Db0\", _mySqlContainer0.GetConnectionString());\n                     op.AddExtraDataSource(_ =&gt; new Dictionary&lt;string, string&gt;\n                     {\n                         { \"Db1\", _mySqlContainer1.GetConnectionString() }\n                     });\n                 })\n                 .ReplaceService&lt;IDbContextCreator, ShardingDatabaseDbContextCreator&gt;()\n                 .AddShardingCore();\n</code></pre> </li> <li> <p>\u914d\u7f6e\u79df\u6237\u4e0a\u4e0b\u6587\u652f\u6301\uff0c\u6dfb\u52a0\u5305<code>NetCorePal.Context.Shared</code>:     <pre><code> dotnet add package NetCorePal.Context.Shared\n</code></pre>     \u6ce8\u518c\u79df\u6237\u4e0a\u4e0b\u6587\u4ee5\u53caCAP\u4e0a\u4e0b\u6587\u5904\u7406\u5668\uff1a     <pre><code>services.AddTenantContext().AddCapContextProcessor();\n</code></pre></p> </li> <li> <p>\u914d\u7f6eCAP\u4e0a\u4e0b\u6587\u652f\u6301\uff1a     <pre><code>services.AddIntegrationEvents(typeof(ShardingTenantDbContext))\n                 .UseCap&lt;ShardingTenantDbContext&gt;(capbuilder =&gt;\n                 {\n                     capbuilder.AddContextIntegrationFilters(); //\u6dfb\u52a0\u79df\u6237\u4e0a\u4e0b\u6587\u8fc7\u6ee4\u5668\n                     capbuilder.RegisterServicesFromAssemblies(typeof(ShardingTenantDbContext));\n                 });\n</code></pre></p> </li> <li> <p>\u5b9e\u73b0<code>ITenantDataSourceProvider</code>\u5e76\u6ce8\u518c\uff1a</p> <pre><code>public class MyTenantDataSourceProvider : ITenantDataSourceProvider\n{\n   public string GetDataSourceName(string tenantId)\n   {\n       return \"Db\" + (long.Parse(tenantId) % 10);  //\u5b9e\u73b0\u79df\u6237Id\u4e0e\u6570\u636e\u6e90\u540d\u79f0\u7684\u5bf9\u5e94\u903b\u8f91\n   }\n}\n</code></pre> <p>\u6ce8\u518c\u79df\u6237\u6570\u636e\u6e90\u63d0\u4f9b\u7a0b\u5e8f\uff1a   <pre><code>services.AddSingleton&lt;ITenantDataSourceProvider, MyTenantDataSourceProvider&gt;();\n</code></pre></p> </li> </ol>"},{"location":"zh/sharding/sharding-tenant/#_3","title":"\u4f7f\u7528\u79df\u6237\u4e0a\u4e0b\u6587","text":"<p>\u5728\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u9700\u8981\u64cd\u4f5c\u79df\u6237\u6570\u636e\u65f6\uff0c\u9700\u8981\u5728 <code>Command</code> \u53d1\u51fa\u524d\u5b8c\u6210\u79df\u6237\u4e0a\u4e0b\u6587\u7684\u521d\u59cb\u5316\uff0c\u4f7f\u7528<code>IContextAccessor</code>\u8bbe\u7f6e\u5f53\u524d\u4e0a\u4e0b\u6587\uff1a</p> <pre><code>//\u6839\u636e\u7528\u6237\u8bf7\u6c42\u83b7\u53d6\u79df\u6237Id\nvar tenantId = currentUser.TenantId;\nvar contextAccessor = scope.ServiceProvider.GetRequiredService&lt;IContextAccessor&gt;();\ncontextAccessor.SetContext(new TenantContext(tenantId));\n</code></pre> <p>\u4e00\u822c\u5efa\u8bae\u5728\u4e2d\u95f4\u4ef6\u4e2d\u5b8c\u6210\u79df\u6237\u4e0a\u4e0b\u6587\u7684\u8bbe\u7f6e\uff1a</p> <pre><code>public class TenantMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public TenantMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context, IContextAccessor contextAccessor)\n    {\n        var tenantId = context.Request.Headers[\"TenantId\"].ToString();\n        if (!string.IsNullOrEmpty(tenantId))\n        {\n            contextAccessor.SetContext(new TenantContext(tenantId));\n        }\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"zh/sharding/sharding-tenant/#_4","title":"\u9ad8\u7ea7","text":"<p>\u66f4\u591a\u5206\u5e93\u914d\u7f6e\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1ahttps://xuejmnet.github.io/sharding-core-doc/sharding-data-source/init/</p>"},{"location":"zh/transactions/transactions/","title":"\u4e8b\u52a1","text":""},{"location":"zh/transactions/transactions/#_2","title":"\u9886\u57df\u4e8b\u4ef6\u4e0e\u4e8b\u52a1","text":"<p><code>\u9886\u57df\u4e8b\u4ef6</code>\u4e0e<code>\u547d\u4ee4</code>\u4f1a\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u4e8b\u52a1\u4e2d\uff0c\u5373\u5b9e\u73b0\u4e86<code>\u5f3a\u4e00\u81f4\u6027</code>\uff0c\u5982\u679c<code>\u9886\u57df\u4e8b\u4ef6\u5904\u7406\u5668</code>\u629b\u51fa\u5f02\u5e38\uff0c\u4e8b\u52a1\u4f1a\u56de\u6eda\uff0c<code>\u547d\u4ee4</code>\u548c<code>\u9886\u57df\u4e8b\u4ef6</code>\u7684\u64cd\u4f5c\u90fd\u4f1a\u56de\u6eda\u3002</p>"},{"location":"zh/transactions/transactions/#_3","title":"\u96c6\u6210\u4e8b\u4ef6\u4e0e\u4e8b\u52a1","text":"<p><code>\u96c6\u6210\u4e8b\u4ef6</code>\u7684\u5904\u7406\u76ee\u524d\u57fa\u4e8eCAP\u6846\u67b6\u7684<code>Outbox\u6a21\u578b</code>\u5b9e\u73b0\u4e86<code>\u6700\u7ec8\u4e00\u81f4\u6027</code>\u3002</p> <p><code>\u96c6\u6210\u4e8b\u4ef6</code>\u7684\u4fdd\u5b58\u4e0e<code>\u547d\u4ee4</code>\u4f1a\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u4e8b\u52a1\u4e2d\uff0c\u4e00\u65e6\u4e8b\u52a1\u63d0\u4ea4\uff0c<code>\u96c6\u6210\u4e8b\u4ef6</code>\u4e5f\u4f1a\u88ab<code>CAP</code>\u7ec4\u4ef6\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u5e76\u53d1\u9001\u5230<code>MQ</code>\u4e2d\u3002</p> <p><code>\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668</code>\u7684\u5904\u7406\u4e0e\u53d1\u8d77\u5b83\u7684<code>\u547d\u4ee4</code>\u662f\u5728\u4e0d\u540c\u7684\u4e8b\u52a1\u4e2d\uff0c\u5982\u679c<code>\u96c6\u6210\u4e8b\u4ef6\u5904\u7406\u5668</code>\u629b\u51fa\u5f02\u5e38\uff0c<code>\u96c6\u6210\u4e8b\u4ef6</code>\u4f1a\u88ab<code>CAP</code>\u7ec4\u4ef6\u8bb0\u5f55\u5e76\u91cd\u8bd5\uff0c<code>\u547d\u4ee4</code>\u7684\u64cd\u4f5c\u4e0d\u4f1a\u56de\u6eda\u3002</p>"},{"location":"zh/transactions/transactions/#_4","title":"\u4e8b\u52a1\u751f\u547d\u5468\u671f","text":"<p>\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u4e8b\u52a1\u7684\u751f\u547d\u5468\u671f\uff1a</p> <p></p> <p>\u6846\u67b6\u4f1a\u5728 <code>CommandHandler</code> \u5f00\u59cb\u524d\u5f00\u542f\u4e00\u4e2a\u4e8b\u52a1\uff0c\u7531 <code>CommandHandler</code> \u64cd\u4f5c\u9886\u57df\u6a21\u578b\u800c\u53d1\u51fa\u7684<code>DomainEvent</code> \u4f1a\u88ab<code>DomainEventHandler</code>\u5904\u7406\uff0c\u5904\u7406\u5b8c\u6210\u540e\u4f1a\u63d0\u4ea4\u4e8b\u52a1\u3002\u5982\u679c\u5728<code>CommandHandler</code>\u6216<code>DomainEventHandler</code>\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u4e8b\u52a1\u4f1a\u56de\u6eda\u3002</p> <p>\u5982\u679c\u5728<code>DomainEventHandler</code>\u4e2d\u5c06<code>DomainEvent</code>\u8f6c\u6362\u4e3a<code>IntegrationEvent</code>\uff0c\u5219\u4f1a\u5728\u5f53\u524d\u6570\u636e\u5e93\u4e8b\u52a1\u4e2d\u5c06<code>IntegrationEvent</code>\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\uff0c\u5982\u679c\u6301\u4e45\u5316\u5931\u8d25\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u4e8b\u52a1\u4f1a\u56de\u6eda\u3002</p> <p>\u5982\u679c\u6570\u636e\u5e93\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5219\u4f1a\u8fd4\u56de<code>CommandHandler</code>\u7684\u6267\u884c\u7ed3\u679c\uff0c\u5f53\u524d\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\uff0c\u540c\u65f6\u4f1a\u53d1\u5e03<code>IntegrationEvent</code>\u5230\u6d88\u606f\u961f\u5217\u3002</p> <p><code>IntegrationEvent</code>\u4f1a\u88ab\u8ba2\u9605\u5b83\u5730<code>IntegrationEventHandler</code>\u5904\u7406\uff0c\u5904\u7406\u5b8c\u6210\u540e\u4f1a\u63d0\u4ea4\u4e8b\u52a1\u3002\u5982\u679c\u5728<code>IntegrationEventHandler</code>\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u6846\u67b6\u4f1a\u8bb0\u5f55\u5f02\u5e38\u65e5\u5fd7\uff0c\u5e76\u5c1d\u8bd5\u91cd\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u91cd\u8bd510\u6b21\uff0c\u6bcf\u6b21\u91cd\u8bd5\u4f1a\u6709\u4e00\u5b9a\u5730\u65f6\u95f4\u95f4\u9694\u3002</p>"}]}